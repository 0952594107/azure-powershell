// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Consumption
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for ReservationsDetailsOperations
    /// </summary>
    public static partial class ReservationsDetailsOperationsExtensions
    {
        /// <summary>
        /// Lists the reservations details for provided date range.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='reservationOrderId'>
        /// Order Id of the reservation
        /// </param>
        /// <param name='filter'>
        /// Filter reservation details by date range. The properties/UsageDate for
        /// start date and end date. The filter supports &#39;le&#39; and  &#39;ge&#39;
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ReservationDetails> ListByReservationOrder(this IReservationsDetailsOperations operations, string reservationOrderId, string filter)
        {
                return ((IReservationsDetailsOperations)operations).ListByReservationOrderAsync(reservationOrderId, filter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists the reservations details for provided date range.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='reservationOrderId'>
        /// Order Id of the reservation
        /// </param>
        /// <param name='filter'>
        /// Filter reservation details by date range. The properties/UsageDate for
        /// start date and end date. The filter supports &#39;le&#39; and  &#39;ge&#39;
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ReservationDetails>> ListByReservationOrderAsync(this IReservationsDetailsOperations operations, string reservationOrderId, string filter, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByReservationOrderWithHttpMessagesAsync(reservationOrderId, filter, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists the reservations details for provided date range.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='reservationOrderId'>
        /// Order Id of the reservation
        /// </param>
        /// <param name='reservationId'>
        /// Id of the reservation
        /// </param>
        /// <param name='filter'>
        /// Filter reservation details by date range. The properties/UsageDate for
        /// start date and end date. The filter supports &#39;le&#39; and  &#39;ge&#39;
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ReservationDetails> ListByReservationOrderAndReservation(this IReservationsDetailsOperations operations, string reservationOrderId, string reservationId, string filter)
        {
                return ((IReservationsDetailsOperations)operations).ListByReservationOrderAndReservationAsync(reservationOrderId, reservationId, filter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists the reservations details for provided date range.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='reservationOrderId'>
        /// Order Id of the reservation
        /// </param>
        /// <param name='reservationId'>
        /// Id of the reservation
        /// </param>
        /// <param name='filter'>
        /// Filter reservation details by date range. The properties/UsageDate for
        /// start date and end date. The filter supports &#39;le&#39; and  &#39;ge&#39;
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ReservationDetails>> ListByReservationOrderAndReservationAsync(this IReservationsDetailsOperations operations, string reservationOrderId, string reservationId, string filter, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByReservationOrderAndReservationWithHttpMessagesAsync(reservationOrderId, reservationId, filter, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists the reservations details for provided date range.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ReservationDetails> ListByReservationOrderNext(this IReservationsDetailsOperations operations, string nextPageLink)
        {
                return ((IReservationsDetailsOperations)operations).ListByReservationOrderNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists the reservations details for provided date range.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ReservationDetails>> ListByReservationOrderNextAsync(this IReservationsDetailsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByReservationOrderNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists the reservations details for provided date range.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ReservationDetails> ListByReservationOrderAndReservationNext(this IReservationsDetailsOperations operations, string nextPageLink)
        {
                return ((IReservationsDetailsOperations)operations).ListByReservationOrderAndReservationNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists the reservations details for provided date range.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ReservationDetails>> ListByReservationOrderAndReservationNextAsync(this IReservationsDetailsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByReservationOrderAndReservationNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
