// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Consumption.Models
{
    using System.Linq;

    /// <summary>
    /// The properties of the budget.
    /// </summary>
    public partial class BudgetProperties
    {
        /// <summary>
        /// Initializes a new instance of the BudgetProperties class.
        /// </summary>
        public BudgetProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BudgetProperties class.
        /// </summary>

        /// <param name="category">The category of the budget, whether the budget tracks cost or usage.
        /// Possible values include: &#39;Cost&#39;, &#39;Usage&#39;</param>

        /// <param name="amount">The total amount of cost to track with the budget
        /// </param>

        /// <param name="timeGrain">The time covered by a budget. Tracking of the amount will be reset based on
        /// the time grain.
        /// Possible values include: &#39;Monthly&#39;, &#39;Quarterly&#39;, &#39;Annually&#39;</param>

        /// <param name="timePeriod">Has start and end date of the budget. The start date must be first of the
        /// month and should be less than the end date. Budget start date must be on or
        /// after June 1, 2017. Future start date should not be more than three months.
        /// Past start date should  be selected within the timegrain preiod. There are
        /// no restrictions on the end date.
        /// </param>

        /// <param name="filters">May be used to filter budgets by resource group, resource, or meter.
        /// </param>

        /// <param name="currentSpend">The current amount of cost which is being tracked for a budget.
        /// </param>

        /// <param name="notifications">Dictionary of notifications associated with the budget. Budget can have up
        /// to five notifications.
        /// </param>
        public BudgetProperties(string category, decimal amount, string timeGrain, BudgetTimePeriod timePeriod, Filters filters = default(Filters), CurrentSpend currentSpend = default(CurrentSpend), System.Collections.Generic.IDictionary<string, Notification> notifications = default(System.Collections.Generic.IDictionary<string, Notification>))

        {
            this.Category = category;
            this.Amount = amount;
            this.TimeGrain = timeGrain;
            this.TimePeriod = timePeriod;
            this.Filters = filters;
            this.CurrentSpend = currentSpend;
            this.Notifications = notifications;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the category of the budget, whether the budget tracks cost or
        /// usage. Possible values include: &#39;Cost&#39;, &#39;Usage&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "category")]
        public string Category {get; set; }

        /// <summary>
        /// Gets or sets the total amount of cost to track with the budget
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "amount")]
        public decimal Amount {get; set; }

        /// <summary>
        /// Gets or sets the time covered by a budget. Tracking of the amount will be
        /// reset based on the time grain. Possible values include: &#39;Monthly&#39;, &#39;Quarterly&#39;, &#39;Annually&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "timeGrain")]
        public string TimeGrain {get; set; }

        /// <summary>
        /// Gets or sets has start and end date of the budget. The start date must be
        /// first of the month and should be less than the end date. Budget start date
        /// must be on or after June 1, 2017. Future start date should not be more than
        /// three months. Past start date should  be selected within the timegrain
        /// preiod. There are no restrictions on the end date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "timePeriod")]
        public BudgetTimePeriod TimePeriod {get; set; }

        /// <summary>
        /// Gets or sets may be used to filter budgets by resource group, resource, or
        /// meter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "filters")]
        public Filters Filters {get; set; }

        /// <summary>
        /// Gets the current amount of cost which is being tracked for a budget.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "currentSpend")]
        public CurrentSpend CurrentSpend {get; private set; }

        /// <summary>
        /// Gets or sets dictionary of notifications associated with the budget. Budget
        /// can have up to five notifications.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "notifications")]
        public System.Collections.Generic.IDictionary<string, Notification> Notifications {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Category == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Category");
            }
            if (this.TimeGrain == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "TimeGrain");
            }
            if (this.TimePeriod == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "TimePeriod");
            }


            if (this.TimePeriod != null)
            {
                this.TimePeriod.Validate();
            }
            if (this.Filters != null)
            {
                this.Filters.Validate();
            }

            if (this.Notifications != null)
            {
                foreach (var valueElement in this.Notifications.Values)
                {
                    if (valueElement != null)
                    {
                        valueElement.Validate();
                    }
                }
            }
        }
    }
}