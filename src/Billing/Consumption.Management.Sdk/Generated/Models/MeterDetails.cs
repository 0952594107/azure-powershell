// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Consumption.Models
{
    using System.Linq;

    /// <summary>
    /// The properties of the meter detail.
    /// </summary>
    public partial class MeterDetails
    {
        /// <summary>
        /// Initializes a new instance of the MeterDetails class.
        /// </summary>
        public MeterDetails()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MeterDetails class.
        /// </summary>

        /// <param name="meterName">The name of the meter, within the given meter category
        /// </param>

        /// <param name="meterCategory">The category of the meter, for example, &#39;Cloud services&#39;, &#39;Networking&#39;,
        /// etc..
        /// </param>

        /// <param name="meterSubCategory">The subcategory of the meter, for example, &#39;A6 Cloud services&#39;,
        /// &#39;ExpressRoute (IXP)&#39;, etc..
        /// </param>

        /// <param name="unit">The unit in which the meter consumption is charged, for example, &#39;Hours&#39;,
        /// &#39;GB&#39;, etc.
        /// </param>

        /// <param name="meterLocation">The location in which the Azure service is available.
        /// </param>

        /// <param name="totalIncludedQuantity">The total included quantity associated with the offer.
        /// </param>

        /// <param name="pretaxStandardRate">The pretax listing price.
        /// </param>
        public MeterDetails(string meterName = default(string), string meterCategory = default(string), string meterSubCategory = default(string), string unit = default(string), string meterLocation = default(string), decimal? totalIncludedQuantity = default(decimal?), decimal? pretaxStandardRate = default(decimal?))

        {
            this.MeterName = meterName;
            this.MeterCategory = meterCategory;
            this.MeterSubCategory = meterSubCategory;
            this.Unit = unit;
            this.MeterLocation = meterLocation;
            this.TotalIncludedQuantity = totalIncludedQuantity;
            this.PretaxStandardRate = pretaxStandardRate;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the name of the meter, within the given meter category
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "meterName")]
        public string MeterName {get; private set; }

        /// <summary>
        /// Gets the category of the meter, for example, &#39;Cloud services&#39;,
        /// &#39;Networking&#39;, etc..
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "meterCategory")]
        public string MeterCategory {get; private set; }

        /// <summary>
        /// Gets the subcategory of the meter, for example, &#39;A6 Cloud services&#39;,
        /// &#39;ExpressRoute (IXP)&#39;, etc..
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "meterSubCategory")]
        public string MeterSubCategory {get; private set; }

        /// <summary>
        /// Gets the unit in which the meter consumption is charged, for example,
        /// &#39;Hours&#39;, &#39;GB&#39;, etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "unit")]
        public string Unit {get; private set; }

        /// <summary>
        /// Gets the location in which the Azure service is available.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "meterLocation")]
        public string MeterLocation {get; private set; }

        /// <summary>
        /// Gets the total included quantity associated with the offer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "totalIncludedQuantity")]
        public decimal? TotalIncludedQuantity {get; private set; }

        /// <summary>
        /// Gets the pretax listing price.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "pretaxStandardRate")]
        public decimal? PretaxStandardRate {get; private set; }
    }
}