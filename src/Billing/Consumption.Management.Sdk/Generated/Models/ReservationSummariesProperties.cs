// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Consumption.Models
{
    using System.Linq;

    /// <summary>
    /// The properties of the reservation summaries.
    /// </summary>
    public partial class ReservationSummariesProperties
    {
        /// <summary>
        /// Initializes a new instance of the ReservationSummariesProperties class.
        /// </summary>
        public ReservationSummariesProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ReservationSummariesProperties class.
        /// </summary>

        /// <param name="reservationOrderId">The reservation order ID is the identifier for a reservation purchase. Each
        /// reservation order ID represents a single purchase transaction. A
        /// reservation order contains reservations. The reservation order specifies
        /// the VM size and region for the reservations.
        /// </param>

        /// <param name="reservationId">The reservation ID is the identifier of a reservation within a reservation
        /// order. Each reservation is the grouping for applying the benefit scope and
        /// also specifies the number of instances to which the reservation benefit can
        /// be applied to.
        /// </param>

        /// <param name="skuName">This is the ARM Sku name. It can be used to join with the servicetype field
        /// in additoinalinfo in usage records.
        /// </param>

        /// <param name="reservedHours">This is the total hours reserved. E.g. if reservation for 1 instance was
        /// made on 1 PM, this will be 11 hours for that day and 24 hours from
        /// subsequent days
        /// </param>

        /// <param name="usageDate">Data corresponding to the utilization record. If the grain of data is
        /// monthly, it will be first day of month.
        /// </param>

        /// <param name="usedHours">Total used hours by the reservation
        /// </param>

        /// <param name="minUtilizationPercentage">This is the minimum hourly utilization in the usage time (day or month).
        /// E.g. if usage record corresponds to 12/10/2017 and on that for hour 4 and
        /// 5, utilization was 10%, this field will return 10% for that day
        /// </param>

        /// <param name="avgUtilizationPercentage">This is average utilization for the entire time range. (day or month
        /// depending on the grain)
        /// </param>

        /// <param name="maxUtilizationPercentage">This is the maximum hourly utilization in the usage time (day or month).
        /// E.g. if usage record corresponds to 12/10/2017 and on that for hour 4 and
        /// 5, utilization was 100%, this field will return 100% for that day.
        /// </param>
        public ReservationSummariesProperties(string reservationOrderId = default(string), string reservationId = default(string), string skuName = default(string), decimal? reservedHours = default(decimal?), System.DateTime? usageDate = default(System.DateTime?), decimal? usedHours = default(decimal?), decimal? minUtilizationPercentage = default(decimal?), decimal? avgUtilizationPercentage = default(decimal?), decimal? maxUtilizationPercentage = default(decimal?))

        {
            this.ReservationOrderId = reservationOrderId;
            this.ReservationId = reservationId;
            this.SkuName = skuName;
            this.ReservedHours = reservedHours;
            this.UsageDate = usageDate;
            this.UsedHours = usedHours;
            this.MinUtilizationPercentage = minUtilizationPercentage;
            this.AvgUtilizationPercentage = avgUtilizationPercentage;
            this.MaxUtilizationPercentage = maxUtilizationPercentage;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the reservation order ID is the identifier for a reservation purchase.
        /// Each reservation order ID represents a single purchase transaction. A
        /// reservation order contains reservations. The reservation order specifies
        /// the VM size and region for the reservations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "reservationOrderId")]
        public string ReservationOrderId {get; private set; }

        /// <summary>
        /// Gets the reservation ID is the identifier of a reservation within a
        /// reservation order. Each reservation is the grouping for applying the
        /// benefit scope and also specifies the number of instances to which the
        /// reservation benefit can be applied to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "reservationId")]
        public string ReservationId {get; private set; }

        /// <summary>
        /// Gets this is the ARM Sku name. It can be used to join with the servicetype
        /// field in additoinalinfo in usage records.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "skuName")]
        public string SkuName {get; private set; }

        /// <summary>
        /// Gets this is the total hours reserved. E.g. if reservation for 1 instance
        /// was made on 1 PM, this will be 11 hours for that day and 24 hours from
        /// subsequent days
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "reservedHours")]
        public decimal? ReservedHours {get; private set; }

        /// <summary>
        /// Gets data corresponding to the utilization record. If the grain of data is
        /// monthly, it will be first day of month.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "usageDate")]
        public System.DateTime? UsageDate {get; private set; }

        /// <summary>
        /// Gets total used hours by the reservation
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "usedHours")]
        public decimal? UsedHours {get; private set; }

        /// <summary>
        /// Gets this is the minimum hourly utilization in the usage time (day or
        /// month). E.g. if usage record corresponds to 12/10/2017 and on that for hour
        /// 4 and 5, utilization was 10%, this field will return 10% for that day
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "minUtilizationPercentage")]
        public decimal? MinUtilizationPercentage {get; private set; }

        /// <summary>
        /// Gets this is average utilization for the entire time range. (day or month
        /// depending on the grain)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "avgUtilizationPercentage")]
        public decimal? AvgUtilizationPercentage {get; private set; }

        /// <summary>
        /// Gets this is the maximum hourly utilization in the usage time (day or
        /// month). E.g. if usage record corresponds to 12/10/2017 and on that for hour
        /// 4 and 5, utilization was 100%, this field will return 100% for that day.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "maxUtilizationPercentage")]
        public decimal? MaxUtilizationPercentage {get; private set; }
    }
}