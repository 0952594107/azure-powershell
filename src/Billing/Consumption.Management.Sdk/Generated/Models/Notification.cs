// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Consumption.Models
{
    using System.Linq;

    /// <summary>
    /// The notification associated with a budget.
    /// </summary>
    public partial class Notification
    {
        /// <summary>
        /// Initializes a new instance of the Notification class.
        /// </summary>
        public Notification()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Notification class.
        /// </summary>

        /// <param name="enabled">The notification is enabled or not.
        /// </param>

        /// <param name="operatorProperty">The comparison operator.
        /// Possible values include: &#39;EqualTo&#39;, &#39;GreaterThan&#39;, &#39;GreaterThanOrEqualTo&#39;</param>

        /// <param name="threshold">Threshold value associated with a notification. Notification is sent when
        /// the cost exceeded the threshold. It is always percent and has to be between
        /// 0 and 1000.
        /// </param>

        /// <param name="contactEmails">Email addresses to send the budget notification to when the threshold is
        /// exceeded.
        /// </param>

        /// <param name="contactRoles">Contact roles to send the budget notification to when the threshold is
        /// exceeded.
        /// </param>

        /// <param name="contactGroups">Action groups to send the budget notification to when the threshold is
        /// exceeded.
        /// </param>
        public Notification(bool enabled, string operatorProperty, decimal threshold, System.Collections.Generic.IList<string> contactEmails, System.Collections.Generic.IList<string> contactRoles = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> contactGroups = default(System.Collections.Generic.IList<string>))

        {
            this.Enabled = enabled;
            this.OperatorProperty = operatorProperty;
            this.Threshold = threshold;
            this.ContactEmails = contactEmails;
            this.ContactRoles = contactRoles;
            this.ContactGroups = contactGroups;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the notification is enabled or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enabled")]
        public bool Enabled {get; set; }

        /// <summary>
        /// Gets or sets the comparison operator. Possible values include: &#39;EqualTo&#39;, &#39;GreaterThan&#39;, &#39;GreaterThanOrEqualTo&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "operator")]
        public string OperatorProperty {get; set; }

        /// <summary>
        /// Gets or sets threshold value associated with a notification. Notification
        /// is sent when the cost exceeded the threshold. It is always percent and has
        /// to be between 0 and 1000.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "threshold")]
        public decimal Threshold {get; set; }

        /// <summary>
        /// Gets or sets email addresses to send the budget notification to when the
        /// threshold is exceeded.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "contactEmails")]
        public System.Collections.Generic.IList<string> ContactEmails {get; set; }

        /// <summary>
        /// Gets or sets contact roles to send the budget notification to when the
        /// threshold is exceeded.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "contactRoles")]
        public System.Collections.Generic.IList<string> ContactRoles {get; set; }

        /// <summary>
        /// Gets or sets action groups to send the budget notification to when the
        /// threshold is exceeded.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "contactGroups")]
        public System.Collections.Generic.IList<string> ContactGroups {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.OperatorProperty == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "OperatorProperty");
            }
            if (this.ContactEmails == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ContactEmails");
            }

            if (this.ContactEmails != null)
            {
                if (this.ContactEmails.Count > 50)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxItems, "ContactEmails", 50);
                }
                if (this.ContactEmails.Count < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MinItems, "ContactEmails", 1);
                }
            }

            if (this.ContactGroups != null)
            {
                if (this.ContactGroups.Count > 50)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxItems, "ContactGroups", 50);
                }
            }
        }
    }
}