// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using Microsoft.Azure;
using Microsoft.WindowsAzure.Management.Compute;
using Microsoft.WindowsAzure.Management.Compute.Models;
using System;
using System.Collections.Generic;
using System.Management.Automation;

namespace Microsoft.WindowsAzure.Commands.Compute.Automation
{
    [Cmdlet(VerbsLifecycle.Invoke, "AzureComputeMethod", DefaultParameterSetName = "InvokeByDynamicParameters")]
    [OutputType(typeof(object))]
    public partial class InvokeAzureComputeMethodCmdlet : ComputeAutomationBaseCmdlet, IDynamicParameters
    {
        protected RuntimeDefinedParameterDictionary dynamicParameters;

        protected static object[] ConvertDynamicParameters(RuntimeDefinedParameterDictionary parameters)
        {
            List<object> paramList = new List<object>();

            foreach (var param in parameters)
            {
                paramList.Add(param.Value.Value);
            }

            return paramList.ToArray();
        }

        [Parameter(Mandatory = true, ParameterSetName = "InvokeByDynamicParameters", Position = 0)]
        [ValidateSet(
            "DeploymentChangeConfigurationByName",
            "DeploymentChangeConfigurationBySlot",
            "DeploymentCreate",
            "DeploymentDeleteByName",
            "DeploymentDeleteBySlot",
            "DeploymentDeleteRoleInstanceByDeploymentName",
            "DeploymentDeleteRoleInstanceByDeploymentSlot",
            "DeploymentGetByName",
            "DeploymentGetBySlot",
            "DeploymentGetPackageByName",
            "DeploymentGetPackageBySlot",
            "DeploymentListEvents",
            "DeploymentListEventsBySlot",
            "DeploymentRebootRoleInstanceByDeploymentName",
            "DeploymentRebootRoleInstanceByDeploymentSlot",
            "DeploymentRebuildRoleInstanceByDeploymentName",
            "DeploymentRebuildRoleInstanceByDeploymentSlot",
            "DeploymentReimageRoleInstanceByDeploymentName",
            "DeploymentReimageRoleInstanceByDeploymentSlot",
            "DeploymentRollbackUpdateOrUpgradeByDeploymentName",
            "DeploymentRollbackUpdateOrUpgradeByDeploymentSlot",
            "DeploymentSwap",
            "DeploymentUpdateStatusByDeploymentName",
            "DeploymentUpdateStatusByDeploymentSlot",
            "DeploymentUpgradeByName",
            "DeploymentUpgradeBySlot",
            "DeploymentWalkUpgradeDomainByDeploymentName",
            "DeploymentWalkUpgradeDomainByDeploymentSlot",
            "DNSServerAddDNSServer",
            "DNSServerDeleteDNSServer",
            "DNSServerUpdateDNSServer",
            "ExtensionImageRegister",
            "ExtensionImageUnregister",
            "ExtensionImageUpdate",
            "HostedServiceAddExtension",
            "HostedServiceCheckNameAvailability",
            "HostedServiceCreate",
            "HostedServiceDelete",
            "HostedServiceDeleteAll",
            "HostedServiceDeleteExtension",
            "HostedServiceGet",
            "HostedServiceGetDetailed",
            "HostedServiceGetExtension",
            "HostedServiceList",
            "HostedServiceListAvailableExtensions",
            "HostedServiceListExtensions",
            "HostedServiceListExtensionVersions",
            "HostedServiceUpdate",
            "LoadBalancerCreate",
            "LoadBalancerDelete",
            "LoadBalancerUpdate",
            "OperatingSystemList",
            "OperatingSystemListFamilies",
            "ServiceCertificateCreate",
            "ServiceCertificateDelete",
            "ServiceCertificateGet",
            "ServiceCertificateList",
            "VirtualMachineDiskCreateDataDisk",
            "VirtualMachineDiskCreateDisk",
            "VirtualMachineDiskDeleteDataDisk",
            "VirtualMachineDiskDeleteDisk",
            "VirtualMachineDiskGetDataDisk",
            "VirtualMachineDiskGetDisk",
            "VirtualMachineDiskListDisks",
            "VirtualMachineDiskUpdateDataDisk",
            "VirtualMachineDiskUpdateDisk",
            "VirtualMachineDiskUpdateDiskSize",
            "VirtualMachineExtensionList",
            "VirtualMachineExtensionListVersions",
            "VirtualMachineCaptureOSImage",
            "VirtualMachineCaptureVMImage",
            "VirtualMachineCreate",
            "VirtualMachineCreateDeployment",
            "VirtualMachineDelete",
            "VirtualMachineGet",
            "VirtualMachineGetRemoteDesktopFile",
            "VirtualMachineRestart",
            "VirtualMachineShutdown",
            "VirtualMachineShutdownRoles",
            "VirtualMachineStart",
            "VirtualMachineStartRoles",
            "VirtualMachineUpdate",
            "VirtualMachineUpdateLoadBalancedEndpointSet",
            "VirtualMachineOSImageCreate",
            "VirtualMachineOSImageDelete",
            "VirtualMachineOSImageGet",
            "VirtualMachineOSImageGetDetails",
            "VirtualMachineOSImageList",
            "VirtualMachineOSImageReplicate",
            "VirtualMachineOSImageShare",
            "VirtualMachineOSImageUnreplicate",
            "VirtualMachineOSImageUpdate",
            "VirtualMachineVMImageCreate",
            "VirtualMachineVMImageDelete",
            "VirtualMachineVMImageGetDetails",
            "VirtualMachineVMImageList",
            "VirtualMachineVMImageReplicate",
            "VirtualMachineVMImageShare",
            "VirtualMachineVMImageUnreplicate",
            "VirtualMachineVMImageUpdate"
        )]
        public string MethodName { get; set; }

        [Parameter(Mandatory = true, ParameterSetName = "InvokeByStaticParameters", Position = 0)]
        [ValidateSet(
            "DeploymentChangeConfigurationByName",
            "DeploymentChangeConfigurationBySlot",
            "DeploymentCreate",
            "DeploymentDeleteByName",
            "DeploymentDeleteBySlot",
            "DeploymentDeleteRoleInstanceByDeploymentName",
            "DeploymentDeleteRoleInstanceByDeploymentSlot",
            "DeploymentGetByName",
            "DeploymentGetBySlot",
            "DeploymentGetPackageByName",
            "DeploymentGetPackageBySlot",
            "DeploymentListEvents",
            "DeploymentListEventsBySlot",
            "DeploymentRebootRoleInstanceByDeploymentName",
            "DeploymentRebootRoleInstanceByDeploymentSlot",
            "DeploymentRebuildRoleInstanceByDeploymentName",
            "DeploymentRebuildRoleInstanceByDeploymentSlot",
            "DeploymentReimageRoleInstanceByDeploymentName",
            "DeploymentReimageRoleInstanceByDeploymentSlot",
            "DeploymentRollbackUpdateOrUpgradeByDeploymentName",
            "DeploymentRollbackUpdateOrUpgradeByDeploymentSlot",
            "DeploymentSwap",
            "DeploymentUpdateStatusByDeploymentName",
            "DeploymentUpdateStatusByDeploymentSlot",
            "DeploymentUpgradeByName",
            "DeploymentUpgradeBySlot",
            "DeploymentWalkUpgradeDomainByDeploymentName",
            "DeploymentWalkUpgradeDomainByDeploymentSlot",
            "DNSServerAddDNSServer",
            "DNSServerDeleteDNSServer",
            "DNSServerUpdateDNSServer",
            "ExtensionImageRegister",
            "ExtensionImageUnregister",
            "ExtensionImageUpdate",
            "HostedServiceAddExtension",
            "HostedServiceCheckNameAvailability",
            "HostedServiceCreate",
            "HostedServiceDelete",
            "HostedServiceDeleteAll",
            "HostedServiceDeleteExtension",
            "HostedServiceGet",
            "HostedServiceGetDetailed",
            "HostedServiceGetExtension",
            "HostedServiceList",
            "HostedServiceListAvailableExtensions",
            "HostedServiceListExtensions",
            "HostedServiceListExtensionVersions",
            "HostedServiceUpdate",
            "LoadBalancerCreate",
            "LoadBalancerDelete",
            "LoadBalancerUpdate",
            "OperatingSystemList",
            "OperatingSystemListFamilies",
            "ServiceCertificateCreate",
            "ServiceCertificateDelete",
            "ServiceCertificateGet",
            "ServiceCertificateList",
            "VirtualMachineDiskCreateDataDisk",
            "VirtualMachineDiskCreateDisk",
            "VirtualMachineDiskDeleteDataDisk",
            "VirtualMachineDiskDeleteDisk",
            "VirtualMachineDiskGetDataDisk",
            "VirtualMachineDiskGetDisk",
            "VirtualMachineDiskListDisks",
            "VirtualMachineDiskUpdateDataDisk",
            "VirtualMachineDiskUpdateDisk",
            "VirtualMachineDiskUpdateDiskSize",
            "VirtualMachineExtensionList",
            "VirtualMachineExtensionListVersions",
            "VirtualMachineCaptureOSImage",
            "VirtualMachineCaptureVMImage",
            "VirtualMachineCreate",
            "VirtualMachineCreateDeployment",
            "VirtualMachineDelete",
            "VirtualMachineGet",
            "VirtualMachineGetRemoteDesktopFile",
            "VirtualMachineRestart",
            "VirtualMachineShutdown",
            "VirtualMachineShutdownRoles",
            "VirtualMachineStart",
            "VirtualMachineStartRoles",
            "VirtualMachineUpdate",
            "VirtualMachineUpdateLoadBalancedEndpointSet",
            "VirtualMachineOSImageCreate",
            "VirtualMachineOSImageDelete",
            "VirtualMachineOSImageGet",
            "VirtualMachineOSImageGetDetails",
            "VirtualMachineOSImageList",
            "VirtualMachineOSImageReplicate",
            "VirtualMachineOSImageShare",
            "VirtualMachineOSImageUnreplicate",
            "VirtualMachineOSImageUpdate",
            "VirtualMachineVMImageCreate",
            "VirtualMachineVMImageDelete",
            "VirtualMachineVMImageGetDetails",
            "VirtualMachineVMImageList",
            "VirtualMachineVMImageReplicate",
            "VirtualMachineVMImageShare",
            "VirtualMachineVMImageUnreplicate",
            "VirtualMachineVMImageUpdate"
        )]
        public string FunctionName { get; set; }

        [Parameter(Mandatory = false, ParameterSetName = "InvokeByStaticParameters", Position = 1)]
        public object[] ArgumentList { get; set; }

        protected object ParseParameter(object input)
        {
            if (input is PSObject)
            {
                return (input as PSObject).BaseObject;
            }
            else
            {
                return input;
            }
        }

        public override void ExecuteCmdlet()
        {
            base.ExecuteCmdlet();
            ExecuteClientAction(() =>
            {
                if (ParameterSetName == "InvokeByStaticParameters")
                {
                    MethodName = FunctionName;
                }

                switch (MethodName)
                {
                    case "DeploymentChangeConfigurationByName" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteDeploymentChangeConfigurationByNameMethod(ArgumentList);
                        break;
                    case "DeploymentChangeConfigurationBySlot" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteDeploymentChangeConfigurationBySlotMethod(ArgumentList);
                        break;
                    case "DeploymentCreate" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteDeploymentCreateMethod(ArgumentList);
                        break;
                    case "DeploymentDeleteByName" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteDeploymentDeleteByNameMethod(ArgumentList);
                        break;
                    case "DeploymentDeleteBySlot" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteDeploymentDeleteBySlotMethod(ArgumentList);
                        break;
                    case "DeploymentDeleteRoleInstanceByDeploymentName" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteDeploymentDeleteRoleInstanceByDeploymentNameMethod(ArgumentList);
                        break;
                    case "DeploymentDeleteRoleInstanceByDeploymentSlot" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteDeploymentDeleteRoleInstanceByDeploymentSlotMethod(ArgumentList);
                        break;
                    case "DeploymentGetByName" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteDeploymentGetByNameMethod(ArgumentList);
                        break;
                    case "DeploymentGetBySlot" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteDeploymentGetBySlotMethod(ArgumentList);
                        break;
                    case "DeploymentGetPackageByName" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteDeploymentGetPackageByNameMethod(ArgumentList);
                        break;
                    case "DeploymentGetPackageBySlot" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteDeploymentGetPackageBySlotMethod(ArgumentList);
                        break;
                    case "DeploymentListEvents" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteDeploymentListEventsMethod(ArgumentList);
                        break;
                    case "DeploymentListEventsBySlot" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteDeploymentListEventsBySlotMethod(ArgumentList);
                        break;
                    case "DeploymentRebootRoleInstanceByDeploymentName" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteDeploymentRebootRoleInstanceByDeploymentNameMethod(ArgumentList);
                        break;
                    case "DeploymentRebootRoleInstanceByDeploymentSlot" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteDeploymentRebootRoleInstanceByDeploymentSlotMethod(ArgumentList);
                        break;
                    case "DeploymentRebuildRoleInstanceByDeploymentName" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteDeploymentRebuildRoleInstanceByDeploymentNameMethod(ArgumentList);
                        break;
                    case "DeploymentRebuildRoleInstanceByDeploymentSlot" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteDeploymentRebuildRoleInstanceByDeploymentSlotMethod(ArgumentList);
                        break;
                    case "DeploymentReimageRoleInstanceByDeploymentName" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteDeploymentReimageRoleInstanceByDeploymentNameMethod(ArgumentList);
                        break;
                    case "DeploymentReimageRoleInstanceByDeploymentSlot" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteDeploymentReimageRoleInstanceByDeploymentSlotMethod(ArgumentList);
                        break;
                    case "DeploymentRollbackUpdateOrUpgradeByDeploymentName" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteDeploymentRollbackUpdateOrUpgradeByDeploymentNameMethod(ArgumentList);
                        break;
                    case "DeploymentRollbackUpdateOrUpgradeByDeploymentSlot" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteDeploymentRollbackUpdateOrUpgradeByDeploymentSlotMethod(ArgumentList);
                        break;
                    case "DeploymentSwap" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteDeploymentSwapMethod(ArgumentList);
                        break;
                    case "DeploymentUpdateStatusByDeploymentName" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteDeploymentUpdateStatusByDeploymentNameMethod(ArgumentList);
                        break;
                    case "DeploymentUpdateStatusByDeploymentSlot" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteDeploymentUpdateStatusByDeploymentSlotMethod(ArgumentList);
                        break;
                    case "DeploymentUpgradeByName" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteDeploymentUpgradeByNameMethod(ArgumentList);
                        break;
                    case "DeploymentUpgradeBySlot" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteDeploymentUpgradeBySlotMethod(ArgumentList);
                        break;
                    case "DeploymentWalkUpgradeDomainByDeploymentName" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteDeploymentWalkUpgradeDomainByDeploymentNameMethod(ArgumentList);
                        break;
                    case "DeploymentWalkUpgradeDomainByDeploymentSlot" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteDeploymentWalkUpgradeDomainByDeploymentSlotMethod(ArgumentList);
                        break;
                    case "DNSServerAddDNSServer" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteDNSServerAddDNSServerMethod(ArgumentList);
                        break;
                    case "DNSServerDeleteDNSServer" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteDNSServerDeleteDNSServerMethod(ArgumentList);
                        break;
                    case "DNSServerUpdateDNSServer" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteDNSServerUpdateDNSServerMethod(ArgumentList);
                        break;
                    case "ExtensionImageRegister" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteExtensionImageRegisterMethod(ArgumentList);
                        break;
                    case "ExtensionImageUnregister" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteExtensionImageUnregisterMethod(ArgumentList);
                        break;
                    case "ExtensionImageUpdate" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteExtensionImageUpdateMethod(ArgumentList);
                        break;
                    case "HostedServiceAddExtension" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteHostedServiceAddExtensionMethod(ArgumentList);
                        break;
                    case "HostedServiceCheckNameAvailability" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteHostedServiceCheckNameAvailabilityMethod(ArgumentList);
                        break;
                    case "HostedServiceCreate" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteHostedServiceCreateMethod(ArgumentList);
                        break;
                    case "HostedServiceDelete" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteHostedServiceDeleteMethod(ArgumentList);
                        break;
                    case "HostedServiceDeleteAll" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteHostedServiceDeleteAllMethod(ArgumentList);
                        break;
                    case "HostedServiceDeleteExtension" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteHostedServiceDeleteExtensionMethod(ArgumentList);
                        break;
                    case "HostedServiceGet" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteHostedServiceGetMethod(ArgumentList);
                        break;
                    case "HostedServiceGetDetailed" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteHostedServiceGetDetailedMethod(ArgumentList);
                        break;
                    case "HostedServiceGetExtension" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteHostedServiceGetExtensionMethod(ArgumentList);
                        break;
                    case "HostedServiceList" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteHostedServiceListMethod(ArgumentList);
                        break;
                    case "HostedServiceListAvailableExtensions" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteHostedServiceListAvailableExtensionsMethod(ArgumentList);
                        break;
                    case "HostedServiceListExtensions" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteHostedServiceListExtensionsMethod(ArgumentList);
                        break;
                    case "HostedServiceListExtensionVersions" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteHostedServiceListExtensionVersionsMethod(ArgumentList);
                        break;
                    case "HostedServiceUpdate" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteHostedServiceUpdateMethod(ArgumentList);
                        break;
                    case "LoadBalancerCreate" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteLoadBalancerCreateMethod(ArgumentList);
                        break;
                    case "LoadBalancerDelete" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteLoadBalancerDeleteMethod(ArgumentList);
                        break;
                    case "LoadBalancerUpdate" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteLoadBalancerUpdateMethod(ArgumentList);
                        break;
                    case "OperatingSystemList" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteOperatingSystemListMethod(ArgumentList);
                        break;
                    case "OperatingSystemListFamilies" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteOperatingSystemListFamiliesMethod(ArgumentList);
                        break;
                    case "ServiceCertificateCreate" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteServiceCertificateCreateMethod(ArgumentList);
                        break;
                    case "ServiceCertificateDelete" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteServiceCertificateDeleteMethod(ArgumentList);
                        break;
                    case "ServiceCertificateGet" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteServiceCertificateGetMethod(ArgumentList);
                        break;
                    case "ServiceCertificateList" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteServiceCertificateListMethod(ArgumentList);
                        break;
                    case "VirtualMachineDiskCreateDataDisk" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteVirtualMachineDiskCreateDataDiskMethod(ArgumentList);
                        break;
                    case "VirtualMachineDiskCreateDisk" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteVirtualMachineDiskCreateDiskMethod(ArgumentList);
                        break;
                    case "VirtualMachineDiskDeleteDataDisk" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteVirtualMachineDiskDeleteDataDiskMethod(ArgumentList);
                        break;
                    case "VirtualMachineDiskDeleteDisk" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteVirtualMachineDiskDeleteDiskMethod(ArgumentList);
                        break;
                    case "VirtualMachineDiskGetDataDisk" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteVirtualMachineDiskGetDataDiskMethod(ArgumentList);
                        break;
                    case "VirtualMachineDiskGetDisk" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteVirtualMachineDiskGetDiskMethod(ArgumentList);
                        break;
                    case "VirtualMachineDiskListDisks" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteVirtualMachineDiskListDisksMethod(ArgumentList);
                        break;
                    case "VirtualMachineDiskUpdateDataDisk" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteVirtualMachineDiskUpdateDataDiskMethod(ArgumentList);
                        break;
                    case "VirtualMachineDiskUpdateDisk" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteVirtualMachineDiskUpdateDiskMethod(ArgumentList);
                        break;
                    case "VirtualMachineDiskUpdateDiskSize" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteVirtualMachineDiskUpdateDiskSizeMethod(ArgumentList);
                        break;
                    case "VirtualMachineExtensionList" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteVirtualMachineExtensionListMethod(ArgumentList);
                        break;
                    case "VirtualMachineExtensionListVersions" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteVirtualMachineExtensionListVersionsMethod(ArgumentList);
                        break;
                    case "VirtualMachineCaptureOSImage" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteVirtualMachineCaptureOSImageMethod(ArgumentList);
                        break;
                    case "VirtualMachineCaptureVMImage" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteVirtualMachineCaptureVMImageMethod(ArgumentList);
                        break;
                    case "VirtualMachineCreate" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteVirtualMachineCreateMethod(ArgumentList);
                        break;
                    case "VirtualMachineCreateDeployment" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteVirtualMachineCreateDeploymentMethod(ArgumentList);
                        break;
                    case "VirtualMachineDelete" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteVirtualMachineDeleteMethod(ArgumentList);
                        break;
                    case "VirtualMachineGet" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteVirtualMachineGetMethod(ArgumentList);
                        break;
                    case "VirtualMachineGetRemoteDesktopFile" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteVirtualMachineGetRemoteDesktopFileMethod(ArgumentList);
                        break;
                    case "VirtualMachineRestart" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteVirtualMachineRestartMethod(ArgumentList);
                        break;
                    case "VirtualMachineShutdown" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteVirtualMachineShutdownMethod(ArgumentList);
                        break;
                    case "VirtualMachineShutdownRoles" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteVirtualMachineShutdownRolesMethod(ArgumentList);
                        break;
                    case "VirtualMachineStart" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteVirtualMachineStartMethod(ArgumentList);
                        break;
                    case "VirtualMachineStartRoles" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteVirtualMachineStartRolesMethod(ArgumentList);
                        break;
                    case "VirtualMachineUpdate" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteVirtualMachineUpdateMethod(ArgumentList);
                        break;
                    case "VirtualMachineUpdateLoadBalancedEndpointSet" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteVirtualMachineUpdateLoadBalancedEndpointSetMethod(ArgumentList);
                        break;
                    case "VirtualMachineOSImageCreate" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteVirtualMachineOSImageCreateMethod(ArgumentList);
                        break;
                    case "VirtualMachineOSImageDelete" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteVirtualMachineOSImageDeleteMethod(ArgumentList);
                        break;
                    case "VirtualMachineOSImageGet" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteVirtualMachineOSImageGetMethod(ArgumentList);
                        break;
                    case "VirtualMachineOSImageGetDetails" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteVirtualMachineOSImageGetDetailsMethod(ArgumentList);
                        break;
                    case "VirtualMachineOSImageList" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteVirtualMachineOSImageListMethod(ArgumentList);
                        break;
                    case "VirtualMachineOSImageReplicate" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteVirtualMachineOSImageReplicateMethod(ArgumentList);
                        break;
                    case "VirtualMachineOSImageShare" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteVirtualMachineOSImageShareMethod(ArgumentList);
                        break;
                    case "VirtualMachineOSImageUnreplicate" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteVirtualMachineOSImageUnreplicateMethod(ArgumentList);
                        break;
                    case "VirtualMachineOSImageUpdate" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteVirtualMachineOSImageUpdateMethod(ArgumentList);
                        break;
                    case "VirtualMachineVMImageCreate" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteVirtualMachineVMImageCreateMethod(ArgumentList);
                        break;
                    case "VirtualMachineVMImageDelete" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteVirtualMachineVMImageDeleteMethod(ArgumentList);
                        break;
                    case "VirtualMachineVMImageGetDetails" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteVirtualMachineVMImageGetDetailsMethod(ArgumentList);
                        break;
                    case "VirtualMachineVMImageList" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteVirtualMachineVMImageListMethod(ArgumentList);
                        break;
                    case "VirtualMachineVMImageReplicate" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteVirtualMachineVMImageReplicateMethod(ArgumentList);
                        break;
                    case "VirtualMachineVMImageShare" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteVirtualMachineVMImageShareMethod(ArgumentList);
                        break;
                    case "VirtualMachineVMImageUnreplicate" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteVirtualMachineVMImageUnreplicateMethod(ArgumentList);
                        break;
                    case "VirtualMachineVMImageUpdate" :
                        if (ParameterSetName == "InvokeByDynamicParameters")
                        {
                            ArgumentList = ConvertDynamicParameters(dynamicParameters);
                        }

                        ExecuteVirtualMachineVMImageUpdateMethod(ArgumentList);
                        break;
                    default : WriteWarning("Cannot find the method by name = '" + MethodName + "'."); break;
                }
            });
        }


        public object GetDynamicParameters()
        {
            switch (MethodName)
            {
                    case "DeploymentChangeConfigurationByName" : return CreateDeploymentChangeConfigurationByNameDynamicParameters();
                    case "DeploymentChangeConfigurationBySlot" : return CreateDeploymentChangeConfigurationBySlotDynamicParameters();
                    case "DeploymentCreate" : return CreateDeploymentCreateDynamicParameters();
                    case "DeploymentDeleteByName" : return CreateDeploymentDeleteByNameDynamicParameters();
                    case "DeploymentDeleteBySlot" : return CreateDeploymentDeleteBySlotDynamicParameters();
                    case "DeploymentDeleteRoleInstanceByDeploymentName" : return CreateDeploymentDeleteRoleInstanceByDeploymentNameDynamicParameters();
                    case "DeploymentDeleteRoleInstanceByDeploymentSlot" : return CreateDeploymentDeleteRoleInstanceByDeploymentSlotDynamicParameters();
                    case "DeploymentGetByName" : return CreateDeploymentGetByNameDynamicParameters();
                    case "DeploymentGetBySlot" : return CreateDeploymentGetBySlotDynamicParameters();
                    case "DeploymentGetPackageByName" : return CreateDeploymentGetPackageByNameDynamicParameters();
                    case "DeploymentGetPackageBySlot" : return CreateDeploymentGetPackageBySlotDynamicParameters();
                    case "DeploymentListEvents" : return CreateDeploymentListEventsDynamicParameters();
                    case "DeploymentListEventsBySlot" : return CreateDeploymentListEventsBySlotDynamicParameters();
                    case "DeploymentRebootRoleInstanceByDeploymentName" : return CreateDeploymentRebootRoleInstanceByDeploymentNameDynamicParameters();
                    case "DeploymentRebootRoleInstanceByDeploymentSlot" : return CreateDeploymentRebootRoleInstanceByDeploymentSlotDynamicParameters();
                    case "DeploymentRebuildRoleInstanceByDeploymentName" : return CreateDeploymentRebuildRoleInstanceByDeploymentNameDynamicParameters();
                    case "DeploymentRebuildRoleInstanceByDeploymentSlot" : return CreateDeploymentRebuildRoleInstanceByDeploymentSlotDynamicParameters();
                    case "DeploymentReimageRoleInstanceByDeploymentName" : return CreateDeploymentReimageRoleInstanceByDeploymentNameDynamicParameters();
                    case "DeploymentReimageRoleInstanceByDeploymentSlot" : return CreateDeploymentReimageRoleInstanceByDeploymentSlotDynamicParameters();
                    case "DeploymentRollbackUpdateOrUpgradeByDeploymentName" : return CreateDeploymentRollbackUpdateOrUpgradeByDeploymentNameDynamicParameters();
                    case "DeploymentRollbackUpdateOrUpgradeByDeploymentSlot" : return CreateDeploymentRollbackUpdateOrUpgradeByDeploymentSlotDynamicParameters();
                    case "DeploymentSwap" : return CreateDeploymentSwapDynamicParameters();
                    case "DeploymentUpdateStatusByDeploymentName" : return CreateDeploymentUpdateStatusByDeploymentNameDynamicParameters();
                    case "DeploymentUpdateStatusByDeploymentSlot" : return CreateDeploymentUpdateStatusByDeploymentSlotDynamicParameters();
                    case "DeploymentUpgradeByName" : return CreateDeploymentUpgradeByNameDynamicParameters();
                    case "DeploymentUpgradeBySlot" : return CreateDeploymentUpgradeBySlotDynamicParameters();
                    case "DeploymentWalkUpgradeDomainByDeploymentName" : return CreateDeploymentWalkUpgradeDomainByDeploymentNameDynamicParameters();
                    case "DeploymentWalkUpgradeDomainByDeploymentSlot" : return CreateDeploymentWalkUpgradeDomainByDeploymentSlotDynamicParameters();
                    case "DNSServerAddDNSServer" : return CreateDNSServerAddDNSServerDynamicParameters();
                    case "DNSServerDeleteDNSServer" : return CreateDNSServerDeleteDNSServerDynamicParameters();
                    case "DNSServerUpdateDNSServer" : return CreateDNSServerUpdateDNSServerDynamicParameters();
                    case "ExtensionImageRegister" : return CreateExtensionImageRegisterDynamicParameters();
                    case "ExtensionImageUnregister" : return CreateExtensionImageUnregisterDynamicParameters();
                    case "ExtensionImageUpdate" : return CreateExtensionImageUpdateDynamicParameters();
                    case "HostedServiceAddExtension" : return CreateHostedServiceAddExtensionDynamicParameters();
                    case "HostedServiceCheckNameAvailability" : return CreateHostedServiceCheckNameAvailabilityDynamicParameters();
                    case "HostedServiceCreate" : return CreateHostedServiceCreateDynamicParameters();
                    case "HostedServiceDelete" : return CreateHostedServiceDeleteDynamicParameters();
                    case "HostedServiceDeleteAll" : return CreateHostedServiceDeleteAllDynamicParameters();
                    case "HostedServiceDeleteExtension" : return CreateHostedServiceDeleteExtensionDynamicParameters();
                    case "HostedServiceGet" : return CreateHostedServiceGetDynamicParameters();
                    case "HostedServiceGetDetailed" : return CreateHostedServiceGetDetailedDynamicParameters();
                    case "HostedServiceGetExtension" : return CreateHostedServiceGetExtensionDynamicParameters();
                    case "HostedServiceList" : return CreateHostedServiceListDynamicParameters();
                    case "HostedServiceListAvailableExtensions" : return CreateHostedServiceListAvailableExtensionsDynamicParameters();
                    case "HostedServiceListExtensions" : return CreateHostedServiceListExtensionsDynamicParameters();
                    case "HostedServiceListExtensionVersions" : return CreateHostedServiceListExtensionVersionsDynamicParameters();
                    case "HostedServiceUpdate" : return CreateHostedServiceUpdateDynamicParameters();
                    case "LoadBalancerCreate" : return CreateLoadBalancerCreateDynamicParameters();
                    case "LoadBalancerDelete" : return CreateLoadBalancerDeleteDynamicParameters();
                    case "LoadBalancerUpdate" : return CreateLoadBalancerUpdateDynamicParameters();
                    case "OperatingSystemList" : return CreateOperatingSystemListDynamicParameters();
                    case "OperatingSystemListFamilies" : return CreateOperatingSystemListFamiliesDynamicParameters();
                    case "ServiceCertificateCreate" : return CreateServiceCertificateCreateDynamicParameters();
                    case "ServiceCertificateDelete" : return CreateServiceCertificateDeleteDynamicParameters();
                    case "ServiceCertificateGet" : return CreateServiceCertificateGetDynamicParameters();
                    case "ServiceCertificateList" : return CreateServiceCertificateListDynamicParameters();
                    case "VirtualMachineDiskCreateDataDisk" : return CreateVirtualMachineDiskCreateDataDiskDynamicParameters();
                    case "VirtualMachineDiskCreateDisk" : return CreateVirtualMachineDiskCreateDiskDynamicParameters();
                    case "VirtualMachineDiskDeleteDataDisk" : return CreateVirtualMachineDiskDeleteDataDiskDynamicParameters();
                    case "VirtualMachineDiskDeleteDisk" : return CreateVirtualMachineDiskDeleteDiskDynamicParameters();
                    case "VirtualMachineDiskGetDataDisk" : return CreateVirtualMachineDiskGetDataDiskDynamicParameters();
                    case "VirtualMachineDiskGetDisk" : return CreateVirtualMachineDiskGetDiskDynamicParameters();
                    case "VirtualMachineDiskListDisks" : return CreateVirtualMachineDiskListDisksDynamicParameters();
                    case "VirtualMachineDiskUpdateDataDisk" : return CreateVirtualMachineDiskUpdateDataDiskDynamicParameters();
                    case "VirtualMachineDiskUpdateDisk" : return CreateVirtualMachineDiskUpdateDiskDynamicParameters();
                    case "VirtualMachineDiskUpdateDiskSize" : return CreateVirtualMachineDiskUpdateDiskSizeDynamicParameters();
                    case "VirtualMachineExtensionList" : return CreateVirtualMachineExtensionListDynamicParameters();
                    case "VirtualMachineExtensionListVersions" : return CreateVirtualMachineExtensionListVersionsDynamicParameters();
                    case "VirtualMachineCaptureOSImage" : return CreateVirtualMachineCaptureOSImageDynamicParameters();
                    case "VirtualMachineCaptureVMImage" : return CreateVirtualMachineCaptureVMImageDynamicParameters();
                    case "VirtualMachineCreate" : return CreateVirtualMachineCreateDynamicParameters();
                    case "VirtualMachineCreateDeployment" : return CreateVirtualMachineCreateDeploymentDynamicParameters();
                    case "VirtualMachineDelete" : return CreateVirtualMachineDeleteDynamicParameters();
                    case "VirtualMachineGet" : return CreateVirtualMachineGetDynamicParameters();
                    case "VirtualMachineGetRemoteDesktopFile" : return CreateVirtualMachineGetRemoteDesktopFileDynamicParameters();
                    case "VirtualMachineRestart" : return CreateVirtualMachineRestartDynamicParameters();
                    case "VirtualMachineShutdown" : return CreateVirtualMachineShutdownDynamicParameters();
                    case "VirtualMachineShutdownRoles" : return CreateVirtualMachineShutdownRolesDynamicParameters();
                    case "VirtualMachineStart" : return CreateVirtualMachineStartDynamicParameters();
                    case "VirtualMachineStartRoles" : return CreateVirtualMachineStartRolesDynamicParameters();
                    case "VirtualMachineUpdate" : return CreateVirtualMachineUpdateDynamicParameters();
                    case "VirtualMachineUpdateLoadBalancedEndpointSet" : return CreateVirtualMachineUpdateLoadBalancedEndpointSetDynamicParameters();
                    case "VirtualMachineOSImageCreate" : return CreateVirtualMachineOSImageCreateDynamicParameters();
                    case "VirtualMachineOSImageDelete" : return CreateVirtualMachineOSImageDeleteDynamicParameters();
                    case "VirtualMachineOSImageGet" : return CreateVirtualMachineOSImageGetDynamicParameters();
                    case "VirtualMachineOSImageGetDetails" : return CreateVirtualMachineOSImageGetDetailsDynamicParameters();
                    case "VirtualMachineOSImageList" : return CreateVirtualMachineOSImageListDynamicParameters();
                    case "VirtualMachineOSImageReplicate" : return CreateVirtualMachineOSImageReplicateDynamicParameters();
                    case "VirtualMachineOSImageShare" : return CreateVirtualMachineOSImageShareDynamicParameters();
                    case "VirtualMachineOSImageUnreplicate" : return CreateVirtualMachineOSImageUnreplicateDynamicParameters();
                    case "VirtualMachineOSImageUpdate" : return CreateVirtualMachineOSImageUpdateDynamicParameters();
                    case "VirtualMachineVMImageCreate" : return CreateVirtualMachineVMImageCreateDynamicParameters();
                    case "VirtualMachineVMImageDelete" : return CreateVirtualMachineVMImageDeleteDynamicParameters();
                    case "VirtualMachineVMImageGetDetails" : return CreateVirtualMachineVMImageGetDetailsDynamicParameters();
                    case "VirtualMachineVMImageList" : return CreateVirtualMachineVMImageListDynamicParameters();
                    case "VirtualMachineVMImageReplicate" : return CreateVirtualMachineVMImageReplicateDynamicParameters();
                    case "VirtualMachineVMImageShare" : return CreateVirtualMachineVMImageShareDynamicParameters();
                    case "VirtualMachineVMImageUnreplicate" : return CreateVirtualMachineVMImageUnreplicateDynamicParameters();
                    case "VirtualMachineVMImageUpdate" : return CreateVirtualMachineVMImageUpdateDynamicParameters();
                    default : break;
            }

            return null;
        }

    }
}
