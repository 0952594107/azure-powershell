
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create GuestAgent.
.Description
Create GuestAgent.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IGuestAgent
.Link
https://learn.microsoft.com/powershell/module/az.scvmm/new-azscvmmvmguestagent
#>
function New-AzScVmmVMGuestAgent {
    [OutputType([Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IGuestAgent])]
    [CmdletBinding(DefaultParameterSetName = 'CreateExpanded', PositionalBinding = $false, SupportsShouldProcess, ConfirmImpact = 'Medium')]
    param(
        [Parameter(Mandatory)]
        [Alias('MachineName')]
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Path')]
        [System.String]
        # The name of the hybrid machine.
        ${Name},

        [Parameter(Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Path')]
        [System.String]
        # The name of the resource group.
        # The name is case insensitive.
        ${ResourceGroupName},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Path')]
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.DefaultInfo(Script = '(Get-AzContext).Subscription.Id')]
        [System.String]
        # The ID of the target subscription.
        # The value must be an UUID.
        ${SubscriptionId},

        [Parameter(ParameterSetName = 'CreateExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
        [System.Security.SecureString]
        # Gets or sets the password to connect with the guest.
        ${CredentialsPassword},

        [Parameter(ParameterSetName = 'CreateExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
        [System.String]
        # Gets or sets username to connect with the guest.
        ${CredentialsUsername},

        [Parameter(ParameterSetName = 'CreateExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
        [System.String]
        # Gets or sets httpsProxy url.
        ${HttpProxyConfigHttpsProxy},

        [Parameter(ParameterSetName = 'CreateExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PSArgumentCompleterAttribute("install", "uninstall", "repair")]
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
        [System.String]
        # Gets or sets the guest agent provisioning action.
        ${ProvisioningAction},

        [Parameter()]
        [Alias('AzureRMContext', 'AzureCredential')]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Azure')]
        [System.Management.Automation.PSObject]
        # The DefaultProfile parameter is not functional.
        # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
        ${DefaultProfile},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Run the command as a job
        ${AsJob},

        [Parameter(DontShow)]
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Wait for .NET debugger to attach
        ${Break},

        [Parameter(DontShow)]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Runtime')]
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.SendAsyncStep[]]
        # SendAsync Pipeline Steps to be appended to the front of the pipeline
        ${HttpPipelineAppend},

        [Parameter(DontShow)]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Runtime')]
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.SendAsyncStep[]]
        # SendAsync Pipeline Steps to be prepended to the front of the pipeline
        ${HttpPipelinePrepend},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Run the command asynchronously
        ${NoWait},

        [Parameter(DontShow)]
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Runtime')]
        [System.Uri]
        # The URI for the proxy server to use
        ${Proxy},

        [Parameter(DontShow)]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Runtime')]
        [System.Management.Automation.PSCredential]
        # Credentials for a proxy server to use for the remote call
        ${ProxyCredential},

        [Parameter(DontShow)]
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Use the default credentials for the proxy
        ${ProxyUseDefaultCredentials}
    )

    process {
        $machineObj = Az.ScVmm.internal\Get-AzScVmmMachine -Name $Name -ResourceGroupName $ResourceGroupName

        if ($null -eq $machineObj) {
            throw "The Resource '$($Name)' under resource group '$($ResourceGroupName)' was not found."
        }

        $PSBoundParameters.Add('MachineId', $machineObj.Id)

        Az.ScVmm.internal\New-AzScVmmVMGuestAgent @PSBoundParameters
    }
}
