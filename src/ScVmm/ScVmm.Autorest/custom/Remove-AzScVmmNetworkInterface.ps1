
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
The operation to Delete a virtual machine network interface.
.Description
The operation to Delete a virtual machine network interface.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstance
.Link
https://learn.microsoft.com/powershell/module/az.scvmm/remove-azscvmmnetworkinterface
#>
function Remove-AzScVmmNetworkInterface {
  [OutputType([Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstance])]
  [CmdletBinding(DefaultParameterSetName = 'DeleteExpanded', PositionalBinding = $false, SupportsShouldProcess, ConfirmImpact = 'Medium')]
  param(
    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Path')]
    [System.String]
    # The fully qualified Azure Resource manager identifier of the Hybrid Compute machine resource to be extended.
    ${MachineId},

    [Parameter(Mandatory, HelpMessage = "Gets or sets the name of the network interface.")]
    [string]
    $Name,

    [Parameter(Mandatory, HelpMessage = "Gets or sets the nic id.")]
    [string]
    $NicId
  )
    
  process {
    $vmObj = Get-AzScVmmVM -MachineId $MachineId

    $newNICObject = @()

    if ($vmObj.NetworkProfileNetworkInterface.Count -ge 1) {
      foreach ($vmNic in $vmObj.NetworkProfileNetworkInterface) {
        if (($Name -ne $vmNic.Name) -or ($NicId -ne $vmNic.NicId)) {
          $nicObj = New-AzScVmmNetworkInterfaceUpdateObject -Ipv4AddressType $vmNic.Ipv4AddressType -Ipv6AddressType $vmNic.Ipv6AddressType -MacAddress $vmNic.MacAddress -MacAddressType $vmNic.MacAddressType -Name $vmNic.Name -NicId $vmNic.NicId -VirtualNetworkId $vmNic.VirtualNetworkId
          $newNICObject += $nicObj
        }
      }
    }
    
    Update-AzScVmmVM -MachineId $MachineId -NetworkProfileNetworkInterface $newNICObject
  }
}