
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
The operation to Create a virtual machine virtual disk.
.Description
The operation to Create a virtual machine virtual disk.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstance
.Link
https://learn.microsoft.com/powershell/module/az.scvmm/add-azscvmmvirtualdisk
#>
function Add-AzScVmmVirtualDisk {
  [OutputType([Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstance])]
  [CmdletBinding(DefaultParameterSetName = 'AddExpanded', PositionalBinding = $false, SupportsShouldProcess, ConfirmImpact = 'Medium')]
  param(
    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Path')]
    [System.String]
    # The fully qualified Azure Resource manager identifier of the Hybrid Compute machine resource to be extended.
    ${MachineId},

    [Parameter(Mandatory)]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualDiskUpdate[]]
    # Gets or sets the list of virtual disks associated with the virtual machine.
    # To construct, see NOTES section for STORAGEPROFILEDISK properties and create a hash table.
    ${StorageProfileDisk}
  )

  process {
    $vmObj = Get-AzScVmmVM -MachineId $MachineId

    if ($StorageProfileDisk.Count -ge 1) {
      $newDiskObject = @()

      if ($vmObj.StorageProfileDisk.Count -ge 1) {
        foreach ($vmDisk in $vmObj.StorageProfileDisk) {
          $sameObj = $false
          foreach ($disk in $StorageProfileDisk) {
            if (($disk.Name -eq $vmDisk.Name) -and ($disk.DiskId -eq $vmDisk.DiskId)) {
              $sameObj = $true
              break
            }
          }

          if (-not $sameObj) {
            $diskObj = New-AzScVmmVirtualDiskUpdateObject -Bus $vmDisk.Bus -BusType $vmDisk.BusType -DiskId $vmDisk.DiskId -DiskSizeGb $vmDisk.DiskSizeGb -Lun $vmDisk.Lun -Name $vmDisk.Name -StorageQoSPolicyId $vmDisk.StorageQoSPolicyId -StorageQoSPolicyName $vmDisk.StorageQoSPolicyName -VhdType $vmDisk.VhdType
            $newDiskObject += $diskObj
          }
        }
      }

      $newDiskObject += $StorageProfileDisk
      Update-AzScVmmVM -MachineId $MachineId -StorageProfileDisk $newDiskObject
    }
  }
}