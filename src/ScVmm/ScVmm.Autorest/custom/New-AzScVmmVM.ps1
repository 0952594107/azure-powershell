
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
The operation to Create a virtual machine instance.
Please note some properties can be set only during virtual machine instance creation.
.Description
The operation to Create a virtual machine instance.
Please note some properties can be set only during virtual machine instance creation.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstance
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

AVAILABILITYSET <IAvailabilitySetListItem[]>: Availability Sets in vm.
  [Id <String>]: Gets the ARM Id of the microsoft.scvmm/availabilitySets resource.
  [Name <String>]: Gets or sets the name of the availability set.

INFRASTRUCTUREPROFILECHECKPOINT <ICheckpoint[]>: Checkpoints in the vm.
  [Description <String>]: Gets description of the checkpoint.
  [Id <String>]: Gets ID of the checkpoint.
  [Name <String>]: Gets name of the checkpoint.
  [ParentCheckpointId <String>]: Gets ID of parent of the checkpoint.

NETWORKPROFILENETWORKINTERFACE <INetworkInterface[]>: Gets or sets the list of network interfaces associated with the virtual machine.
  [Ipv4AddressType <String>]: Gets or sets the ipv4 address type.
  [Ipv6AddressType <String>]: Gets or sets the ipv6 address type.
  [MacAddress <String>]: Gets or sets the nic MAC address.
  [MacAddressType <String>]: Gets or sets the mac address type.
  [Name <String>]: Gets or sets the name of the network interface.
  [NicId <String>]: Gets or sets the nic id.
  [VirtualNetworkId <String>]: Gets or sets the ARM Id of the Microsoft.ScVmm/virtualNetwork resource to connect the nic.

STORAGEPROFILEDISK <IVirtualDisk[]>: Gets or sets the list of virtual disks associated with the virtual machine.
  [Bus <Int32?>]: Gets or sets the disk bus.
  [BusType <String>]: Gets or sets the disk bus type.
  [CreateDiffDisk <String>]: Gets or sets a value indicating diff disk.
  [DiskId <String>]: Gets or sets the disk id.
  [DiskSizeGb <Int32?>]: Gets or sets the disk total size.
  [Lun <Int32?>]: Gets or sets the disk lun.
  [Name <String>]: Gets or sets the name of the disk.
  [StorageQoSPolicyId <String>]: The ID of the QoS policy.
  [StorageQoSPolicyName <String>]: The name of the policy.
  [TemplateDiskId <String>]: Gets or sets the disk id in the template.
  [VhdType <String>]: Gets or sets the disk vhd type.
.Link
https://learn.microsoft.com/powershell/module/az.scvmm/new-azscvmmvm
#>
function New-AzScVmmVM {
  [OutputType([Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstance])]
  [CmdletBinding(DefaultParameterSetName = 'CreateExpanded', PositionalBinding = $false, SupportsShouldProcess, ConfirmImpact = 'Medium')]
  param(
    [Parameter(ParameterSetName = 'CreateExpanded', Mandatory)]
    [Alias('MachineName')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Path')]
    [System.String]
    # The name of the hybrid machine.
    ${Name},

    [Parameter(ParameterSetName = 'CreateExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter(ParameterSetName = 'CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.DefaultInfo(Script = '(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    # The value must be an UUID.
    ${SubscriptionId},

    [Parameter(ParameterSetName = 'CreateExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.String]
    # The geo-location where the resource lives
    ${Location},

    [Parameter(ParameterSetName = 'CreateExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PSArgumentCompleterAttribute("SystemAssigned")]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.String]
    # The identity type.
    ${IdentityType},

    [Parameter(ParameterSetName = 'CreateExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PSArgumentCompleterAttribute("AVS", "HCI", "SCVMM", "VMware", "EPS", "GCP", "AWS")]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.String]
    # Indicates which kind of Arc machine placement on-premises, such as HCI, SCVMM or VMware etc.
    ${Kind},

    [Parameter(ParameterSetName = 'CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(PossibleTypes = ([Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ITrackedResourceTags]))]
    [System.Collections.Hashtable]
    # Resource tags.
    ${Tag},

    [Parameter(ParameterSetName = 'CreateExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IAvailabilitySetListItem[]]
    # Availability Sets in vm.
    # To construct, see NOTES section for AVAILABILITYSET properties and create a hash table.
    ${AvailabilitySet},

    [Parameter(ParameterSetName = 'CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.String]
    # The extended location name.
    ${ExtendedLocationName},

    [Parameter(ParameterSetName = 'CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.String]
    # The extended location type.
    ${ExtendedLocationType},

    [Parameter(ParameterSetName = 'CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.Int32]
    # Gets or sets the number of vCPUs for the vm.
    ${HardwareProfileCpuCount},

    [Parameter(ParameterSetName = 'CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PSArgumentCompleterAttribute("false", "true")]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.String]
    # Gets or sets a value indicating whether to enable dynamic memory or not.
    ${HardwareProfileDynamicMemoryEnabled},

    [Parameter(ParameterSetName = 'CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.Int32]
    # Gets or sets the max dynamic memory for the vm.
    ${HardwareProfileDynamicMemoryMaxMb},

    [Parameter(ParameterSetName = 'CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.Int32]
    # Gets or sets the min dynamic memory for the vm.
    ${HardwareProfileDynamicMemoryMinMb},

    [Parameter(ParameterSetName = 'CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PSArgumentCompleterAttribute("false", "true")]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.String]
    # Gets or sets a value indicating whether to enable processor compatibility mode for live migration of VMs.
    ${HardwareProfileLimitCpuForMigration},

    [Parameter(ParameterSetName = 'CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.Int32]
    # MemoryMB is the size of a virtual machine's memory, in MB.
    ${HardwareProfileMemoryMb},

    [Parameter(ParameterSetName = 'CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.String]
    # Gets or sets the bios guid for the vm.
    ${InfrastructureProfileBiosGuid},

    [Parameter(ParameterSetName = 'CreateExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ICheckpoint[]]
    # Checkpoints in the vm.
    # To construct, see NOTES section for INFRASTRUCTUREPROFILECHECKPOINT properties and create a hash table.
    ${InfrastructureProfileCheckpoint},

    [Parameter(ParameterSetName = 'CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.String]
    # Type of checkpoint supported for the vm.
    ${InfrastructureProfileCheckpointType},

    [Parameter(ParameterSetName = 'CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.String]
    # ARM Id of the cloud resource to use for deploying the vm.
    ${InfrastructureProfileCloudId},

    [Parameter(ParameterSetName = 'CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.Int32]
    # Gets or sets the generation for the vm.
    ${InfrastructureProfileGeneration},

    [Parameter(ParameterSetName = 'CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.String]
    # Gets or sets the inventory Item ID for the resource.
    ${InfrastructureProfileInventoryItemId},

    [Parameter(ParameterSetName = 'CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.String]
    # ARM Id of the template resource to use for deploying the vm.
    ${InfrastructureProfileTemplateId},

    [Parameter(ParameterSetName = 'CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.String]
    # Unique ID of the virtual machine.
    ${InfrastructureProfileUuid},

    [Parameter(ParameterSetName = 'CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.String]
    # VMName is the name of VM on the SCVMM server.
    ${InfrastructureProfileVMName},

    [Parameter(ParameterSetName = 'CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.String]
    # ARM Id of the vmmServer resource in which this resource resides.
    ${InfrastructureProfileVmmServerId},

    [Parameter(ParameterSetName = 'CreateExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.INetworkInterface[]]
    # Gets or sets the list of network interfaces associated with the virtual machine.
    # To construct, see NOTES section for NETWORKPROFILENETWORKINTERFACE properties and create a hash table.
    ${NetworkProfileNetworkInterface},

    [Parameter(ParameterSetName = 'CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.Security.SecureString]
    # Admin password of the virtual machine.
    ${OSProfileAdminPassword},

    [Parameter(ParameterSetName = 'CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.String]
    # Gets or sets computer name.
    ${OSProfileComputerName},

    [Parameter(ParameterSetName = 'CreateExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualDisk[]]
    # Gets or sets the list of virtual disks associated with the virtual machine.
    # To construct, see NOTES section for STORAGEPROFILEDISK properties and create a hash table.
    ${StorageProfileDisk},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
  )

  process {
    $machineObj = Az.ScVmm.internal\Get-AzScVmmMachine -Name $Name -ResourceGroupName $ResourceGroupName

    if ($null -eq $machineObj) {
      if ($null -eq $tag) {
        $machineObj = Az.ScVmm.internal\New-AzScVmmMachine -Name $Name -ResourceGroupName $ResourceGroupName -Location $Location -IdentityType $IdentityType -Kind $Kind
      }
      else {
        $machineObj = Az.ScVmm.internal\New-AzScVmmMachine -Name $Name -ResourceGroupName $ResourceGroupName -Location $Location -IdentityType $IdentityType -Kind $Kind -Tag $Tag
      }
    }
    else {
      if (!($machineObj.Kind.ToLower() -eq $Kind.ToLower())) {
        throw "A machine already exists with kind: $($machineObj.Kind). Machine kind cannot be updated to: $($Kind)"
      }
      
      if (!($machineObj.Location.ToLower() -eq $Location.ToLower())) {
        throw "The location of the existing Machine cannot be updated. Either specify the existing location or keep the location unspecified. Existing location: $($machine.Location), Provided location: $($Location)"
      }
      
      if ($null -eq $Tag) {
        $machineObj = Az.ScVmm.internal\Update-AzScVmmMachine -Name $Name -ResourceGroupName $ResourceGroupName -IdentityType $IdentityType
      }
      else {
        $machineObj = Az.ScVmm.internal\Update-AzScVmmMachine -Name $Name -ResourceGroupName $ResourceGroupName -IdentityType $IdentityType -Tag $Tag
      }
    }

    $PSBoundParameters.Add('MachineId', $machineObj.Id)
    
    if ($PSBoundParameters.ContainsKey('InfrastructureProfileUuid') -and $PSBoundParameters.ContainsKey('InfrastructureProfileVmmServerId')) {
      $Null = $PSBoundParameters.Remove('InfrastructureProfileInventoryItemId')

      $InventoryItemId = $InfrastructureProfileVmmServerId + "/InventoryItems/" + $InfrastructureProfileUuid

      $PSBoundParameters.Add('InfrastructureProfileInventoryItemId', $InventoryItemId)
    }
    Az.ScVmm.internal\New-AzScVmmVM @PSBoundParameters
  }
}
