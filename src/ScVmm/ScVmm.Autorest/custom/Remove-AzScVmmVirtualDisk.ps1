
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
The operation to Delete a virtual machine virtual disk.
.Description
The operation to Delete a virtual machine virtual disk.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstance
.Link
https://learn.microsoft.com/powershell/module/az.scvmm/remove-azscvmmvirtualdisk
#>
function Remove-AzScVmmVirtualDisk {
  [OutputType([Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstance])]
  [CmdletBinding(DefaultParameterSetName = 'DeleteExpanded', PositionalBinding = $false, SupportsShouldProcess, ConfirmImpact = 'Medium')]
  param(
    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Path')]
    [System.String]
    # The fully qualified Azure Resource manager identifier of the Hybrid Compute machine resource to be extended.
    ${MachineId},

    [Parameter(Mandatory, HelpMessage = "Gets or sets the disk id.")]
    [string]
    $DiskId,

    [Parameter(Mandatory, HelpMessage = "Gets or sets the name of the disk.")]
    [string]
    $Name
  )

  process {
    $vmObj = Get-AzScVmmVM -MachineId $MachineId

    $newDiskObject = @()

    if ($vmObj.StorageProfileDisk.Count -ge 1) {
      foreach ($vmDisk in $vmObj.StorageProfileDisk) {
        if (($Name -ne $vmDisk.Name) -or ($DiskId -ne $vmDisk.DiskId)) {
          $diskObj = New-AzScVmmVirtualDiskUpdateObject -Bus $vmDisk.Bus -BusType $vmDisk.BusType -DiskId $vmDisk.DiskId -DiskSizeGb $vmDisk.DiskSizeGb -Lun $vmDisk.Lun -Name $vmDisk.Name -StorageQoSPolicyId $vmDisk.StorageQoSPolicyId -StorageQoSPolicyName $vmDisk.StorageQoSPolicyName -VhdType $vmDisk.VhdType 
          $newDiskObject += $diskObj
        }
      }
    }

    Update-AzScVmmVM -MachineId $MachineId -StorageProfileDisk $newDiskObject
  }
}