// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Compute
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for SharedGalleryImageVersionsOperations
    /// </summary>
    public static partial class SharedGalleryImageVersionsOperationsExtensions
    {
        /// <summary>
        /// List shared gallery image versions by subscription id or tenant id.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='location'>
        /// Resource location.
        /// </param>
        /// <param name='galleryUniqueName'>
        /// The unique name of the Shared Gallery.
        /// </param>
        /// <param name='galleryImageName'>
        /// The name of the Shared Gallery Image Definition from which the Image
        /// Versions are to be listed.
        /// </param>
        /// <param name='sharedTo'>
        /// The query parameter to decide what shared galleries to fetch when doing
        /// listing operations.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<SharedGalleryImageVersion> List(this ISharedGalleryImageVersionsOperations operations, string location, string galleryUniqueName, string galleryImageName, string sharedTo = default(string))
        {
                return ((ISharedGalleryImageVersionsOperations)operations).ListAsync(location, galleryUniqueName, galleryImageName, sharedTo).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List shared gallery image versions by subscription id or tenant id.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='location'>
        /// Resource location.
        /// </param>
        /// <param name='galleryUniqueName'>
        /// The unique name of the Shared Gallery.
        /// </param>
        /// <param name='galleryImageName'>
        /// The name of the Shared Gallery Image Definition from which the Image
        /// Versions are to be listed.
        /// </param>
        /// <param name='sharedTo'>
        /// The query parameter to decide what shared galleries to fetch when doing
        /// listing operations.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<SharedGalleryImageVersion>> ListAsync(this ISharedGalleryImageVersionsOperations operations, string location, string galleryUniqueName, string galleryImageName, string sharedTo = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(location, galleryUniqueName, galleryImageName, sharedTo, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get a shared gallery image version by subscription id or tenant id.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='location'>
        /// Resource location.
        /// </param>
        /// <param name='galleryUniqueName'>
        /// The unique name of the Shared Gallery.
        /// </param>
        /// <param name='galleryImageName'>
        /// The name of the Shared Gallery Image Definition from which the Image
        /// Versions are to be listed.
        /// </param>
        /// <param name='galleryImageVersionName'>
        /// The name of the gallery image version to be created. Needs to follow
        /// semantic version name pattern: The allowed characters are digit and period.
        /// Digits must be within the range of a 32-bit integer. Format:
        /// &lt;MajorVersion&gt;.&lt;MinorVersion&gt;.&lt;Patch&gt;
        /// </param>
        public static SharedGalleryImageVersion Get(this ISharedGalleryImageVersionsOperations operations, string location, string galleryUniqueName, string galleryImageName, string galleryImageVersionName)
        {
                return ((ISharedGalleryImageVersionsOperations)operations).GetAsync(location, galleryUniqueName, galleryImageName, galleryImageVersionName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a shared gallery image version by subscription id or tenant id.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='location'>
        /// Resource location.
        /// </param>
        /// <param name='galleryUniqueName'>
        /// The unique name of the Shared Gallery.
        /// </param>
        /// <param name='galleryImageName'>
        /// The name of the Shared Gallery Image Definition from which the Image
        /// Versions are to be listed.
        /// </param>
        /// <param name='galleryImageVersionName'>
        /// The name of the gallery image version to be created. Needs to follow
        /// semantic version name pattern: The allowed characters are digit and period.
        /// Digits must be within the range of a 32-bit integer. Format:
        /// &lt;MajorVersion&gt;.&lt;MinorVersion&gt;.&lt;Patch&gt;
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SharedGalleryImageVersion> GetAsync(this ISharedGalleryImageVersionsOperations operations, string location, string galleryUniqueName, string galleryImageName, string galleryImageVersionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(location, galleryUniqueName, galleryImageName, galleryImageVersionName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// List shared gallery image versions by subscription id or tenant id.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<SharedGalleryImageVersion> ListNext(this ISharedGalleryImageVersionsOperations operations, string nextPageLink)
        {
                return ((ISharedGalleryImageVersionsOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List shared gallery image versions by subscription id or tenant id.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<SharedGalleryImageVersion>> ListNextAsync(this ISharedGalleryImageVersionsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
