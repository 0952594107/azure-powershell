// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Compute
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for DedicatedHostsOperations
    /// </summary>
    public static partial class DedicatedHostsOperationsExtensions
    {
        /// <summary>
        /// Create or update a dedicated host .
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='hostGroupName'>
        /// The name of the dedicated host group.
        /// </param>
        /// <param name='hostName'>
        /// The name of the dedicated host .
        /// </param>
        public static DedicatedHost CreateOrUpdate(this IDedicatedHostsOperations operations, string resourceGroupName, string hostGroupName, string hostName, DedicatedHost parameters)
        {
                return ((IDedicatedHostsOperations)operations).CreateOrUpdateAsync(resourceGroupName, hostGroupName, hostName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create or update a dedicated host .
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='hostGroupName'>
        /// The name of the dedicated host group.
        /// </param>
        /// <param name='hostName'>
        /// The name of the dedicated host .
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DedicatedHost> CreateOrUpdateAsync(this IDedicatedHostsOperations operations, string resourceGroupName, string hostGroupName, string hostName, DedicatedHost parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, hostGroupName, hostName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Update a dedicated host .
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='hostGroupName'>
        /// The name of the dedicated host group.
        /// </param>
        /// <param name='hostName'>
        /// The name of the dedicated host .
        /// </param>
        public static DedicatedHost Update(this IDedicatedHostsOperations operations, string resourceGroupName, string hostGroupName, string hostName, DedicatedHostUpdate parameters)
        {
                return ((IDedicatedHostsOperations)operations).UpdateAsync(resourceGroupName, hostGroupName, hostName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update a dedicated host .
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='hostGroupName'>
        /// The name of the dedicated host group.
        /// </param>
        /// <param name='hostName'>
        /// The name of the dedicated host .
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DedicatedHost> UpdateAsync(this IDedicatedHostsOperations operations, string resourceGroupName, string hostGroupName, string hostName, DedicatedHostUpdate parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, hostGroupName, hostName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete a dedicated host.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='hostGroupName'>
        /// The name of the dedicated host group.
        /// </param>
        /// <param name='hostName'>
        /// The name of the dedicated host.
        /// </param>
        public static void Delete(this IDedicatedHostsOperations operations, string resourceGroupName, string hostGroupName, string hostName)
        {
                ((IDedicatedHostsOperations)operations).DeleteAsync(resourceGroupName, hostGroupName, hostName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete a dedicated host.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='hostGroupName'>
        /// The name of the dedicated host group.
        /// </param>
        /// <param name='hostName'>
        /// The name of the dedicated host.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IDedicatedHostsOperations operations, string resourceGroupName, string hostGroupName, string hostName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, hostGroupName, hostName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Retrieves information about a dedicated host.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='hostGroupName'>
        /// The name of the dedicated host group.
        /// </param>
        /// <param name='hostName'>
        /// The name of the dedicated host.
        /// </param>
        /// <param name='expand'>
        /// The expand expression to apply on the operation. &#39;InstanceView&#39; will
        /// retrieve the list of instance views of the dedicated host. &#39;UserData&#39; is
        /// not supported for dedicated host.
        /// </param>
        public static DedicatedHost Get(this IDedicatedHostsOperations operations, string resourceGroupName, string hostGroupName, string hostName, InstanceViewTypes? expand = default(InstanceViewTypes?))
        {
                return ((IDedicatedHostsOperations)operations).GetAsync(resourceGroupName, hostGroupName, hostName, expand).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Retrieves information about a dedicated host.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='hostGroupName'>
        /// The name of the dedicated host group.
        /// </param>
        /// <param name='hostName'>
        /// The name of the dedicated host.
        /// </param>
        /// <param name='expand'>
        /// The expand expression to apply on the operation. &#39;InstanceView&#39; will
        /// retrieve the list of instance views of the dedicated host. &#39;UserData&#39; is
        /// not supported for dedicated host.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DedicatedHost> GetAsync(this IDedicatedHostsOperations operations, string resourceGroupName, string hostGroupName, string hostName, InstanceViewTypes? expand = default(InstanceViewTypes?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, hostGroupName, hostName, expand, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists all of the dedicated hosts in the specified dedicated host group. Use
        /// the nextLink property in the response to get the next page of dedicated
        /// hosts.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='hostGroupName'>
        /// The name of the dedicated host group.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<DedicatedHost> ListByHostGroup(this IDedicatedHostsOperations operations, string resourceGroupName, string hostGroupName)
        {
                return ((IDedicatedHostsOperations)operations).ListByHostGroupAsync(resourceGroupName, hostGroupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all of the dedicated hosts in the specified dedicated host group. Use
        /// the nextLink property in the response to get the next page of dedicated
        /// hosts.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='hostGroupName'>
        /// The name of the dedicated host group.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<DedicatedHost>> ListByHostGroupAsync(this IDedicatedHostsOperations operations, string resourceGroupName, string hostGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByHostGroupWithHttpMessagesAsync(resourceGroupName, hostGroupName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Restart the dedicated host. The operation will complete successfully once
        /// the dedicated host has restarted and is running. To determine the health of
        /// VMs deployed on the dedicated host after the restart check the Resource
        /// Health Center in the Azure Portal. Please refer to
        /// https://docs.microsoft.com/azure/service-health/resource-health-overview
        /// for more details.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='hostGroupName'>
        /// The name of the dedicated host group.
        /// </param>
        /// <param name='hostName'>
        /// The name of the dedicated host.
        /// </param>
        public static void Restart(this IDedicatedHostsOperations operations, string resourceGroupName, string hostGroupName, string hostName)
        {
                ((IDedicatedHostsOperations)operations).RestartAsync(resourceGroupName, hostGroupName, hostName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Restart the dedicated host. The operation will complete successfully once
        /// the dedicated host has restarted and is running. To determine the health of
        /// VMs deployed on the dedicated host after the restart check the Resource
        /// Health Center in the Azure Portal. Please refer to
        /// https://docs.microsoft.com/azure/service-health/resource-health-overview
        /// for more details.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='hostGroupName'>
        /// The name of the dedicated host group.
        /// </param>
        /// <param name='hostName'>
        /// The name of the dedicated host.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task RestartAsync(this IDedicatedHostsOperations operations, string resourceGroupName, string hostGroupName, string hostName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.RestartWithHttpMessagesAsync(resourceGroupName, hostGroupName, hostName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Redeploy the dedicated host. The operation will complete successfully once
        /// the dedicated host has migrated to a new node and is running. To determine
        /// the health of VMs deployed on the dedicated host after the redeploy check
        /// the Resource Health Center in the Azure Portal. Please refer to
        /// https://docs.microsoft.com/azure/service-health/resource-health-overview
        /// for more details.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='hostGroupName'>
        /// The name of the dedicated host group.
        /// </param>
        /// <param name='hostName'>
        /// The name of the dedicated host.
        /// </param>
        public static DedicatedHostsRedeployHeaders Redeploy(this IDedicatedHostsOperations operations, string resourceGroupName, string hostGroupName, string hostName)
        {
                return ((IDedicatedHostsOperations)operations).RedeployAsync(resourceGroupName, hostGroupName, hostName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Redeploy the dedicated host. The operation will complete successfully once
        /// the dedicated host has migrated to a new node and is running. To determine
        /// the health of VMs deployed on the dedicated host after the redeploy check
        /// the Resource Health Center in the Azure Portal. Please refer to
        /// https://docs.microsoft.com/azure/service-health/resource-health-overview
        /// for more details.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='hostGroupName'>
        /// The name of the dedicated host group.
        /// </param>
        /// <param name='hostName'>
        /// The name of the dedicated host.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DedicatedHostsRedeployHeaders> RedeployAsync(this IDedicatedHostsOperations operations, string resourceGroupName, string hostGroupName, string hostName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.RedeployWithHttpMessagesAsync(resourceGroupName, hostGroupName, hostName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Lists all available dedicated host sizes to which the specified dedicated
        /// host can be resized. NOTE: The dedicated host sizes provided can be used to
        /// only scale up the existing dedicated host.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='hostGroupName'>
        /// The name of the dedicated host group.
        /// </param>
        /// <param name='hostName'>
        /// The name of the dedicated host.
        /// </param>
        public static System.Collections.Generic.IEnumerable<string> ListAvailableSizes(this IDedicatedHostsOperations operations, string resourceGroupName, string hostGroupName, string hostName)
        {
                return ((IDedicatedHostsOperations)operations).ListAvailableSizesAsync(resourceGroupName, hostGroupName, hostName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all available dedicated host sizes to which the specified dedicated
        /// host can be resized. NOTE: The dedicated host sizes provided can be used to
        /// only scale up the existing dedicated host.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='hostGroupName'>
        /// The name of the dedicated host group.
        /// </param>
        /// <param name='hostName'>
        /// The name of the dedicated host.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<string>> ListAvailableSizesAsync(this IDedicatedHostsOperations operations, string resourceGroupName, string hostGroupName, string hostName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListAvailableSizesWithHttpMessagesAsync(resourceGroupName, hostGroupName, hostName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create or update a dedicated host .
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='hostGroupName'>
        /// The name of the dedicated host group.
        /// </param>
        /// <param name='hostName'>
        /// The name of the dedicated host .
        /// </param>
        public static DedicatedHost BeginCreateOrUpdate(this IDedicatedHostsOperations operations, string resourceGroupName, string hostGroupName, string hostName, DedicatedHost parameters)
        {
                return ((IDedicatedHostsOperations)operations).BeginCreateOrUpdateAsync(resourceGroupName, hostGroupName, hostName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create or update a dedicated host .
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='hostGroupName'>
        /// The name of the dedicated host group.
        /// </param>
        /// <param name='hostName'>
        /// The name of the dedicated host .
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DedicatedHost> BeginCreateOrUpdateAsync(this IDedicatedHostsOperations operations, string resourceGroupName, string hostGroupName, string hostName, DedicatedHost parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, hostGroupName, hostName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Update a dedicated host .
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='hostGroupName'>
        /// The name of the dedicated host group.
        /// </param>
        /// <param name='hostName'>
        /// The name of the dedicated host .
        /// </param>
        public static DedicatedHost BeginUpdate(this IDedicatedHostsOperations operations, string resourceGroupName, string hostGroupName, string hostName, DedicatedHostUpdate parameters)
        {
                return ((IDedicatedHostsOperations)operations).BeginUpdateAsync(resourceGroupName, hostGroupName, hostName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update a dedicated host .
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='hostGroupName'>
        /// The name of the dedicated host group.
        /// </param>
        /// <param name='hostName'>
        /// The name of the dedicated host .
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DedicatedHost> BeginUpdateAsync(this IDedicatedHostsOperations operations, string resourceGroupName, string hostGroupName, string hostName, DedicatedHostUpdate parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, hostGroupName, hostName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete a dedicated host.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='hostGroupName'>
        /// The name of the dedicated host group.
        /// </param>
        /// <param name='hostName'>
        /// The name of the dedicated host.
        /// </param>
        public static void BeginDelete(this IDedicatedHostsOperations operations, string resourceGroupName, string hostGroupName, string hostName)
        {
                ((IDedicatedHostsOperations)operations).BeginDeleteAsync(resourceGroupName, hostGroupName, hostName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete a dedicated host.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='hostGroupName'>
        /// The name of the dedicated host group.
        /// </param>
        /// <param name='hostName'>
        /// The name of the dedicated host.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDeleteAsync(this IDedicatedHostsOperations operations, string resourceGroupName, string hostGroupName, string hostName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, hostGroupName, hostName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Restart the dedicated host. The operation will complete successfully once
        /// the dedicated host has restarted and is running. To determine the health of
        /// VMs deployed on the dedicated host after the restart check the Resource
        /// Health Center in the Azure Portal. Please refer to
        /// https://docs.microsoft.com/azure/service-health/resource-health-overview
        /// for more details.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='hostGroupName'>
        /// The name of the dedicated host group.
        /// </param>
        /// <param name='hostName'>
        /// The name of the dedicated host.
        /// </param>
        public static void BeginRestart(this IDedicatedHostsOperations operations, string resourceGroupName, string hostGroupName, string hostName)
        {
                ((IDedicatedHostsOperations)operations).BeginRestartAsync(resourceGroupName, hostGroupName, hostName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Restart the dedicated host. The operation will complete successfully once
        /// the dedicated host has restarted and is running. To determine the health of
        /// VMs deployed on the dedicated host after the restart check the Resource
        /// Health Center in the Azure Portal. Please refer to
        /// https://docs.microsoft.com/azure/service-health/resource-health-overview
        /// for more details.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='hostGroupName'>
        /// The name of the dedicated host group.
        /// </param>
        /// <param name='hostName'>
        /// The name of the dedicated host.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginRestartAsync(this IDedicatedHostsOperations operations, string resourceGroupName, string hostGroupName, string hostName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginRestartWithHttpMessagesAsync(resourceGroupName, hostGroupName, hostName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Redeploy the dedicated host. The operation will complete successfully once
        /// the dedicated host has migrated to a new node and is running. To determine
        /// the health of VMs deployed on the dedicated host after the redeploy check
        /// the Resource Health Center in the Azure Portal. Please refer to
        /// https://docs.microsoft.com/azure/service-health/resource-health-overview
        /// for more details.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='hostGroupName'>
        /// The name of the dedicated host group.
        /// </param>
        /// <param name='hostName'>
        /// The name of the dedicated host.
        /// </param>
        public static DedicatedHostsRedeployHeaders BeginRedeploy(this IDedicatedHostsOperations operations, string resourceGroupName, string hostGroupName, string hostName)
        {
                return ((IDedicatedHostsOperations)operations).BeginRedeployAsync(resourceGroupName, hostGroupName, hostName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Redeploy the dedicated host. The operation will complete successfully once
        /// the dedicated host has migrated to a new node and is running. To determine
        /// the health of VMs deployed on the dedicated host after the redeploy check
        /// the Resource Health Center in the Azure Portal. Please refer to
        /// https://docs.microsoft.com/azure/service-health/resource-health-overview
        /// for more details.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='hostGroupName'>
        /// The name of the dedicated host group.
        /// </param>
        /// <param name='hostName'>
        /// The name of the dedicated host.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DedicatedHostsRedeployHeaders> BeginRedeployAsync(this IDedicatedHostsOperations operations, string resourceGroupName, string hostGroupName, string hostName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginRedeployWithHttpMessagesAsync(resourceGroupName, hostGroupName, hostName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Lists all of the dedicated hosts in the specified dedicated host group. Use
        /// the nextLink property in the response to get the next page of dedicated
        /// hosts.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<DedicatedHost> ListByHostGroupNext(this IDedicatedHostsOperations operations, string nextPageLink)
        {
                return ((IDedicatedHostsOperations)operations).ListByHostGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all of the dedicated hosts in the specified dedicated host group. Use
        /// the nextLink property in the response to get the next page of dedicated
        /// hosts.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<DedicatedHost>> ListByHostGroupNextAsync(this IDedicatedHostsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByHostGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
