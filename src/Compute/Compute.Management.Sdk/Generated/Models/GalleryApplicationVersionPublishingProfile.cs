// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Compute.Models
{
    using System.Linq;

    /// <summary>
    /// The publishing profile of a gallery image version.
    /// </summary>
    public partial class GalleryApplicationVersionPublishingProfile : GalleryArtifactPublishingProfileBase
    {
        /// <summary>
        /// Initializes a new instance of the GalleryApplicationVersionPublishingProfile class.
        /// </summary>
        public GalleryApplicationVersionPublishingProfile()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the GalleryApplicationVersionPublishingProfile class.
        /// </summary>

        /// <param name="targetRegions">The target regions where the Image Version is going to be replicated to.
        /// This property is updatable.
        /// </param>

        /// <param name="replicaCount">The number of replicas of the Image Version to be created per region. This
        /// property would take effect for a region when regionalReplicaCount is not
        /// specified. This property is updatable.
        /// </param>

        /// <param name="excludeFromLatest">If set to true, Virtual Machines deployed from the latest version of the
        /// Image Definition won&#39;t use this Image Version.
        /// </param>

        /// <param name="publishedDate">The timestamp for when the gallery image version is published.
        /// </param>

        /// <param name="endOfLifeDate">The end of life date of the gallery image version. This property can be
        /// used for decommissioning purposes. This property is updatable.
        /// </param>

        /// <param name="storageAccountType">Specifies the storage account type to be used to store the image. This
        /// property is not updatable.
        /// Possible values include: &#39;Standard_LRS&#39;, &#39;Standard_ZRS&#39;, &#39;Premium_LRS&#39;</param>

        /// <param name="replicationMode">Optional parameter which specifies the mode to be used for replication.
        /// This property is not updatable.
        /// Possible values include: &#39;Full&#39;, &#39;Shallow&#39;</param>

        /// <param name="targetExtendedLocations">The target extended locations where the Image Version is going to be
        /// replicated to. This property is updatable.
        /// </param>

        /// <param name="source">The source image from which the Image Version is going to be created.
        /// </param>

        /// <param name="manageActions">
        /// </param>

        /// <param name="settings">Additional settings for the VM app that contains the target package and
        /// config file name when it is deployed to target VM or VM scale set.
        /// </param>

        /// <param name="advancedSettings">Optional. Additional settings to pass to the vm-application-manager
        /// extension. For advanced use only.
        /// </param>

        /// <param name="enableHealthCheck">Optional. Whether or not this application reports health.
        /// </param>

        /// <param name="customActions">A list of custom actions that can be performed with this Gallery
        /// Application Version.
        /// </param>
        public GalleryApplicationVersionPublishingProfile(UserArtifactSource source, System.Collections.Generic.IList<TargetRegion> targetRegions = default(System.Collections.Generic.IList<TargetRegion>), int? replicaCount = default(int?), bool? excludeFromLatest = default(bool?), System.DateTime? publishedDate = default(System.DateTime?), System.DateTime? endOfLifeDate = default(System.DateTime?), string storageAccountType = default(string), string replicationMode = default(string), System.Collections.Generic.IList<GalleryTargetExtendedLocation> targetExtendedLocations = default(System.Collections.Generic.IList<GalleryTargetExtendedLocation>), UserArtifactManage manageActions = default(UserArtifactManage), UserArtifactSettings settings = default(UserArtifactSettings), System.Collections.Generic.IDictionary<string, string> advancedSettings = default(System.Collections.Generic.IDictionary<string, string>), bool? enableHealthCheck = default(bool?), System.Collections.Generic.IList<GalleryApplicationCustomAction> customActions = default(System.Collections.Generic.IList<GalleryApplicationCustomAction>))

        : base(targetRegions, replicaCount, excludeFromLatest, publishedDate, endOfLifeDate, storageAccountType, replicationMode, targetExtendedLocations)
        {
            this.Source = source;
            this.ManageActions = manageActions;
            this.Settings = settings;
            this.AdvancedSettings = advancedSettings;
            this.EnableHealthCheck = enableHealthCheck;
            this.CustomActions = customActions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the source image from which the Image Version is going to be
        /// created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "source")]
        public UserArtifactSource Source {get; set; }

        /// <summary>
        /// Gets or sets
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "manageActions")]
        public UserArtifactManage ManageActions {get; set; }

        /// <summary>
        /// Gets or sets additional settings for the VM app that contains the target
        /// package and config file name when it is deployed to target VM or VM scale
        /// set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "settings")]
        public UserArtifactSettings Settings {get; set; }

        /// <summary>
        /// Gets or sets optional. Additional settings to pass to the
        /// vm-application-manager extension. For advanced use only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "advancedSettings")]
        public System.Collections.Generic.IDictionary<string, string> AdvancedSettings {get; set; }

        /// <summary>
        /// Gets or sets optional. Whether or not this application reports health.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableHealthCheck")]
        public bool? EnableHealthCheck {get; set; }

        /// <summary>
        /// Gets or sets a list of custom actions that can be performed with this
        /// Gallery Application Version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "customActions")]
        public System.Collections.Generic.IList<GalleryApplicationCustomAction> CustomActions {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Source == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Source");
            }
            if (this.Source != null)
            {
                this.Source.Validate();
            }
            if (this.ManageActions != null)
            {
                this.ManageActions.Validate();
            }


            if (this.CustomActions != null)
            {
                foreach (var element in this.CustomActions)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}