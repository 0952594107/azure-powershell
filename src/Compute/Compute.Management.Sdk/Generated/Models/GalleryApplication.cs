// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Compute.Models
{
    using System.Linq;

    /// <summary>
    /// Specifies information about the gallery Application Definition that you
    /// want to create or update.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class GalleryApplication : Resource
    {
        /// <summary>
        /// Initializes a new instance of the GalleryApplication class.
        /// </summary>
        public GalleryApplication()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the GalleryApplication class.
        /// </summary>

        /// <param name="id">Resource Id
        /// </param>

        /// <param name="name">Resource name
        /// </param>

        /// <param name="type">Resource type
        /// </param>

        /// <param name="location">Resource location
        /// </param>

        /// <param name="tags">Resource tags
        /// </param>

        /// <param name="description">The description of this gallery Application Definition resource. This
        /// property is updatable.
        /// </param>

        /// <param name="eula">The Eula agreement for the gallery Application Definition.
        /// </param>

        /// <param name="privacyStatementUri">The privacy statement uri.
        /// </param>

        /// <param name="releaseNoteUri">The release note uri.
        /// </param>

        /// <param name="endOfLifeDate">The end of life date of the gallery Application Definition. This property
        /// can be used for decommissioning purposes. This property is updatable.
        /// </param>

        /// <param name="supportedOSType">This property allows you to specify the supported type of the OS that
        /// application is built for. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt;
        /// **Windows** &lt;br&gt;&lt;br&gt; **Linux**
        /// Possible values include: &#39;Windows&#39;, &#39;Linux&#39;</param>

        /// <param name="customActions">A list of custom actions that can be performed with all of the Gallery
        /// Application Versions within this Gallery Application.
        /// </param>
        public GalleryApplication(string location, string id = default(string), string name = default(string), string type = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), string description = default(string), string eula = default(string), string privacyStatementUri = default(string), string releaseNoteUri = default(string), System.DateTime? endOfLifeDate = default(System.DateTime?), OperatingSystemTypes? supportedOSType = default(OperatingSystemTypes?), System.Collections.Generic.IList<GalleryApplicationCustomAction> customActions = default(System.Collections.Generic.IList<GalleryApplicationCustomAction>))

        : base(location, id, name, type, tags)
        {
            this.Description = description;
            this.Eula = eula;
            this.PrivacyStatementUri = privacyStatementUri;
            this.ReleaseNoteUri = releaseNoteUri;
            this.EndOfLifeDate = endOfLifeDate;
            this.SupportedOSType = supportedOSType;
            this.CustomActions = customActions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the description of this gallery Application Definition
        /// resource. This property is updatable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.description")]
        public string Description {get; set; }

        /// <summary>
        /// Gets or sets the Eula agreement for the gallery Application Definition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.eula")]
        public string Eula {get; set; }

        /// <summary>
        /// Gets or sets the privacy statement uri.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.privacyStatementUri")]
        public string PrivacyStatementUri {get; set; }

        /// <summary>
        /// Gets or sets the release note uri.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.releaseNoteUri")]
        public string ReleaseNoteUri {get; set; }

        /// <summary>
        /// Gets or sets the end of life date of the gallery Application Definition.
        /// This property can be used for decommissioning purposes. This property is
        /// updatable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.endOfLifeDate")]
        public System.DateTime? EndOfLifeDate {get; set; }

        /// <summary>
        /// Gets or sets this property allows you to specify the supported type of the
        /// OS that application is built for. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt;
        /// **Windows** &lt;br&gt;&lt;br&gt; **Linux** Possible values include: &#39;Windows&#39;, &#39;Linux&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.supportedOSType")]
        public OperatingSystemTypes? SupportedOSType {get; set; }

        /// <summary>
        /// Gets or sets a list of custom actions that can be performed with all of the
        /// Gallery Application Versions within this Gallery Application.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.customActions")]
        public System.Collections.Generic.IList<GalleryApplicationCustomAction> CustomActions {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();





            if (this.CustomActions != null)
            {
                foreach (var element in this.CustomActions)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}