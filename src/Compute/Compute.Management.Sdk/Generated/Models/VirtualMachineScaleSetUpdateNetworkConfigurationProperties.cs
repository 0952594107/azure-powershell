// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Compute.Models
{
    using System.Linq;

    /// <summary>
    /// Describes a virtual machine scale set updatable network profile&#39;s IP
    /// configuration.Use this object for updating network profile&#39;s IP
    /// Configuration.
    /// </summary>
    public partial class VirtualMachineScaleSetUpdateNetworkConfigurationProperties
    {
        /// <summary>
        /// Initializes a new instance of the VirtualMachineScaleSetUpdateNetworkConfigurationProperties class.
        /// </summary>
        public VirtualMachineScaleSetUpdateNetworkConfigurationProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VirtualMachineScaleSetUpdateNetworkConfigurationProperties class.
        /// </summary>

        /// <param name="primary">Whether this is a primary NIC on a virtual machine.
        /// </param>

        /// <param name="enableAcceleratedNetworking">Specifies whether the network interface is accelerated networking-enabled.
        /// </param>

        /// <param name="disableTcpStateTracking">Specifies whether the network interface is disabled for tcp state tracking.
        /// </param>

        /// <param name="enableFpga">Specifies whether the network interface is FPGA networking-enabled.
        /// </param>

        /// <param name="networkSecurityGroup">The network security group.
        /// </param>

        /// <param name="dnsSettings">The dns settings to be applied on the network interfaces.
        /// </param>

        /// <param name="ipConfigurations">The virtual machine scale set IP Configuration.
        /// </param>

        /// <param name="enableIPForwarding">Whether IP forwarding enabled on this NIC.
        /// </param>

        /// <param name="deleteOption">Specify what happens to the network interface when the VM is deleted
        /// Possible values include: &#39;Delete&#39;, &#39;Detach&#39;</param>

        /// <param name="auxiliaryMode">Specifies whether the Auxiliary mode is enabled for the Network Interface
        /// resource.
        /// Possible values include: &#39;None&#39;, &#39;AcceleratedConnections&#39;, &#39;Floating&#39;</param>

        /// <param name="auxiliarySku">Specifies whether the Auxiliary sku is enabled for the Network Interface
        /// resource.
        /// Possible values include: &#39;None&#39;, &#39;A1&#39;, &#39;A2&#39;, &#39;A4&#39;, &#39;A8&#39;</param>
        public VirtualMachineScaleSetUpdateNetworkConfigurationProperties(bool? primary = default(bool?), bool? enableAcceleratedNetworking = default(bool?), bool? disableTcpStateTracking = default(bool?), bool? enableFpga = default(bool?), SubResource networkSecurityGroup = default(SubResource), VirtualMachineScaleSetNetworkConfigurationDnsSettings dnsSettings = default(VirtualMachineScaleSetNetworkConfigurationDnsSettings), System.Collections.Generic.IList<VirtualMachineScaleSetUpdateIPConfiguration> ipConfigurations = default(System.Collections.Generic.IList<VirtualMachineScaleSetUpdateIPConfiguration>), bool? enableIPForwarding = default(bool?), string deleteOption = default(string), string auxiliaryMode = default(string), string auxiliarySku = default(string))

        {
            this.Primary = primary;
            this.EnableAcceleratedNetworking = enableAcceleratedNetworking;
            this.DisableTcpStateTracking = disableTcpStateTracking;
            this.EnableFpga = enableFpga;
            this.NetworkSecurityGroup = networkSecurityGroup;
            this.DnsSettings = dnsSettings;
            this.IPConfigurations = ipConfigurations;
            this.EnableIPForwarding = enableIPForwarding;
            this.DeleteOption = deleteOption;
            this.AuxiliaryMode = auxiliaryMode;
            this.AuxiliarySku = auxiliarySku;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets whether this is a primary NIC on a virtual machine.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "primary")]
        public bool? Primary {get; set; }

        /// <summary>
        /// Gets or sets specifies whether the network interface is accelerated
        /// networking-enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableAcceleratedNetworking")]
        public bool? EnableAcceleratedNetworking {get; set; }

        /// <summary>
        /// Gets or sets specifies whether the network interface is disabled for tcp
        /// state tracking.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "disableTcpStateTracking")]
        public bool? DisableTcpStateTracking {get; set; }

        /// <summary>
        /// Gets or sets specifies whether the network interface is FPGA
        /// networking-enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableFpga")]
        public bool? EnableFpga {get; set; }

        /// <summary>
        /// Gets or sets the network security group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "networkSecurityGroup")]
        public SubResource NetworkSecurityGroup {get; set; }

        /// <summary>
        /// Gets or sets the dns settings to be applied on the network interfaces.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dnsSettings")]
        public VirtualMachineScaleSetNetworkConfigurationDnsSettings DnsSettings {get; set; }

        /// <summary>
        /// Gets or sets the virtual machine scale set IP Configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ipConfigurations")]
        public System.Collections.Generic.IList<VirtualMachineScaleSetUpdateIPConfiguration> IPConfigurations {get; set; }

        /// <summary>
        /// Gets or sets whether IP forwarding enabled on this NIC.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableIPForwarding")]
        public bool? EnableIPForwarding {get; set; }

        /// <summary>
        /// Gets or sets specify what happens to the network interface when the VM is
        /// deleted Possible values include: &#39;Delete&#39;, &#39;Detach&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "deleteOption")]
        public string DeleteOption {get; set; }

        /// <summary>
        /// Gets or sets specifies whether the Auxiliary mode is enabled for the
        /// Network Interface resource. Possible values include: &#39;None&#39;, &#39;AcceleratedConnections&#39;, &#39;Floating&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "auxiliaryMode")]
        public string AuxiliaryMode {get; set; }

        /// <summary>
        /// Gets or sets specifies whether the Auxiliary sku is enabled for the Network
        /// Interface resource. Possible values include: &#39;None&#39;, &#39;A1&#39;, &#39;A2&#39;, &#39;A4&#39;, &#39;A8&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "auxiliarySku")]
        public string AuxiliarySku {get; set; }
    }
}