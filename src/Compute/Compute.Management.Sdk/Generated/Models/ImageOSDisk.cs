// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Compute.Models
{
    using System.Linq;

    /// <summary>
    /// Describes an Operating System disk.
    /// </summary>
    public partial class ImageOSDisk : ImageDisk
    {
        /// <summary>
        /// Initializes a new instance of the ImageOSDisk class.
        /// </summary>
        public ImageOSDisk()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ImageOSDisk class.
        /// </summary>

        /// <param name="snapshot">The snapshot.
        /// </param>

        /// <param name="managedDisk">The managedDisk.
        /// </param>

        /// <param name="blobUri">The Virtual Hard Disk.
        /// </param>

        /// <param name="caching">Specifies the caching requirements. Possible values are: **None,**
        /// **ReadOnly,** **ReadWrite.** The default values are: **None for Standard
        /// storage. ReadOnly for Premium storage.**
        /// Possible values include: &#39;None&#39;, &#39;ReadOnly&#39;, &#39;ReadWrite&#39;</param>

        /// <param name="diskSizeGb">Specifies the size of empty data disks in gigabytes. This element can be
        /// used to overwrite the name of the disk in a virtual machine image. This
        /// value cannot be larger than 1023 GB.
        /// </param>

        /// <param name="storageAccountType">Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS
        /// can only be used with data disks, it cannot be used with OS Disk.
        /// Possible values include: &#39;Standard_LRS&#39;, &#39;Premium_LRS&#39;, &#39;StandardSSD_LRS&#39;,
        /// &#39;UltraSSD_LRS&#39;, &#39;Premium_ZRS&#39;, &#39;StandardSSD_ZRS&#39;, &#39;PremiumV2_LRS&#39;</param>

        /// <param name="diskEncryptionSet">Specifies the customer managed disk encryption set resource id for the
        /// managed image disk.
        /// </param>

        /// <param name="osType">This property allows you to specify the type of the OS that is included in
        /// the disk if creating a VM from a custom image. Possible values are:
        /// **Windows,** **Linux.**
        /// Possible values include: &#39;Windows&#39;, &#39;Linux&#39;</param>

        /// <param name="osState">The OS State. For managed images, use Generalized.
        /// Possible values include: &#39;Generalized&#39;, &#39;Specialized&#39;</param>
        public ImageOSDisk(OperatingSystemTypes osType, OperatingSystemStateTypes osState, SubResource snapshot = default(SubResource), SubResource managedDisk = default(SubResource), string blobUri = default(string), CachingTypes? caching = default(CachingTypes?), int? diskSizeGb = default(int?), string storageAccountType = default(string), DiskEncryptionSetParameters diskEncryptionSet = default(DiskEncryptionSetParameters))

        : base(snapshot, managedDisk, blobUri, caching, diskSizeGb, storageAccountType, diskEncryptionSet)
        {
            this.OSType = osType;
            this.OSState = osState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets this property allows you to specify the type of the OS that is
        /// included in the disk if creating a VM from a custom image. Possible values
        /// are: **Windows,** **Linux.** Possible values include: &#39;Windows&#39;, &#39;Linux&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "osType")]
        public OperatingSystemTypes OSType {get; set; }

        /// <summary>
        /// Gets or sets the OS State. For managed images, use Generalized. Possible values include: &#39;Generalized&#39;, &#39;Specialized&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "osState")]
        public OperatingSystemStateTypes OSState {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {


        }
    }
}