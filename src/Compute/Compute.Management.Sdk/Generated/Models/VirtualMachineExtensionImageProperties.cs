// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Compute.Models
{
    using System.Linq;

    /// <summary>
    /// Describes the properties of a Virtual Machine Extension Image.
    /// </summary>
    public partial class VirtualMachineExtensionImageProperties
    {
        /// <summary>
        /// Initializes a new instance of the VirtualMachineExtensionImageProperties class.
        /// </summary>
        public VirtualMachineExtensionImageProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VirtualMachineExtensionImageProperties class.
        /// </summary>

        /// <param name="operatingSystem">The operating system this extension supports.
        /// </param>

        /// <param name="computeRole">The type of role (IaaS or PaaS) this extension supports.
        /// </param>

        /// <param name="handlerSchema">The schema defined by publisher, where extension consumers should provide
        /// settings in a matching schema.
        /// </param>

        /// <param name="vmScaleSetEnabled">Whether the extension can be used on xRP VMScaleSets. By default existing
        /// extensions are usable on scalesets, but there might be cases where a
        /// publisher wants to explicitly indicate the extension is only enabled for
        /// CRP VMs but not VMSS.
        /// </param>

        /// <param name="supportsMultipleExtensions">Whether the handler can support multiple extensions.
        /// </param>
        public VirtualMachineExtensionImageProperties(string operatingSystem, string computeRole, string handlerSchema, bool? vmScaleSetEnabled = default(bool?), bool? supportsMultipleExtensions = default(bool?))

        {
            this.OperatingSystem = operatingSystem;
            this.ComputeRole = computeRole;
            this.HandlerSchema = handlerSchema;
            this.VMScaleSetEnabled = vmScaleSetEnabled;
            this.SupportsMultipleExtensions = supportsMultipleExtensions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the operating system this extension supports.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "operatingSystem")]
        public string OperatingSystem {get; set; }

        /// <summary>
        /// Gets or sets the type of role (IaaS or PaaS) this extension supports.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "computeRole")]
        public string ComputeRole {get; set; }

        /// <summary>
        /// Gets or sets the schema defined by publisher, where extension consumers
        /// should provide settings in a matching schema.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "handlerSchema")]
        public string HandlerSchema {get; set; }

        /// <summary>
        /// Gets or sets whether the extension can be used on xRP VMScaleSets. By
        /// default existing extensions are usable on scalesets, but there might be
        /// cases where a publisher wants to explicitly indicate the extension is only
        /// enabled for CRP VMs but not VMSS.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vmScaleSetEnabled")]
        public bool? VMScaleSetEnabled {get; set; }

        /// <summary>
        /// Gets or sets whether the handler can support multiple extensions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "supportsMultipleExtensions")]
        public bool? SupportsMultipleExtensions {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.OperatingSystem == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "OperatingSystem");
            }
            if (this.ComputeRole == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ComputeRole");
            }
            if (this.HandlerSchema == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "HandlerSchema");
            }



        }
    }
}