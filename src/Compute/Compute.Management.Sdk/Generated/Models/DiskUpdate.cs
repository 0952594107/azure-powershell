// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Compute.Models
{
    using System.Linq;

    /// <summary>
    /// Disk update resource.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class DiskUpdate
    {
        /// <summary>
        /// Initializes a new instance of the DiskUpdate class.
        /// </summary>
        public DiskUpdate()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DiskUpdate class.
        /// </summary>

        /// <param name="tags">Resource tags
        /// </param>

        /// <param name="sku">The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS,
        /// UltraSSD_LRS, Premium_ZRS, StandardSSD_ZRS, or PremiumV2_LRS.
        /// </param>

        /// <param name="encryption">Encryption property can be used to encrypt data at rest with customer
        /// managed keys or platform managed keys.
        /// </param>

        /// <param name="supportedCapabilities">List of supported capabilities to be added on the OS disk.
        /// </param>

        /// <param name="osType">the Operating System type.
        /// Possible values include: &#39;Windows&#39;, &#39;Linux&#39;</param>

        /// <param name="diskSizeGb">If creationData.createOption is Empty, this field is mandatory and it
        /// indicates the size of the disk to create. If this field is present for
        /// updates or creation with other options, it indicates a resize. Resizes are
        /// only allowed if the disk is not attached to a running VM, and can only
        /// increase the disk&#39;s size.
        /// </param>

        /// <param name="encryptionSettingsCollection">Encryption settings collection used be Azure Disk Encryption, can contain
        /// multiple encryption settings per disk or snapshot.
        /// </param>

        /// <param name="diskIopsReadWrite">The number of IOPS allowed for this disk; only settable for UltraSSD disks.
        /// One operation can transfer between 4k and 256k bytes.
        /// </param>

        /// <param name="diskMBpsReadWrite">The bandwidth allowed for this disk; only settable for UltraSSD disks. MBps
        /// means millions of bytes per second - MB here uses the ISO notation, of
        /// powers of 10.
        /// </param>

        /// <param name="diskIopsReadOnly">The total number of IOPS that will be allowed across all VMs mounting the
        /// shared disk as ReadOnly. One operation can transfer between 4k and 256k
        /// bytes.
        /// </param>

        /// <param name="diskMBpsReadOnly">The total throughput (MBps) that will be allowed across all VMs mounting
        /// the shared disk as ReadOnly. MBps means millions of bytes per second - MB
        /// here uses the ISO notation, of powers of 10.
        /// </param>

        /// <param name="maxShares">The maximum number of VMs that can attach to the disk at the same time.
        /// Value greater than one indicates a disk that can be mounted on multiple VMs
        /// at the same time.
        /// </param>

        /// <param name="networkAccessPolicy">Policy for accessing the disk via network.
        /// Possible values include: &#39;AllowAll&#39;, &#39;AllowPrivate&#39;, &#39;DenyAll&#39;</param>

        /// <param name="diskAccessId">ARM id of the DiskAccess resource for using private endpoints on disks.
        /// </param>

        /// <param name="tier">Performance tier of the disk (e.g, P4, S10) as described here:
        /// https://azure.microsoft.com/en-us/pricing/details/managed-disks/. Does not
        /// apply to Ultra disks.
        /// </param>

        /// <param name="burstingEnabled">Set to true to enable bursting beyond the provisioned performance target of
        /// the disk. Bursting is disabled by default. Does not apply to Ultra disks.
        /// </param>

        /// <param name="purchasePlan">Purchase plan information to be added on the OS disk
        /// </param>

        /// <param name="propertyUpdatesInProgress">Properties of the disk for which update is pending.
        /// </param>

        /// <param name="supportsHibernation">Indicates the OS on a disk supports hibernation.
        /// </param>

        /// <param name="publicNetworkAccess">Policy for controlling export on the disk.
        /// Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;</param>

        /// <param name="dataAccessAuthMode">Additional authentication requirements when exporting or uploading to a
        /// disk or snapshot.
        /// Possible values include: &#39;AzureActiveDirectory&#39;, &#39;None&#39;</param>

        /// <param name="optimizedForFrequentAttach">Setting this property to true improves reliability and performance of data
        /// disks that are frequently (more than 5 times a day) by detached from one
        /// virtual machine and attached to another. This property should not be set
        /// for disks that are not detached and attached frequently as it causes the
        /// disks to not align with the fault domain of the virtual machine.
        /// </param>
        public DiskUpdate(System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), DiskSku sku = default(DiskSku), Encryption encryption = default(Encryption), SupportedCapabilities supportedCapabilities = default(SupportedCapabilities), OperatingSystemTypes? osType = default(OperatingSystemTypes?), int? diskSizeGb = default(int?), EncryptionSettingsCollection encryptionSettingsCollection = default(EncryptionSettingsCollection), long? diskIopsReadWrite = default(long?), long? diskMBpsReadWrite = default(long?), long? diskIopsReadOnly = default(long?), long? diskMBpsReadOnly = default(long?), int? maxShares = default(int?), string networkAccessPolicy = default(string), string diskAccessId = default(string), string tier = default(string), bool? burstingEnabled = default(bool?), PurchasePlanAutoGenerated purchasePlan = default(PurchasePlanAutoGenerated), PropertyUpdatesInProgress propertyUpdatesInProgress = default(PropertyUpdatesInProgress), bool? supportsHibernation = default(bool?), string publicNetworkAccess = default(string), string dataAccessAuthMode = default(string), bool? optimizedForFrequentAttach = default(bool?))

        {
            this.Tags = tags;
            this.Sku = sku;
            this.Encryption = encryption;
            this.SupportedCapabilities = supportedCapabilities;
            this.OSType = osType;
            this.DiskSizeGb = diskSizeGb;
            this.EncryptionSettingsCollection = encryptionSettingsCollection;
            this.DiskIopsReadWrite = diskIopsReadWrite;
            this.DiskMBpsReadWrite = diskMBpsReadWrite;
            this.DiskIopsReadOnly = diskIopsReadOnly;
            this.DiskMBpsReadOnly = diskMBpsReadOnly;
            this.MaxShares = maxShares;
            this.NetworkAccessPolicy = networkAccessPolicy;
            this.DiskAccessId = diskAccessId;
            this.Tier = tier;
            this.BurstingEnabled = burstingEnabled;
            this.PurchasePlan = purchasePlan;
            this.PropertyUpdatesInProgress = propertyUpdatesInProgress;
            this.SupportsHibernation = supportsHibernation;
            this.PublicNetworkAccess = publicNetworkAccess;
            this.DataAccessAuthMode = dataAccessAuthMode;
            this.OptimizedForFrequentAttach = optimizedForFrequentAttach;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets resource tags
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tags")]
        public System.Collections.Generic.IDictionary<string, string> Tags {get; set; }

        /// <summary>
        /// Gets or sets the disks sku name. Can be Standard_LRS, Premium_LRS,
        /// StandardSSD_LRS, UltraSSD_LRS, Premium_ZRS, StandardSSD_ZRS, or
        /// PremiumV2_LRS.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sku")]
        public DiskSku Sku {get; set; }

        /// <summary>
        /// Gets or sets encryption property can be used to encrypt data at rest with
        /// customer managed keys or platform managed keys.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.encryption")]
        public Encryption Encryption {get; set; }

        /// <summary>
        /// Gets or sets list of supported capabilities to be added on the OS disk.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.supportedCapabilities")]
        public SupportedCapabilities SupportedCapabilities {get; set; }

        /// <summary>
        /// Gets or sets the Operating System type. Possible values include: &#39;Windows&#39;, &#39;Linux&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.osType")]
        public OperatingSystemTypes? OSType {get; set; }

        /// <summary>
        /// Gets or sets if creationData.createOption is Empty, this field is mandatory
        /// and it indicates the size of the disk to create. If this field is present
        /// for updates or creation with other options, it indicates a resize. Resizes
        /// are only allowed if the disk is not attached to a running VM, and can only
        /// increase the disk&#39;s size.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.diskSizeGB")]
        public int? DiskSizeGb {get; set; }

        /// <summary>
        /// Gets or sets encryption settings collection used be Azure Disk Encryption,
        /// can contain multiple encryption settings per disk or snapshot.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.encryptionSettingsCollection")]
        public EncryptionSettingsCollection EncryptionSettingsCollection {get; set; }

        /// <summary>
        /// Gets or sets the number of IOPS allowed for this disk; only settable for
        /// UltraSSD disks. One operation can transfer between 4k and 256k bytes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.diskIOPSReadWrite")]
        public long? DiskIopsReadWrite {get; set; }

        /// <summary>
        /// Gets or sets the bandwidth allowed for this disk; only settable for
        /// UltraSSD disks. MBps means millions of bytes per second - MB here uses the
        /// ISO notation, of powers of 10.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.diskMBpsReadWrite")]
        public long? DiskMBpsReadWrite {get; set; }

        /// <summary>
        /// Gets or sets the total number of IOPS that will be allowed across all VMs
        /// mounting the shared disk as ReadOnly. One operation can transfer between 4k
        /// and 256k bytes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.diskIOPSReadOnly")]
        public long? DiskIopsReadOnly {get; set; }

        /// <summary>
        /// Gets or sets the total throughput (MBps) that will be allowed across all
        /// VMs mounting the shared disk as ReadOnly. MBps means millions of bytes per
        /// second - MB here uses the ISO notation, of powers of 10.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.diskMBpsReadOnly")]
        public long? DiskMBpsReadOnly {get; set; }

        /// <summary>
        /// Gets or sets the maximum number of VMs that can attach to the disk at the
        /// same time. Value greater than one indicates a disk that can be mounted on
        /// multiple VMs at the same time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.maxShares")]
        public int? MaxShares {get; set; }

        /// <summary>
        /// Gets or sets policy for accessing the disk via network. Possible values include: &#39;AllowAll&#39;, &#39;AllowPrivate&#39;, &#39;DenyAll&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.networkAccessPolicy")]
        public string NetworkAccessPolicy {get; set; }

        /// <summary>
        /// Gets or sets aRM id of the DiskAccess resource for using private endpoints
        /// on disks.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.diskAccessId")]
        public string DiskAccessId {get; set; }

        /// <summary>
        /// Gets or sets performance tier of the disk (e.g, P4, S10) as described here:
        /// https://azure.microsoft.com/en-us/pricing/details/managed-disks/. Does not
        /// apply to Ultra disks.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.tier")]
        public string Tier {get; set; }

        /// <summary>
        /// Gets or sets set to true to enable bursting beyond the provisioned
        /// performance target of the disk. Bursting is disabled by default. Does not
        /// apply to Ultra disks.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.burstingEnabled")]
        public bool? BurstingEnabled {get; set; }

        /// <summary>
        /// Gets or sets purchase plan information to be added on the OS disk
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.purchasePlan")]
        public PurchasePlanAutoGenerated PurchasePlan {get; set; }

        /// <summary>
        /// Gets properties of the disk for which update is pending.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.propertyUpdatesInProgress")]
        public PropertyUpdatesInProgress PropertyUpdatesInProgress {get; private set; }

        /// <summary>
        /// Gets or sets indicates the OS on a disk supports hibernation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.supportsHibernation")]
        public bool? SupportsHibernation {get; set; }

        /// <summary>
        /// Gets or sets policy for controlling export on the disk. Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.publicNetworkAccess")]
        public string PublicNetworkAccess {get; set; }

        /// <summary>
        /// Gets or sets additional authentication requirements when exporting or
        /// uploading to a disk or snapshot. Possible values include: &#39;AzureActiveDirectory&#39;, &#39;None&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.dataAccessAuthMode")]
        public string DataAccessAuthMode {get; set; }

        /// <summary>
        /// Gets or sets setting this property to true improves reliability and
        /// performance of data disks that are frequently (more than 5 times a day) by
        /// detached from one virtual machine and attached to another. This property
        /// should not be set for disks that are not detached and attached frequently
        /// as it causes the disks to not align with the fault domain of the virtual
        /// machine.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.optimizedForFrequentAttach")]
        public bool? OptimizedForFrequentAttach {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {





            if (this.EncryptionSettingsCollection != null)
            {
                this.EncryptionSettingsCollection.Validate();
            }



            if (this.PurchasePlan != null)
            {
                this.PurchasePlan.Validate();
            }



        }
    }
}