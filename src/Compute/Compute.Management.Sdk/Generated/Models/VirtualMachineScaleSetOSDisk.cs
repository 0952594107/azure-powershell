// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Compute.Models
{
    using System.Linq;

    /// <summary>
    /// Describes a virtual machine scale set operating system disk.
    /// </summary>
    public partial class VirtualMachineScaleSetOSDisk
    {
        /// <summary>
        /// Initializes a new instance of the VirtualMachineScaleSetOSDisk class.
        /// </summary>
        public VirtualMachineScaleSetOSDisk()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VirtualMachineScaleSetOSDisk class.
        /// </summary>

        /// <param name="name">The disk name.
        /// </param>

        /// <param name="caching">Specifies the caching requirements. Possible values are: **None,**
        /// **ReadOnly,** **ReadWrite.** The default values are: **None for Standard
        /// storage. ReadOnly for Premium storage.**
        /// Possible values include: &#39;None&#39;, &#39;ReadOnly&#39;, &#39;ReadWrite&#39;</param>

        /// <param name="writeAcceleratorEnabled">Specifies whether writeAccelerator should be enabled or disabled on the
        /// disk.
        /// </param>

        /// <param name="createOption">Specifies how the virtual machines in the scale set should be created. The
        /// only allowed value is: **FromImage.** This value is used when you are using
        /// an image to create the virtual machine. If you are using a platform image,
        /// you also use the imageReference element described above. If you are using a
        /// marketplace image, you  also use the plan element previously described.
        /// Possible values include: &#39;FromImage&#39;, &#39;Empty&#39;, &#39;Attach&#39;</param>

        /// <param name="diffDiskSettings">Specifies the ephemeral disk Settings for the operating system disk used by
        /// the virtual machine scale set.
        /// </param>

        /// <param name="diskSizeGb">Specifies the size of an empty data disk in gigabytes. This element can be
        /// used to overwrite the size of the disk in a virtual machine image. The
        /// property &#39;diskSizeGB&#39; is the number of bytes x 1024^3 for the disk and the
        /// value cannot be larger than 1023.
        /// </param>

        /// <param name="osType">This property allows you to specify the type of the OS that is included in
        /// the disk if creating a VM from user-image or a specialized VHD. Possible
        /// values are: **Windows,** **Linux.**
        /// Possible values include: &#39;Windows&#39;, &#39;Linux&#39;</param>

        /// <param name="image">Specifies information about the unmanaged user image to base the scale set
        /// on.
        /// </param>

        /// <param name="vhdContainers">Specifies the container urls that are used to store operating system disks
        /// for the scale set.
        /// </param>

        /// <param name="managedDisk">The managed disk parameters.
        /// </param>

        /// <param name="deleteOption">Specifies whether OS Disk should be deleted or detached upon VMSS Flex
        /// deletion (This feature is available for VMSS with Flexible
        /// OrchestrationMode only). &lt;br&gt;&lt;br&gt; Possible values: &lt;br&gt;&lt;br&gt; **Delete** If
        /// this value is used, the OS disk is deleted when VMSS Flex VM is
        /// deleted.&lt;br&gt;&lt;br&gt; **Detach** If this value is used, the OS disk is retained
        /// after VMSS Flex VM is deleted. &lt;br&gt;&lt;br&gt; The default value is set to
        /// **Delete**. For an Ephemeral OS Disk, the default value is set to
        /// **Delete**. User cannot change the delete option for Ephemeral OS Disk.
        /// Possible values include: &#39;Delete&#39;, &#39;Detach&#39;</param>
        public VirtualMachineScaleSetOSDisk(string createOption, string name = default(string), CachingTypes? caching = default(CachingTypes?), bool? writeAcceleratorEnabled = default(bool?), DiffDiskSettings diffDiskSettings = default(DiffDiskSettings), int? diskSizeGb = default(int?), OperatingSystemTypes? osType = default(OperatingSystemTypes?), VirtualHardDisk image = default(VirtualHardDisk), System.Collections.Generic.IList<string> vhdContainers = default(System.Collections.Generic.IList<string>), VirtualMachineScaleSetManagedDiskParameters managedDisk = default(VirtualMachineScaleSetManagedDiskParameters), string deleteOption = default(string))

        {
            this.Name = name;
            this.Caching = caching;
            this.WriteAcceleratorEnabled = writeAcceleratorEnabled;
            this.CreateOption = createOption;
            this.DiffDiskSettings = diffDiskSettings;
            this.DiskSizeGb = diskSizeGb;
            this.OSType = osType;
            this.Image = image;
            this.VhdContainers = vhdContainers;
            this.ManagedDisk = managedDisk;
            this.DeleteOption = deleteOption;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the disk name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets or sets specifies the caching requirements. Possible values are:
        /// **None,** **ReadOnly,** **ReadWrite.** The default values are: **None for
        /// Standard storage. ReadOnly for Premium storage.** Possible values include: &#39;None&#39;, &#39;ReadOnly&#39;, &#39;ReadWrite&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "caching")]
        public CachingTypes? Caching {get; set; }

        /// <summary>
        /// Gets or sets specifies whether writeAccelerator should be enabled or
        /// disabled on the disk.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "writeAcceleratorEnabled")]
        public bool? WriteAcceleratorEnabled {get; set; }

        /// <summary>
        /// Gets or sets specifies how the virtual machines in the scale set should be
        /// created. The only allowed value is: **FromImage.** This value is used when
        /// you are using an image to create the virtual machine. If you are using a
        /// platform image, you also use the imageReference element described above. If
        /// you are using a marketplace image, you  also use the plan element
        /// previously described. Possible values include: &#39;FromImage&#39;, &#39;Empty&#39;, &#39;Attach&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "createOption")]
        public string CreateOption {get; set; }

        /// <summary>
        /// Gets or sets specifies the ephemeral disk Settings for the operating system
        /// disk used by the virtual machine scale set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "diffDiskSettings")]
        public DiffDiskSettings DiffDiskSettings {get; set; }

        /// <summary>
        /// Gets or sets specifies the size of an empty data disk in gigabytes. This
        /// element can be used to overwrite the size of the disk in a virtual machine
        /// image. The property &#39;diskSizeGB&#39; is the number of bytes x 1024^3 for the
        /// disk and the value cannot be larger than 1023.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "diskSizeGB")]
        public int? DiskSizeGb {get; set; }

        /// <summary>
        /// Gets or sets this property allows you to specify the type of the OS that is
        /// included in the disk if creating a VM from user-image or a specialized VHD.
        /// Possible values are: **Windows,** **Linux.** Possible values include: &#39;Windows&#39;, &#39;Linux&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "osType")]
        public OperatingSystemTypes? OSType {get; set; }

        /// <summary>
        /// Gets or sets specifies information about the unmanaged user image to base
        /// the scale set on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "image")]
        public VirtualHardDisk Image {get; set; }

        /// <summary>
        /// Gets or sets specifies the container urls that are used to store operating
        /// system disks for the scale set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vhdContainers")]
        public System.Collections.Generic.IList<string> VhdContainers {get; set; }

        /// <summary>
        /// Gets or sets the managed disk parameters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "managedDisk")]
        public VirtualMachineScaleSetManagedDiskParameters ManagedDisk {get; set; }

        /// <summary>
        /// Gets or sets specifies whether OS Disk should be deleted or detached upon
        /// VMSS Flex deletion (This feature is available for VMSS with Flexible
        /// OrchestrationMode only). &lt;br&gt;&lt;br&gt; Possible values: &lt;br&gt;&lt;br&gt; **Delete** If
        /// this value is used, the OS disk is deleted when VMSS Flex VM is
        /// deleted.&lt;br&gt;&lt;br&gt; **Detach** If this value is used, the OS disk is retained
        /// after VMSS Flex VM is deleted. &lt;br&gt;&lt;br&gt; The default value is set to
        /// **Delete**. For an Ephemeral OS Disk, the default value is set to
        /// **Delete**. User cannot change the delete option for Ephemeral OS Disk. Possible values include: &#39;Delete&#39;, &#39;Detach&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "deleteOption")]
        public string DeleteOption {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.CreateOption == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "CreateOption");
            }









        }
    }
}