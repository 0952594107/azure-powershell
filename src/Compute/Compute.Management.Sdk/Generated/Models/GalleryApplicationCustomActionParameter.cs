// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Compute.Models
{
    using System.Linq;

    /// <summary>
    /// The definition of a parameter that can be passed to a custom action of a
    /// Gallery Application Version.
    /// </summary>
    public partial class GalleryApplicationCustomActionParameter
    {
        /// <summary>
        /// Initializes a new instance of the GalleryApplicationCustomActionParameter class.
        /// </summary>
        public GalleryApplicationCustomActionParameter()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the GalleryApplicationCustomActionParameter class.
        /// </summary>

        /// <param name="name">The name of the custom action.  Must be unique within the Gallery
        /// Application Version.
        /// </param>

        /// <param name="required">Indicates whether this parameter must be passed when running the custom
        /// action.
        /// </param>

        /// <param name="type">Specifies the type of the custom action parameter. Possible values are:
        /// String, ConfigurationDataBlob or LogOutputBlob
        /// Possible values include: &#39;String&#39;, &#39;ConfigurationDataBlob&#39;, &#39;LogOutputBlob&#39;</param>

        /// <param name="defaultValue">The default value of the parameter.  Only applies to string types
        /// </param>

        /// <param name="description">A description to help users understand what this parameter means
        /// </param>
        public GalleryApplicationCustomActionParameter(string name, bool? required = default(bool?), GalleryApplicationCustomActionParameterType? type = default(GalleryApplicationCustomActionParameterType?), string defaultValue = default(string), string description = default(string))

        {
            this.Name = name;
            this.Required = required;
            this.Type = type;
            this.DefaultValue = defaultValue;
            this.Description = description;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the name of the custom action.  Must be unique within the
        /// Gallery Application Version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets or sets indicates whether this parameter must be passed when running
        /// the custom action.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "required")]
        public bool? Required {get; set; }

        /// <summary>
        /// Gets or sets specifies the type of the custom action parameter. Possible
        /// values are: String, ConfigurationDataBlob or LogOutputBlob Possible values include: &#39;String&#39;, &#39;ConfigurationDataBlob&#39;, &#39;LogOutputBlob&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public GalleryApplicationCustomActionParameterType? Type {get; set; }

        /// <summary>
        /// Gets or sets the default value of the parameter.  Only applies to string
        /// types
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "defaultValue")]
        public string DefaultValue {get; set; }

        /// <summary>
        /// Gets or sets a description to help users understand what this parameter
        /// means
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "description")]
        public string Description {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Name == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Name");
            }




        }
    }
}