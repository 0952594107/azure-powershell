// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Compute.Models
{
    using System.Linq;

    public partial class EncryptionSetProperties
    {
        /// <summary>
        /// Initializes a new instance of the EncryptionSetProperties class.
        /// </summary>
        public EncryptionSetProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EncryptionSetProperties class.
        /// </summary>

        /// <param name="encryptionType">The type of key used to encrypt the data of the disk.
        /// Possible values include: &#39;EncryptionAtRestWithCustomerKey&#39;,
        /// &#39;EncryptionAtRestWithPlatformAndCustomerKeys&#39;,
        /// &#39;ConfidentialVmEncryptedWithCustomerKey&#39;</param>

        /// <param name="activeKey">The key vault key which is currently used by this disk encryption set.
        /// </param>

        /// <param name="previousKeys">A readonly collection of key vault keys previously used by this disk
        /// encryption set while a key rotation is in progress. It will be empty if
        /// there is no ongoing key rotation.
        /// </param>

        /// <param name="provisioningState">The disk encryption set provisioning state.
        /// </param>

        /// <param name="rotationToLatestKeyVersionEnabled">Set this flag to true to enable auto-updating of this disk encryption set
        /// to the latest key version.
        /// </param>

        /// <param name="lastKeyRotationTimestamp">The time when the active key of this disk encryption set was updated.
        /// </param>

        /// <param name="autoKeyRotationError">The error that was encountered during auto-key rotation. If an error is
        /// present, then auto-key rotation will not be attempted until the error on
        /// this disk encryption set is fixed.
        /// </param>

        /// <param name="federatedClientId">Multi-tenant application client id to access key vault in a different
        /// tenant. Setting the value to &#39;None&#39; will clear the property.
        /// </param>
        public EncryptionSetProperties(string encryptionType = default(string), KeyForDiskEncryptionSet activeKey = default(KeyForDiskEncryptionSet), System.Collections.Generic.IList<KeyForDiskEncryptionSet> previousKeys = default(System.Collections.Generic.IList<KeyForDiskEncryptionSet>), string provisioningState = default(string), bool? rotationToLatestKeyVersionEnabled = default(bool?), System.DateTime? lastKeyRotationTimestamp = default(System.DateTime?), ApiError autoKeyRotationError = default(ApiError), string federatedClientId = default(string))

        {
            this.EncryptionType = encryptionType;
            this.ActiveKey = activeKey;
            this.PreviousKeys = previousKeys;
            this.ProvisioningState = provisioningState;
            this.RotationToLatestKeyVersionEnabled = rotationToLatestKeyVersionEnabled;
            this.LastKeyRotationTimestamp = lastKeyRotationTimestamp;
            this.AutoKeyRotationError = autoKeyRotationError;
            this.FederatedClientId = federatedClientId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the type of key used to encrypt the data of the disk. Possible values include: &#39;EncryptionAtRestWithCustomerKey&#39;, &#39;EncryptionAtRestWithPlatformAndCustomerKeys&#39;, &#39;ConfidentialVmEncryptedWithCustomerKey&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "encryptionType")]
        public string EncryptionType {get; set; }

        /// <summary>
        /// Gets or sets the key vault key which is currently used by this disk
        /// encryption set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "activeKey")]
        public KeyForDiskEncryptionSet ActiveKey {get; set; }

        /// <summary>
        /// Gets a readonly collection of key vault keys previously used by this disk
        /// encryption set while a key rotation is in progress. It will be empty if
        /// there is no ongoing key rotation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "previousKeys")]
        public System.Collections.Generic.IList<KeyForDiskEncryptionSet> PreviousKeys {get; private set; }

        /// <summary>
        /// Gets the disk encryption set provisioning state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets set this flag to true to enable auto-updating of this disk
        /// encryption set to the latest key version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "rotationToLatestKeyVersionEnabled")]
        public bool? RotationToLatestKeyVersionEnabled {get; set; }

        /// <summary>
        /// Gets the time when the active key of this disk encryption set was updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastKeyRotationTimestamp")]
        public System.DateTime? LastKeyRotationTimestamp {get; private set; }

        /// <summary>
        /// Gets the error that was encountered during auto-key rotation. If an error
        /// is present, then auto-key rotation will not be attempted until the error on
        /// this disk encryption set is fixed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "autoKeyRotationError")]
        public ApiError AutoKeyRotationError {get; private set; }

        /// <summary>
        /// Gets or sets multi-tenant application client id to access key vault in a
        /// different tenant. Setting the value to &#39;None&#39; will clear the property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "federatedClientId")]
        public string FederatedClientId {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {

            if (this.ActiveKey != null)
            {
                this.ActiveKey.Validate();
            }
            if (this.PreviousKeys != null)
            {
                foreach (var element in this.PreviousKeys)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }



        }
    }
}