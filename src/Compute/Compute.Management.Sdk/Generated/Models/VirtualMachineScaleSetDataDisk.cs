// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Compute.Models
{
    using System.Linq;

    /// <summary>
    /// Describes a virtual machine scale set data disk.
    /// </summary>
    public partial class VirtualMachineScaleSetDataDisk
    {
        /// <summary>
        /// Initializes a new instance of the VirtualMachineScaleSetDataDisk class.
        /// </summary>
        public VirtualMachineScaleSetDataDisk()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VirtualMachineScaleSetDataDisk class.
        /// </summary>

        /// <param name="name">The disk name.
        /// </param>

        /// <param name="lun">Specifies the logical unit number of the data disk. This value is used to
        /// identify data disks within the VM and therefore must be unique for each
        /// data disk attached to a VM.
        /// </param>

        /// <param name="caching">Specifies the caching requirements. Possible values are: **None,**
        /// **ReadOnly,** **ReadWrite.** The default values are: **None for Standard
        /// storage. ReadOnly for Premium storage.**
        /// Possible values include: &#39;None&#39;, &#39;ReadOnly&#39;, &#39;ReadWrite&#39;</param>

        /// <param name="writeAcceleratorEnabled">Specifies whether writeAccelerator should be enabled or disabled on the
        /// disk.
        /// </param>

        /// <param name="createOption">The create option.
        /// Possible values include: &#39;FromImage&#39;, &#39;Empty&#39;, &#39;Attach&#39;</param>

        /// <param name="diskSizeGb">Specifies the size of an empty data disk in gigabytes. This element can be
        /// used to overwrite the size of the disk in a virtual machine image. The
        /// property diskSizeGB is the number of bytes x 1024^3 for the disk and the
        /// value cannot be larger than 1023.
        /// </param>

        /// <param name="managedDisk">The managed disk parameters.
        /// </param>

        /// <param name="diskIopsReadWrite">Specifies the Read-Write IOPS for the managed disk. Should be used only
        /// when StorageAccountType is UltraSSD_LRS. If not specified, a default value
        /// would be assigned based on diskSizeGB.
        /// </param>

        /// <param name="diskMBpsReadWrite">Specifies the bandwidth in MB per second for the managed disk. Should be
        /// used only when StorageAccountType is UltraSSD_LRS. If not specified, a
        /// default value would be assigned based on diskSizeGB.
        /// </param>

        /// <param name="deleteOption">Specifies whether data disk should be deleted or detached upon VMSS Flex
        /// deletion (This feature is available for VMSS with Flexible
        /// OrchestrationMode only).&lt;br&gt;&lt;br&gt; Possible values: &lt;br&gt;&lt;br&gt; **Delete** If
        /// this value is used, the data disk is deleted when the VMSS Flex VM is
        /// deleted.&lt;br&gt;&lt;br&gt; **Detach** If this value is used, the data disk is
        /// retained after VMSS Flex VM is deleted.&lt;br&gt;&lt;br&gt; The default value is set to
        /// **Delete**.
        /// Possible values include: &#39;Delete&#39;, &#39;Detach&#39;</param>
        public VirtualMachineScaleSetDataDisk(int lun, string createOption, string name = default(string), CachingTypes? caching = default(CachingTypes?), bool? writeAcceleratorEnabled = default(bool?), int? diskSizeGb = default(int?), VirtualMachineScaleSetManagedDiskParameters managedDisk = default(VirtualMachineScaleSetManagedDiskParameters), long? diskIopsReadWrite = default(long?), long? diskMBpsReadWrite = default(long?), string deleteOption = default(string))

        {
            this.Name = name;
            this.Lun = lun;
            this.Caching = caching;
            this.WriteAcceleratorEnabled = writeAcceleratorEnabled;
            this.CreateOption = createOption;
            this.DiskSizeGb = diskSizeGb;
            this.ManagedDisk = managedDisk;
            this.DiskIopsReadWrite = diskIopsReadWrite;
            this.DiskMBpsReadWrite = diskMBpsReadWrite;
            this.DeleteOption = deleteOption;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the disk name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets or sets specifies the logical unit number of the data disk. This value
        /// is used to identify data disks within the VM and therefore must be unique
        /// for each data disk attached to a VM.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lun")]
        public int Lun {get; set; }

        /// <summary>
        /// Gets or sets specifies the caching requirements. Possible values are:
        /// **None,** **ReadOnly,** **ReadWrite.** The default values are: **None for
        /// Standard storage. ReadOnly for Premium storage.** Possible values include: &#39;None&#39;, &#39;ReadOnly&#39;, &#39;ReadWrite&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "caching")]
        public CachingTypes? Caching {get; set; }

        /// <summary>
        /// Gets or sets specifies whether writeAccelerator should be enabled or
        /// disabled on the disk.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "writeAcceleratorEnabled")]
        public bool? WriteAcceleratorEnabled {get; set; }

        /// <summary>
        /// Gets or sets the create option. Possible values include: &#39;FromImage&#39;, &#39;Empty&#39;, &#39;Attach&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "createOption")]
        public string CreateOption {get; set; }

        /// <summary>
        /// Gets or sets specifies the size of an empty data disk in gigabytes. This
        /// element can be used to overwrite the size of the disk in a virtual machine
        /// image. The property diskSizeGB is the number of bytes x 1024^3 for the disk
        /// and the value cannot be larger than 1023.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "diskSizeGB")]
        public int? DiskSizeGb {get; set; }

        /// <summary>
        /// Gets or sets the managed disk parameters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "managedDisk")]
        public VirtualMachineScaleSetManagedDiskParameters ManagedDisk {get; set; }

        /// <summary>
        /// Gets or sets specifies the Read-Write IOPS for the managed disk. Should be
        /// used only when StorageAccountType is UltraSSD_LRS. If not specified, a
        /// default value would be assigned based on diskSizeGB.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "diskIOPSReadWrite")]
        public long? DiskIopsReadWrite {get; set; }

        /// <summary>
        /// Gets or sets specifies the bandwidth in MB per second for the managed disk.
        /// Should be used only when StorageAccountType is UltraSSD_LRS. If not
        /// specified, a default value would be assigned based on diskSizeGB.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "diskMBpsReadWrite")]
        public long? DiskMBpsReadWrite {get; set; }

        /// <summary>
        /// Gets or sets specifies whether data disk should be deleted or detached upon
        /// VMSS Flex deletion (This feature is available for VMSS with Flexible
        /// OrchestrationMode only).&lt;br&gt;&lt;br&gt; Possible values: &lt;br&gt;&lt;br&gt; **Delete** If
        /// this value is used, the data disk is deleted when the VMSS Flex VM is
        /// deleted.&lt;br&gt;&lt;br&gt; **Detach** If this value is used, the data disk is
        /// retained after VMSS Flex VM is deleted.&lt;br&gt;&lt;br&gt; The default value is set to
        /// **Delete**. Possible values include: &#39;Delete&#39;, &#39;Detach&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "deleteOption")]
        public string DeleteOption {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.CreateOption == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "CreateOption");
            }





        }
    }
}