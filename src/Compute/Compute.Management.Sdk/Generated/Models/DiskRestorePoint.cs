// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Compute.Models
{
    using System.Linq;

    /// <summary>
    /// Properties of disk restore point
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class DiskRestorePoint : ProxyOnlyResource
    {
        /// <summary>
        /// Initializes a new instance of the DiskRestorePoint class.
        /// </summary>
        public DiskRestorePoint()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DiskRestorePoint class.
        /// </summary>

        /// <param name="id">Resource Id
        /// </param>

        /// <param name="name">Resource name
        /// </param>

        /// <param name="type">Resource type
        /// </param>

        /// <param name="supportedCapabilities">List of supported capabilities for the image from which the OS disk was
        /// created.
        /// </param>

        /// <param name="encryption">Encryption property can be used to encrypt data at rest with customer
        /// managed keys or platform managed keys.
        /// </param>

        /// <param name="timeCreated">The timestamp of restorePoint creation
        /// </param>

        /// <param name="sourceResourceId">arm id of source disk or source disk restore point.
        /// </param>

        /// <param name="osType">The Operating System type.
        /// Possible values include: &#39;Windows&#39;, &#39;Linux&#39;</param>

        /// <param name="hyperVGeneration">The hypervisor generation of the Virtual Machine. Applicable to OS disks
        /// only.
        /// Possible values include: &#39;V1&#39;, &#39;V2&#39;</param>

        /// <param name="purchasePlan">Purchase plan information for the the image from which the OS disk was
        /// created.
        /// </param>

        /// <param name="familyId">id of the backing snapshot&#39;s MIS family
        /// </param>

        /// <param name="sourceUniqueId">unique incarnation id of the source disk
        /// </param>

        /// <param name="supportsHibernation">Indicates the OS on a disk supports hibernation.
        /// </param>

        /// <param name="networkAccessPolicy">Policy for accessing the disk via network.
        /// Possible values include: &#39;AllowAll&#39;, &#39;AllowPrivate&#39;, &#39;DenyAll&#39;</param>

        /// <param name="publicNetworkAccess">Policy for controlling export on the disk.
        /// Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;</param>

        /// <param name="diskAccessId">ARM id of the DiskAccess resource for using private endpoints on disks.
        /// </param>

        /// <param name="completionPercent">Percentage complete for the background copy of disk restore point when
        /// source resource is from a different region.
        /// </param>

        /// <param name="replicationState">Replication state of disk restore point when source resource is from a
        /// different region.
        /// </param>

        /// <param name="sourceResourceLocation">Location of source disk or source disk restore point when source resource
        /// is from a different region.
        /// </param>

        /// <param name="securityProfile">Contains the security related information for the resource.
        /// </param>
        public DiskRestorePoint(string id = default(string), string name = default(string), string type = default(string), SupportedCapabilities supportedCapabilities = default(SupportedCapabilities), Encryption encryption = default(Encryption), System.DateTime? timeCreated = default(System.DateTime?), string sourceResourceId = default(string), OperatingSystemTypes? osType = default(OperatingSystemTypes?), string hyperVGeneration = default(string), PurchasePlanAutoGenerated purchasePlan = default(PurchasePlanAutoGenerated), string familyId = default(string), string sourceUniqueId = default(string), bool? supportsHibernation = default(bool?), string networkAccessPolicy = default(string), string publicNetworkAccess = default(string), string diskAccessId = default(string), double? completionPercent = default(double?), string replicationState = default(string), string sourceResourceLocation = default(string), DiskSecurityProfile securityProfile = default(DiskSecurityProfile))

        : base(id, name, type)
        {
            this.SupportedCapabilities = supportedCapabilities;
            this.Encryption = encryption;
            this.TimeCreated = timeCreated;
            this.SourceResourceId = sourceResourceId;
            this.OSType = osType;
            this.HyperVGeneration = hyperVGeneration;
            this.PurchasePlan = purchasePlan;
            this.FamilyId = familyId;
            this.SourceUniqueId = sourceUniqueId;
            this.SupportsHibernation = supportsHibernation;
            this.NetworkAccessPolicy = networkAccessPolicy;
            this.PublicNetworkAccess = publicNetworkAccess;
            this.DiskAccessId = diskAccessId;
            this.CompletionPercent = completionPercent;
            this.ReplicationState = replicationState;
            this.SourceResourceLocation = sourceResourceLocation;
            this.SecurityProfile = securityProfile;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets list of supported capabilities for the image from which the OS
        /// disk was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.supportedCapabilities")]
        public SupportedCapabilities SupportedCapabilities {get; set; }

        /// <summary>
        /// Gets encryption property can be used to encrypt data at rest with customer
        /// managed keys or platform managed keys.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.encryption")]
        public Encryption Encryption {get; private set; }

        /// <summary>
        /// Gets the timestamp of restorePoint creation
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.timeCreated")]
        public System.DateTime? TimeCreated {get; private set; }

        /// <summary>
        /// Gets arm id of source disk or source disk restore point.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.sourceResourceId")]
        public string SourceResourceId {get; private set; }

        /// <summary>
        /// Gets the Operating System type. Possible values include: &#39;Windows&#39;, &#39;Linux&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.osType")]
        public OperatingSystemTypes? OSType {get; private set; }

        /// <summary>
        /// Gets or sets the hypervisor generation of the Virtual Machine. Applicable
        /// to OS disks only. Possible values include: &#39;V1&#39;, &#39;V2&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.hyperVGeneration")]
        public string HyperVGeneration {get; set; }

        /// <summary>
        /// Gets or sets purchase plan information for the the image from which the OS
        /// disk was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.purchasePlan")]
        public PurchasePlanAutoGenerated PurchasePlan {get; set; }

        /// <summary>
        /// Gets id of the backing snapshot&#39;s MIS family
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.familyId")]
        public string FamilyId {get; private set; }

        /// <summary>
        /// Gets unique incarnation id of the source disk
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.sourceUniqueId")]
        public string SourceUniqueId {get; private set; }

        /// <summary>
        /// Gets or sets indicates the OS on a disk supports hibernation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.supportsHibernation")]
        public bool? SupportsHibernation {get; set; }

        /// <summary>
        /// Gets or sets policy for accessing the disk via network. Possible values include: &#39;AllowAll&#39;, &#39;AllowPrivate&#39;, &#39;DenyAll&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.networkAccessPolicy")]
        public string NetworkAccessPolicy {get; set; }

        /// <summary>
        /// Gets or sets policy for controlling export on the disk. Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.publicNetworkAccess")]
        public string PublicNetworkAccess {get; set; }

        /// <summary>
        /// Gets or sets aRM id of the DiskAccess resource for using private endpoints
        /// on disks.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.diskAccessId")]
        public string DiskAccessId {get; set; }

        /// <summary>
        /// Gets or sets percentage complete for the background copy of disk restore
        /// point when source resource is from a different region.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.completionPercent")]
        public double? CompletionPercent {get; set; }

        /// <summary>
        /// Gets replication state of disk restore point when source resource is from a
        /// different region.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.replicationState")]
        public string ReplicationState {get; private set; }

        /// <summary>
        /// Gets location of source disk or source disk restore point when source
        /// resource is from a different region.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.sourceResourceLocation")]
        public string SourceResourceLocation {get; private set; }

        /// <summary>
        /// Gets or sets contains the security related information for the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.securityProfile")]
        public DiskSecurityProfile SecurityProfile {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {





            if (this.PurchasePlan != null)
            {
                this.PurchasePlan.Validate();
            }








        }
    }
}