// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Compute.Models
{
    using System.Linq;

    /// <summary>
    /// Describes the data disk to be attached.
    /// </summary>
    public partial class DataDisksToAttach
    {
        /// <summary>
        /// Initializes a new instance of the DataDisksToAttach class.
        /// </summary>
        public DataDisksToAttach()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DataDisksToAttach class.
        /// </summary>

        /// <param name="diskId">ID of the managed data disk.
        /// </param>

        /// <param name="lun">The logical unit number of the data disk. This value is used to identify
        /// data disks within the VM and therefore must be unique for each data disk
        /// attached to a VM. If not specified, lun would be auto assigned.
        /// </param>
        public DataDisksToAttach(string diskId, int? lun = default(int?))

        {
            this.DiskId = diskId;
            this.Lun = lun;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets iD of the managed data disk.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "diskId")]
        public string DiskId {get; set; }

        /// <summary>
        /// Gets or sets the logical unit number of the data disk. This value is used
        /// to identify data disks within the VM and therefore must be unique for each
        /// data disk attached to a VM. If not specified, lun would be auto assigned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lun")]
        public int? Lun {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.DiskId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "DiskId");
            }

        }
    }
}