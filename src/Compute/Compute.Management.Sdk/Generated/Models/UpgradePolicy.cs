// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Compute.Models
{
    using System.Linq;

    /// <summary>
    /// Describes an upgrade policy - automatic, manual, or rolling.
    /// </summary>
    public partial class UpgradePolicy
    {
        /// <summary>
        /// Initializes a new instance of the UpgradePolicy class.
        /// </summary>
        public UpgradePolicy()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UpgradePolicy class.
        /// </summary>

        /// <param name="mode">Specifies the mode of an upgrade to virtual machines in the scale set.&lt;br
        /// /&gt;&lt;br /&gt; Possible values are:&lt;br /&gt;&lt;br /&gt; **Manual** - You  control the
        /// application of updates to virtual machines in the scale set. You do this by
        /// using the manualUpgrade action.&lt;br /&gt;&lt;br /&gt; **Automatic** - All virtual
        /// machines in the scale set are  automatically updated at the same time.
        /// Possible values include: &#39;Automatic&#39;, &#39;Manual&#39;, &#39;Rolling&#39;</param>

        /// <param name="rollingUpgradePolicy">The configuration parameters used while performing a rolling upgrade.
        /// </param>

        /// <param name="automaticOSUpgradePolicy">Configuration parameters used for performing automatic OS Upgrade.
        /// </param>
        public UpgradePolicy(UpgradeMode? mode = default(UpgradeMode?), RollingUpgradePolicy rollingUpgradePolicy = default(RollingUpgradePolicy), AutomaticOSUpgradePolicy automaticOSUpgradePolicy = default(AutomaticOSUpgradePolicy))

        {
            this.Mode = mode;
            this.RollingUpgradePolicy = rollingUpgradePolicy;
            this.AutomaticOSUpgradePolicy = automaticOSUpgradePolicy;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets specifies the mode of an upgrade to virtual machines in the
        /// scale set.&lt;br /&gt;&lt;br /&gt; Possible values are:&lt;br /&gt;&lt;br /&gt; **Manual** - You 
        /// control the application of updates to virtual machines in the scale set.
        /// You do this by using the manualUpgrade action.&lt;br /&gt;&lt;br /&gt; **Automatic** -
        /// All virtual machines in the scale set are  automatically updated at the
        /// same time. Possible values include: &#39;Automatic&#39;, &#39;Manual&#39;, &#39;Rolling&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "mode")]
        public UpgradeMode? Mode {get; set; }

        /// <summary>
        /// Gets or sets the configuration parameters used while performing a rolling
        /// upgrade.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "rollingUpgradePolicy")]
        public RollingUpgradePolicy RollingUpgradePolicy {get; set; }

        /// <summary>
        /// Gets or sets configuration parameters used for performing automatic OS
        /// Upgrade.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "automaticOSUpgradePolicy")]
        public AutomaticOSUpgradePolicy AutomaticOSUpgradePolicy {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {

            if (this.RollingUpgradePolicy != null)
            {
                this.RollingUpgradePolicy.Validate();
            }

        }
    }
}