// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Compute.Models
{
    using System.Linq;

    /// <summary>
    /// Disk resource properties.
    /// </summary>
    public partial class DiskProperties
    {
        /// <summary>
        /// Initializes a new instance of the DiskProperties class.
        /// </summary>
        public DiskProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DiskProperties class.
        /// </summary>

        /// <param name="timeCreated">The time when the disk was created.
        /// </param>

        /// <param name="osType">The Operating System type.
        /// Possible values include: &#39;Windows&#39;, &#39;Linux&#39;</param>

        /// <param name="hyperVGeneration">The hypervisor generation of the Virtual Machine. Applicable to OS disks
        /// only.
        /// Possible values include: &#39;V1&#39;, &#39;V2&#39;</param>

        /// <param name="purchasePlan">Purchase plan information for the the image from which the OS disk was
        /// created. E.g. - {name: 2019-Datacenter, publisher: MicrosoftWindowsServer,
        /// product: WindowsServer}
        /// </param>

        /// <param name="supportedCapabilities">List of supported capabilities for the image from which the OS disk was
        /// created.
        /// </param>

        /// <param name="creationData">Disk source information. CreationData information cannot be changed after
        /// the disk has been created.
        /// </param>

        /// <param name="diskSizeGb">If creationData.createOption is Empty, this field is mandatory and it
        /// indicates the size of the disk to create. If this field is present for
        /// updates or creation with other options, it indicates a resize. Resizes are
        /// only allowed if the disk is not attached to a running VM, and can only
        /// increase the disk&#39;s size.
        /// </param>

        /// <param name="diskSizeBytes">The size of the disk in bytes. This field is read only.
        /// </param>

        /// <param name="uniqueId">Unique Guid identifying the resource.
        /// </param>

        /// <param name="encryptionSettingsCollection">Encryption settings collection used for Azure Disk Encryption, can contain
        /// multiple encryption settings per disk or snapshot.
        /// </param>

        /// <param name="provisioningState">The disk provisioning state.
        /// </param>

        /// <param name="diskIopsReadWrite">The number of IOPS allowed for this disk; only settable for UltraSSD disks.
        /// One operation can transfer between 4k and 256k bytes.
        /// </param>

        /// <param name="diskMBpsReadWrite">The bandwidth allowed for this disk; only settable for UltraSSD disks. MBps
        /// means millions of bytes per second - MB here uses the ISO notation, of
        /// powers of 10.
        /// </param>

        /// <param name="diskIopsReadOnly">The total number of IOPS that will be allowed across all VMs mounting the
        /// shared disk as ReadOnly. One operation can transfer between 4k and 256k
        /// bytes.
        /// </param>

        /// <param name="diskMBpsReadOnly">The total throughput (MBps) that will be allowed across all VMs mounting
        /// the shared disk as ReadOnly. MBps means millions of bytes per second - MB
        /// here uses the ISO notation, of powers of 10.
        /// </param>

        /// <param name="diskState">The state of the disk.
        /// Possible values include: &#39;Unattached&#39;, &#39;Attached&#39;, &#39;Reserved&#39;, &#39;Frozen&#39;,
        /// &#39;ActiveSAS&#39;, &#39;ActiveSASFrozen&#39;, &#39;ReadyToUpload&#39;, &#39;ActiveUpload&#39;</param>

        /// <param name="encryption">Encryption property can be used to encrypt data at rest with customer
        /// managed keys or platform managed keys.
        /// </param>

        /// <param name="maxShares">The maximum number of VMs that can attach to the disk at the same time.
        /// Value greater than one indicates a disk that can be mounted on multiple VMs
        /// at the same time.
        /// </param>

        /// <param name="shareInfo">Details of the list of all VMs that have the disk attached. maxShares
        /// should be set to a value greater than one for disks to allow attaching them
        /// to multiple VMs.
        /// </param>

        /// <param name="networkAccessPolicy">Policy for accessing the disk via network.
        /// Possible values include: &#39;AllowAll&#39;, &#39;AllowPrivate&#39;, &#39;DenyAll&#39;</param>

        /// <param name="diskAccessId">ARM id of the DiskAccess resource for using private endpoints on disks.
        /// </param>

        /// <param name="burstingEnabledTime">Latest time when bursting was last enabled on a disk.
        /// </param>

        /// <param name="tier">Performance tier of the disk (e.g, P4, S10) as described here:
        /// https://azure.microsoft.com/en-us/pricing/details/managed-disks/. Does not
        /// apply to Ultra disks.
        /// </param>

        /// <param name="burstingEnabled">Set to true to enable bursting beyond the provisioned performance target of
        /// the disk. Bursting is disabled by default. Does not apply to Ultra disks.
        /// </param>

        /// <param name="propertyUpdatesInProgress">Properties of the disk for which update is pending.
        /// </param>

        /// <param name="supportsHibernation">Indicates the OS on a disk supports hibernation.
        /// </param>

        /// <param name="securityProfile">Contains the security related information for the resource.
        /// </param>

        /// <param name="completionPercent">Percentage complete for the background copy when a resource is created via
        /// the CopyStart operation.
        /// </param>

        /// <param name="publicNetworkAccess">Policy for controlling export on the disk.
        /// Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;</param>

        /// <param name="dataAccessAuthMode">Additional authentication requirements when exporting or uploading to a
        /// disk or snapshot.
        /// Possible values include: &#39;AzureActiveDirectory&#39;, &#39;None&#39;</param>

        /// <param name="optimizedForFrequentAttach">Setting this property to true improves reliability and performance of data
        /// disks that are frequently (more than 5 times a day) by detached from one
        /// virtual machine and attached to another. This property should not be set
        /// for disks that are not detached and attached frequently as it causes the
        /// disks to not align with the fault domain of the virtual machine.
        /// </param>

        /// <param name="lastOwnershipUpdateTime">The UTC time when the ownership state of the disk was last changed i.e.,
        /// the time the disk was last attached or detached from a VM or the time when
        /// the VM to which the disk was attached was deallocated or started.
        /// </param>
        public DiskProperties(CreationData creationData, System.DateTime? timeCreated = default(System.DateTime?), OperatingSystemTypes? osType = default(OperatingSystemTypes?), string hyperVGeneration = default(string), PurchasePlanAutoGenerated purchasePlan = default(PurchasePlanAutoGenerated), SupportedCapabilities supportedCapabilities = default(SupportedCapabilities), int? diskSizeGb = default(int?), long? diskSizeBytes = default(long?), string uniqueId = default(string), EncryptionSettingsCollection encryptionSettingsCollection = default(EncryptionSettingsCollection), string provisioningState = default(string), long? diskIopsReadWrite = default(long?), long? diskMBpsReadWrite = default(long?), long? diskIopsReadOnly = default(long?), long? diskMBpsReadOnly = default(long?), string diskState = default(string), Encryption encryption = default(Encryption), int? maxShares = default(int?), System.Collections.Generic.IList<ShareInfoElement> shareInfo = default(System.Collections.Generic.IList<ShareInfoElement>), string networkAccessPolicy = default(string), string diskAccessId = default(string), System.DateTime? burstingEnabledTime = default(System.DateTime?), string tier = default(string), bool? burstingEnabled = default(bool?), PropertyUpdatesInProgress propertyUpdatesInProgress = default(PropertyUpdatesInProgress), bool? supportsHibernation = default(bool?), DiskSecurityProfile securityProfile = default(DiskSecurityProfile), double? completionPercent = default(double?), string publicNetworkAccess = default(string), string dataAccessAuthMode = default(string), bool? optimizedForFrequentAttach = default(bool?), System.DateTime? lastOwnershipUpdateTime = default(System.DateTime?))

        {
            this.TimeCreated = timeCreated;
            this.OSType = osType;
            this.HyperVGeneration = hyperVGeneration;
            this.PurchasePlan = purchasePlan;
            this.SupportedCapabilities = supportedCapabilities;
            this.CreationData = creationData;
            this.DiskSizeGb = diskSizeGb;
            this.DiskSizeBytes = diskSizeBytes;
            this.UniqueId = uniqueId;
            this.EncryptionSettingsCollection = encryptionSettingsCollection;
            this.ProvisioningState = provisioningState;
            this.DiskIopsReadWrite = diskIopsReadWrite;
            this.DiskMBpsReadWrite = diskMBpsReadWrite;
            this.DiskIopsReadOnly = diskIopsReadOnly;
            this.DiskMBpsReadOnly = diskMBpsReadOnly;
            this.DiskState = diskState;
            this.Encryption = encryption;
            this.MaxShares = maxShares;
            this.ShareInfo = shareInfo;
            this.NetworkAccessPolicy = networkAccessPolicy;
            this.DiskAccessId = diskAccessId;
            this.BurstingEnabledTime = burstingEnabledTime;
            this.Tier = tier;
            this.BurstingEnabled = burstingEnabled;
            this.PropertyUpdatesInProgress = propertyUpdatesInProgress;
            this.SupportsHibernation = supportsHibernation;
            this.SecurityProfile = securityProfile;
            this.CompletionPercent = completionPercent;
            this.PublicNetworkAccess = publicNetworkAccess;
            this.DataAccessAuthMode = dataAccessAuthMode;
            this.OptimizedForFrequentAttach = optimizedForFrequentAttach;
            this.LastOwnershipUpdateTime = lastOwnershipUpdateTime;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the time when the disk was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "timeCreated")]
        public System.DateTime? TimeCreated {get; private set; }

        /// <summary>
        /// Gets or sets the Operating System type. Possible values include: &#39;Windows&#39;, &#39;Linux&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "osType")]
        public OperatingSystemTypes? OSType {get; set; }

        /// <summary>
        /// Gets or sets the hypervisor generation of the Virtual Machine. Applicable
        /// to OS disks only. Possible values include: &#39;V1&#39;, &#39;V2&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "hyperVGeneration")]
        public string HyperVGeneration {get; set; }

        /// <summary>
        /// Gets or sets purchase plan information for the the image from which the OS
        /// disk was created. E.g. - {name: 2019-Datacenter, publisher:
        /// MicrosoftWindowsServer, product: WindowsServer}
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "purchasePlan")]
        public PurchasePlanAutoGenerated PurchasePlan {get; set; }

        /// <summary>
        /// Gets or sets list of supported capabilities for the image from which the OS
        /// disk was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "supportedCapabilities")]
        public SupportedCapabilities SupportedCapabilities {get; set; }

        /// <summary>
        /// Gets or sets disk source information. CreationData information cannot be
        /// changed after the disk has been created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "creationData")]
        public CreationData CreationData {get; set; }

        /// <summary>
        /// Gets or sets if creationData.createOption is Empty, this field is mandatory
        /// and it indicates the size of the disk to create. If this field is present
        /// for updates or creation with other options, it indicates a resize. Resizes
        /// are only allowed if the disk is not attached to a running VM, and can only
        /// increase the disk&#39;s size.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "diskSizeGB")]
        public int? DiskSizeGb {get; set; }

        /// <summary>
        /// Gets the size of the disk in bytes. This field is read only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "diskSizeBytes")]
        public long? DiskSizeBytes {get; private set; }

        /// <summary>
        /// Gets unique Guid identifying the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "uniqueId")]
        public string UniqueId {get; private set; }

        /// <summary>
        /// Gets or sets encryption settings collection used for Azure Disk Encryption,
        /// can contain multiple encryption settings per disk or snapshot.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "encryptionSettingsCollection")]
        public EncryptionSettingsCollection EncryptionSettingsCollection {get; set; }

        /// <summary>
        /// Gets the disk provisioning state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets the number of IOPS allowed for this disk; only settable for
        /// UltraSSD disks. One operation can transfer between 4k and 256k bytes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "diskIOPSReadWrite")]
        public long? DiskIopsReadWrite {get; set; }

        /// <summary>
        /// Gets or sets the bandwidth allowed for this disk; only settable for
        /// UltraSSD disks. MBps means millions of bytes per second - MB here uses the
        /// ISO notation, of powers of 10.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "diskMBpsReadWrite")]
        public long? DiskMBpsReadWrite {get; set; }

        /// <summary>
        /// Gets or sets the total number of IOPS that will be allowed across all VMs
        /// mounting the shared disk as ReadOnly. One operation can transfer between 4k
        /// and 256k bytes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "diskIOPSReadOnly")]
        public long? DiskIopsReadOnly {get; set; }

        /// <summary>
        /// Gets or sets the total throughput (MBps) that will be allowed across all
        /// VMs mounting the shared disk as ReadOnly. MBps means millions of bytes per
        /// second - MB here uses the ISO notation, of powers of 10.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "diskMBpsReadOnly")]
        public long? DiskMBpsReadOnly {get; set; }

        /// <summary>
        /// Gets the state of the disk. Possible values include: &#39;Unattached&#39;, &#39;Attached&#39;, &#39;Reserved&#39;, &#39;Frozen&#39;, &#39;ActiveSAS&#39;, &#39;ActiveSASFrozen&#39;, &#39;ReadyToUpload&#39;, &#39;ActiveUpload&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "diskState")]
        public string DiskState {get; private set; }

        /// <summary>
        /// Gets or sets encryption property can be used to encrypt data at rest with
        /// customer managed keys or platform managed keys.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "encryption")]
        public Encryption Encryption {get; set; }

        /// <summary>
        /// Gets or sets the maximum number of VMs that can attach to the disk at the
        /// same time. Value greater than one indicates a disk that can be mounted on
        /// multiple VMs at the same time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "maxShares")]
        public int? MaxShares {get; set; }

        /// <summary>
        /// Gets details of the list of all VMs that have the disk attached. maxShares
        /// should be set to a value greater than one for disks to allow attaching them
        /// to multiple VMs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "shareInfo")]
        public System.Collections.Generic.IList<ShareInfoElement> ShareInfo {get; private set; }

        /// <summary>
        /// Gets or sets policy for accessing the disk via network. Possible values include: &#39;AllowAll&#39;, &#39;AllowPrivate&#39;, &#39;DenyAll&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "networkAccessPolicy")]
        public string NetworkAccessPolicy {get; set; }

        /// <summary>
        /// Gets or sets aRM id of the DiskAccess resource for using private endpoints
        /// on disks.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "diskAccessId")]
        public string DiskAccessId {get; set; }

        /// <summary>
        /// Gets latest time when bursting was last enabled on a disk.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "burstingEnabledTime")]
        public System.DateTime? BurstingEnabledTime {get; private set; }

        /// <summary>
        /// Gets or sets performance tier of the disk (e.g, P4, S10) as described here:
        /// https://azure.microsoft.com/en-us/pricing/details/managed-disks/. Does not
        /// apply to Ultra disks.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tier")]
        public string Tier {get; set; }

        /// <summary>
        /// Gets or sets set to true to enable bursting beyond the provisioned
        /// performance target of the disk. Bursting is disabled by default. Does not
        /// apply to Ultra disks.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "burstingEnabled")]
        public bool? BurstingEnabled {get; set; }

        /// <summary>
        /// Gets properties of the disk for which update is pending.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "propertyUpdatesInProgress")]
        public PropertyUpdatesInProgress PropertyUpdatesInProgress {get; private set; }

        /// <summary>
        /// Gets or sets indicates the OS on a disk supports hibernation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "supportsHibernation")]
        public bool? SupportsHibernation {get; set; }

        /// <summary>
        /// Gets or sets contains the security related information for the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "securityProfile")]
        public DiskSecurityProfile SecurityProfile {get; set; }

        /// <summary>
        /// Gets or sets percentage complete for the background copy when a resource is
        /// created via the CopyStart operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "completionPercent")]
        public double? CompletionPercent {get; set; }

        /// <summary>
        /// Gets or sets policy for controlling export on the disk. Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "publicNetworkAccess")]
        public string PublicNetworkAccess {get; set; }

        /// <summary>
        /// Gets or sets additional authentication requirements when exporting or
        /// uploading to a disk or snapshot. Possible values include: &#39;AzureActiveDirectory&#39;, &#39;None&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dataAccessAuthMode")]
        public string DataAccessAuthMode {get; set; }

        /// <summary>
        /// Gets or sets setting this property to true improves reliability and
        /// performance of data disks that are frequently (more than 5 times a day) by
        /// detached from one virtual machine and attached to another. This property
        /// should not be set for disks that are not detached and attached frequently
        /// as it causes the disks to not align with the fault domain of the virtual
        /// machine.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "optimizedForFrequentAttach")]
        public bool? OptimizedForFrequentAttach {get; set; }

        /// <summary>
        /// Gets the UTC time when the ownership state of the disk was last changed
        /// i.e., the time the disk was last attached or detached from a VM or the time
        /// when the VM to which the disk was attached was deallocated or started.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "LastOwnershipUpdateTime")]
        public System.DateTime? LastOwnershipUpdateTime {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.CreationData == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "CreationData");
            }


            if (this.PurchasePlan != null)
            {
                this.PurchasePlan.Validate();
            }

            if (this.CreationData != null)
            {
                this.CreationData.Validate();
            }

            if (this.EncryptionSettingsCollection != null)
            {
                this.EncryptionSettingsCollection.Validate();
            }











        }
    }
}