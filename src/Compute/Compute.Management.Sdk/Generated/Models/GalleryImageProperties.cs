// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Compute.Models
{
    using System.Linq;

    /// <summary>
    /// Describes the properties of a gallery image definition.
    /// </summary>
    public partial class GalleryImageProperties
    {
        /// <summary>
        /// Initializes a new instance of the GalleryImageProperties class.
        /// </summary>
        public GalleryImageProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the GalleryImageProperties class.
        /// </summary>

        /// <param name="description">The description of this gallery image definition resource. This property is
        /// updatable.
        /// </param>

        /// <param name="eula">The Eula agreement for the gallery image definition.
        /// </param>

        /// <param name="privacyStatementUri">The privacy statement uri.
        /// </param>

        /// <param name="releaseNoteUri">The release note uri.
        /// </param>

        /// <param name="osType">This property allows you to specify the type of the OS that is included in
        /// the disk when creating a VM from a managed image. &lt;br&gt;&lt;br&gt; Possible values
        /// are: &lt;br&gt;&lt;br&gt; **Windows** &lt;br&gt;&lt;br&gt; **Linux**
        /// Possible values include: &#39;Windows&#39;, &#39;Linux&#39;</param>

        /// <param name="osState">This property allows the user to specify whether the virtual machines
        /// created under this image are &#39;Generalized&#39; or &#39;Specialized&#39;.
        /// Possible values include: &#39;Generalized&#39;, &#39;Specialized&#39;</param>

        /// <param name="hyperVGeneration">The hypervisor generation of the Virtual Machine. Applicable to OS disks
        /// only.
        /// Possible values include: &#39;V1&#39;, &#39;V2&#39;</param>

        /// <param name="endOfLifeDate">The end of life date of the gallery image definition. This property can be
        /// used for decommissioning purposes. This property is updatable.
        /// </param>

        /// <param name="identifier">This is the gallery image definition identifier.
        /// </param>

        /// <param name="recommended">The properties describe the recommended machine configuration for this
        /// Image Definition. These properties are updatable.
        /// </param>

        /// <param name="disallowed">Describes the disallowed disk types.
        /// </param>

        /// <param name="purchasePlan">Describes the gallery image definition purchase plan. This is used by
        /// marketplace images.
        /// </param>

        /// <param name="provisioningState">The provisioning state, which only appears in the response.
        /// Possible values include: &#39;Creating&#39;, &#39;Updating&#39;, &#39;Failed&#39;, &#39;Succeeded&#39;,
        /// &#39;Deleting&#39;, &#39;Migrating&#39;</param>

        /// <param name="features">A list of gallery image features.
        /// </param>

        /// <param name="architecture">The architecture of the image. Applicable to OS disks only.
        /// Possible values include: &#39;x64&#39;, &#39;Arm64&#39;</param>
        public GalleryImageProperties(OperatingSystemTypes osType, OperatingSystemStateTypes osState, GalleryImageIdentifier identifier, string description = default(string), string eula = default(string), string privacyStatementUri = default(string), string releaseNoteUri = default(string), string hyperVGeneration = default(string), System.DateTime? endOfLifeDate = default(System.DateTime?), RecommendedMachineConfiguration recommended = default(RecommendedMachineConfiguration), Disallowed disallowed = default(Disallowed), ImagePurchasePlan purchasePlan = default(ImagePurchasePlan), string provisioningState = default(string), System.Collections.Generic.IList<GalleryImageFeature> features = default(System.Collections.Generic.IList<GalleryImageFeature>), string architecture = default(string))

        {
            this.Description = description;
            this.Eula = eula;
            this.PrivacyStatementUri = privacyStatementUri;
            this.ReleaseNoteUri = releaseNoteUri;
            this.OSType = osType;
            this.OSState = osState;
            this.HyperVGeneration = hyperVGeneration;
            this.EndOfLifeDate = endOfLifeDate;
            this.Identifier = identifier;
            this.Recommended = recommended;
            this.Disallowed = disallowed;
            this.PurchasePlan = purchasePlan;
            this.ProvisioningState = provisioningState;
            this.Features = features;
            this.Architecture = architecture;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the description of this gallery image definition resource.
        /// This property is updatable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "description")]
        public string Description {get; set; }

        /// <summary>
        /// Gets or sets the Eula agreement for the gallery image definition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "eula")]
        public string Eula {get; set; }

        /// <summary>
        /// Gets or sets the privacy statement uri.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "privacyStatementUri")]
        public string PrivacyStatementUri {get; set; }

        /// <summary>
        /// Gets or sets the release note uri.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "releaseNoteUri")]
        public string ReleaseNoteUri {get; set; }

        /// <summary>
        /// Gets or sets this property allows you to specify the type of the OS that is
        /// included in the disk when creating a VM from a managed image. &lt;br&gt;&lt;br&gt;
        /// Possible values are: &lt;br&gt;&lt;br&gt; **Windows** &lt;br&gt;&lt;br&gt; **Linux** Possible values include: &#39;Windows&#39;, &#39;Linux&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "osType")]
        public OperatingSystemTypes OSType {get; set; }

        /// <summary>
        /// Gets or sets this property allows the user to specify whether the virtual
        /// machines created under this image are &#39;Generalized&#39; or &#39;Specialized&#39;. Possible values include: &#39;Generalized&#39;, &#39;Specialized&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "osState")]
        public OperatingSystemStateTypes OSState {get; set; }

        /// <summary>
        /// Gets or sets the hypervisor generation of the Virtual Machine. Applicable
        /// to OS disks only. Possible values include: &#39;V1&#39;, &#39;V2&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "hyperVGeneration")]
        public string HyperVGeneration {get; set; }

        /// <summary>
        /// Gets or sets the end of life date of the gallery image definition. This
        /// property can be used for decommissioning purposes. This property is
        /// updatable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "endOfLifeDate")]
        public System.DateTime? EndOfLifeDate {get; set; }

        /// <summary>
        /// Gets or sets this is the gallery image definition identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "identifier")]
        public GalleryImageIdentifier Identifier {get; set; }

        /// <summary>
        /// Gets or sets the properties describe the recommended machine configuration
        /// for this Image Definition. These properties are updatable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "recommended")]
        public RecommendedMachineConfiguration Recommended {get; set; }

        /// <summary>
        /// Gets or sets describes the disallowed disk types.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "disallowed")]
        public Disallowed Disallowed {get; set; }

        /// <summary>
        /// Gets or sets describes the gallery image definition purchase plan. This is
        /// used by marketplace images.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "purchasePlan")]
        public ImagePurchasePlan PurchasePlan {get; set; }

        /// <summary>
        /// Gets the provisioning state, which only appears in the response. Possible values include: &#39;Creating&#39;, &#39;Updating&#39;, &#39;Failed&#39;, &#39;Succeeded&#39;, &#39;Deleting&#39;, &#39;Migrating&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets a list of gallery image features.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "features")]
        public System.Collections.Generic.IList<GalleryImageFeature> Features {get; set; }

        /// <summary>
        /// Gets or sets the architecture of the image. Applicable to OS disks only. Possible values include: &#39;x64&#39;, &#39;Arm64&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "architecture")]
        public string Architecture {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Identifier == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Identifier");
            }







            if (this.Identifier != null)
            {
                this.Identifier.Validate();
            }






        }
    }
}