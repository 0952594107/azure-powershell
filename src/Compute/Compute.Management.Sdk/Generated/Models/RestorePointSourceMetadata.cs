// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Compute.Models
{
    using System.Linq;

    /// <summary>
    /// Describes the properties of the Virtual Machine for which the restore point
    /// was created. The properties provided are a subset and the snapshot of the
    /// overall Virtual Machine properties captured at the time of the restore
    /// point creation.
    /// </summary>
    public partial class RestorePointSourceMetadata
    {
        /// <summary>
        /// Initializes a new instance of the RestorePointSourceMetadata class.
        /// </summary>
        public RestorePointSourceMetadata()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RestorePointSourceMetadata class.
        /// </summary>

        /// <param name="hardwareProfile">Gets the hardware profile.
        /// </param>

        /// <param name="storageProfile">Gets the storage profile.
        /// </param>

        /// <param name="osProfile">Gets the OS profile.
        /// </param>

        /// <param name="diagnosticsProfile">Gets the diagnostics profile.
        /// </param>

        /// <param name="licenseType">Gets the license type, which is for bring your own license scenario.
        /// </param>

        /// <param name="vmId">Gets the virtual machine unique id.
        /// </param>

        /// <param name="securityProfile">Gets the security profile.
        /// </param>

        /// <param name="location">Location of the VM from which the restore point was created.
        /// </param>

        /// <param name="userData">UserData associated with the source VM for which restore point is captured,
        /// which is a base-64 encoded value.
        /// </param>

        /// <param name="hyperVGeneration">HyperVGeneration of the source VM for which restore point is captured.
        /// Possible values include: &#39;V1&#39;, &#39;V2&#39;</param>
        public RestorePointSourceMetadata(HardwareProfile hardwareProfile = default(HardwareProfile), RestorePointSourceVMStorageProfile storageProfile = default(RestorePointSourceVMStorageProfile), OSProfile osProfile = default(OSProfile), DiagnosticsProfile diagnosticsProfile = default(DiagnosticsProfile), string licenseType = default(string), string vmId = default(string), SecurityProfile securityProfile = default(SecurityProfile), string location = default(string), string userData = default(string), string hyperVGeneration = default(string))

        {
            this.HardwareProfile = hardwareProfile;
            this.StorageProfile = storageProfile;
            this.OSProfile = osProfile;
            this.DiagnosticsProfile = diagnosticsProfile;
            this.LicenseType = licenseType;
            this.VMId = vmId;
            this.SecurityProfile = securityProfile;
            this.Location = location;
            this.UserData = userData;
            this.HyperVGeneration = hyperVGeneration;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets gets the hardware profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "hardwareProfile")]
        public HardwareProfile HardwareProfile {get; private set; }

        /// <summary>
        /// Gets or sets gets the storage profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "storageProfile")]
        public RestorePointSourceVMStorageProfile StorageProfile {get; set; }

        /// <summary>
        /// Gets gets the OS profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "osProfile")]
        public OSProfile OSProfile {get; private set; }

        /// <summary>
        /// Gets gets the diagnostics profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "diagnosticsProfile")]
        public DiagnosticsProfile DiagnosticsProfile {get; private set; }

        /// <summary>
        /// Gets gets the license type, which is for bring your own license scenario.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "licenseType")]
        public string LicenseType {get; private set; }

        /// <summary>
        /// Gets gets the virtual machine unique id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vmId")]
        public string VMId {get; private set; }

        /// <summary>
        /// Gets gets the security profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "securityProfile")]
        public SecurityProfile SecurityProfile {get; private set; }

        /// <summary>
        /// Gets location of the VM from which the restore point was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "location")]
        public string Location {get; private set; }

        /// <summary>
        /// Gets userData associated with the source VM for which restore point is
        /// captured, which is a base-64 encoded value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "userData")]
        public string UserData {get; private set; }

        /// <summary>
        /// Gets hyperVGeneration of the source VM for which restore point is captured. Possible values include: &#39;V1&#39;, &#39;V2&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "hyperVGeneration")]
        public string HyperVGeneration {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {

            if (this.StorageProfile != null)
            {
                this.StorageProfile.Validate();
            }








        }
    }
}