// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Compute.Models
{
    using System.Linq;

    /// <summary>
    /// Describes a virtual machine scale set network profile&#39;s IP configuration.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class VirtualMachineScaleSetIPConfiguration
    {
        /// <summary>
        /// Initializes a new instance of the VirtualMachineScaleSetIPConfiguration class.
        /// </summary>
        public VirtualMachineScaleSetIPConfiguration()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VirtualMachineScaleSetIPConfiguration class.
        /// </summary>

        /// <param name="name">The IP configuration name.
        /// </param>

        /// <param name="subnet">Specifies the identifier of the subnet.
        /// </param>

        /// <param name="primary">Specifies the primary network interface in case the virtual machine has
        /// more than 1 network interface.
        /// </param>

        /// <param name="publicIPAddressConfiguration">The publicIPAddressConfiguration.
        /// </param>

        /// <param name="privateIPAddressVersion">Available from Api-Version 2017-03-30 onwards, it represents whether the
        /// specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4. 
        /// Possible values are: &#39;IPv4&#39; and &#39;IPv6&#39;.
        /// Possible values include: &#39;IPv4&#39;, &#39;IPv6&#39;</param>

        /// <param name="applicationGatewayBackendAddressPools">Specifies an array of references to backend address pools of application
        /// gateways. A scale set can reference backend address pools of multiple
        /// application gateways. Multiple scale sets cannot use the same application
        /// gateway.
        /// </param>

        /// <param name="applicationSecurityGroups">Specifies an array of references to application security group.
        /// </param>

        /// <param name="loadBalancerBackendAddressPools">Specifies an array of references to backend address pools of load
        /// balancers. A scale set can reference backend address pools of one public
        /// and one internal load balancer. Multiple scale sets cannot use the same
        /// basic sku load balancer.
        /// </param>

        /// <param name="loadBalancerInboundNatPools">Specifies an array of references to inbound Nat pools of the load
        /// balancers. A scale set can reference inbound nat pools of one public and
        /// one internal load balancer. Multiple scale sets cannot use the same basic
        /// sku load balancer.
        /// </param>
        public VirtualMachineScaleSetIPConfiguration(string name, ApiEntityReference subnet = default(ApiEntityReference), bool? primary = default(bool?), VirtualMachineScaleSetPublicIPAddressConfiguration publicIPAddressConfiguration = default(VirtualMachineScaleSetPublicIPAddressConfiguration), string privateIPAddressVersion = default(string), System.Collections.Generic.IList<SubResource> applicationGatewayBackendAddressPools = default(System.Collections.Generic.IList<SubResource>), System.Collections.Generic.IList<SubResource> applicationSecurityGroups = default(System.Collections.Generic.IList<SubResource>), System.Collections.Generic.IList<SubResource> loadBalancerBackendAddressPools = default(System.Collections.Generic.IList<SubResource>), System.Collections.Generic.IList<SubResource> loadBalancerInboundNatPools = default(System.Collections.Generic.IList<SubResource>))

        {
            this.Name = name;
            this.Subnet = subnet;
            this.Primary = primary;
            this.PublicIPAddressConfiguration = publicIPAddressConfiguration;
            this.PrivateIPAddressVersion = privateIPAddressVersion;
            this.ApplicationGatewayBackendAddressPools = applicationGatewayBackendAddressPools;
            this.ApplicationSecurityGroups = applicationSecurityGroups;
            this.LoadBalancerBackendAddressPools = loadBalancerBackendAddressPools;
            this.LoadBalancerInboundNatPools = loadBalancerInboundNatPools;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the IP configuration name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets or sets specifies the identifier of the subnet.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.subnet")]
        public ApiEntityReference Subnet {get; set; }

        /// <summary>
        /// Gets or sets specifies the primary network interface in case the virtual
        /// machine has more than 1 network interface.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.primary")]
        public bool? Primary {get; set; }

        /// <summary>
        /// Gets or sets the publicIPAddressConfiguration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.publicIPAddressConfiguration")]
        public VirtualMachineScaleSetPublicIPAddressConfiguration PublicIPAddressConfiguration {get; set; }

        /// <summary>
        /// Gets or sets available from Api-Version 2017-03-30 onwards, it represents
        /// whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as
        /// IPv4.  Possible values are: &#39;IPv4&#39; and &#39;IPv6&#39;. Possible values include: &#39;IPv4&#39;, &#39;IPv6&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.privateIPAddressVersion")]
        public string PrivateIPAddressVersion {get; set; }

        /// <summary>
        /// Gets or sets specifies an array of references to backend address pools of
        /// application gateways. A scale set can reference backend address pools of
        /// multiple application gateways. Multiple scale sets cannot use the same
        /// application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.applicationGatewayBackendAddressPools")]
        public System.Collections.Generic.IList<SubResource> ApplicationGatewayBackendAddressPools {get; set; }

        /// <summary>
        /// Gets or sets specifies an array of references to application security
        /// group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.applicationSecurityGroups")]
        public System.Collections.Generic.IList<SubResource> ApplicationSecurityGroups {get; set; }

        /// <summary>
        /// Gets or sets specifies an array of references to backend address pools of
        /// load balancers. A scale set can reference backend address pools of one
        /// public and one internal load balancer. Multiple scale sets cannot use the
        /// same basic sku load balancer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.loadBalancerBackendAddressPools")]
        public System.Collections.Generic.IList<SubResource> LoadBalancerBackendAddressPools {get; set; }

        /// <summary>
        /// Gets or sets specifies an array of references to inbound Nat pools of the
        /// load balancers. A scale set can reference inbound nat pools of one public
        /// and one internal load balancer. Multiple scale sets cannot use the same
        /// basic sku load balancer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.loadBalancerInboundNatPools")]
        public System.Collections.Generic.IList<SubResource> LoadBalancerInboundNatPools {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Name == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Name");
            }


            if (this.PublicIPAddressConfiguration != null)
            {
                this.PublicIPAddressConfiguration.Validate();
            }





        }
    }
}