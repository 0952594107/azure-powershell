// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Compute.Models
{
    using System.Linq;

    public partial class GalleryTargetExtendedLocation
    {
        /// <summary>
        /// Initializes a new instance of the GalleryTargetExtendedLocation class.
        /// </summary>
        public GalleryTargetExtendedLocation()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the GalleryTargetExtendedLocation class.
        /// </summary>

        /// <param name="name">The name of the region.
        /// </param>

        /// <param name="extendedLocation">The name of the extended location.
        /// </param>

        /// <param name="extendedLocationReplicaCount">The number of replicas of the Image Version to be created per extended
        /// location. This property is updatable.
        /// </param>

        /// <param name="storageAccountType">Specifies the storage account type to be used to store the image. This
        /// property is not updatable.
        /// Possible values include: &#39;Standard_LRS&#39;, &#39;Standard_ZRS&#39;, &#39;StandardSSD_LRS&#39;,
        /// &#39;Premium_LRS&#39;</param>

        /// <param name="encryption">Optional. Allows users to provide customer managed keys for encrypting the
        /// OS and data disks in the gallery artifact.
        /// </param>
        public GalleryTargetExtendedLocation(string name = default(string), GalleryExtendedLocation extendedLocation = default(GalleryExtendedLocation), int? extendedLocationReplicaCount = default(int?), string storageAccountType = default(string), EncryptionImages encryption = default(EncryptionImages))

        {
            this.Name = name;
            this.ExtendedLocation = extendedLocation;
            this.ExtendedLocationReplicaCount = extendedLocationReplicaCount;
            this.StorageAccountType = storageAccountType;
            this.Encryption = encryption;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the name of the region.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets or sets the name of the extended location.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "extendedLocation")]
        public GalleryExtendedLocation ExtendedLocation {get; set; }

        /// <summary>
        /// Gets or sets the number of replicas of the Image Version to be created per
        /// extended location. This property is updatable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "extendedLocationReplicaCount")]
        public int? ExtendedLocationReplicaCount {get; set; }

        /// <summary>
        /// Gets or sets specifies the storage account type to be used to store the
        /// image. This property is not updatable. Possible values include: &#39;Standard_LRS&#39;, &#39;Standard_ZRS&#39;, &#39;StandardSSD_LRS&#39;, &#39;Premium_LRS&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "storageAccountType")]
        public string StorageAccountType {get; set; }

        /// <summary>
        /// Gets or sets optional. Allows users to provide customer managed keys for
        /// encrypting the OS and data disks in the gallery artifact.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "encryption")]
        public EncryptionImages Encryption {get; set; }
    }
}