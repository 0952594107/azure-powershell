// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Compute.Models
{
    using System.Linq;

    /// <summary>
    /// Describes a Virtual Machine Scale Set.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class VirtualMachineScaleSetUpdate : UpdateResource
    {
        /// <summary>
        /// Initializes a new instance of the VirtualMachineScaleSetUpdate class.
        /// </summary>
        public VirtualMachineScaleSetUpdate()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VirtualMachineScaleSetUpdate class.
        /// </summary>

        /// <param name="tags">Resource tags
        /// </param>

        /// <param name="sku">The virtual machine scale set sku.
        /// </param>

        /// <param name="plan">The purchase plan when deploying a virtual machine scale set from VM
        /// Marketplace images.
        /// </param>

        /// <param name="identity">The identity of the virtual machine scale set, if configured.
        /// </param>

        /// <param name="upgradePolicy">The upgrade policy.
        /// </param>

        /// <param name="additionalCapabilities">Specifies additional capabilities enabled or disabled on the Virtual
        /// Machines in the Virtual Machine Scale Set. For instance: whether the
        /// Virtual Machines have the capability to support attaching managed data
        /// disks with UltraSSD_LRS storage account type.
        /// </param>

        /// <param name="resiliencyPolicy">Policy for Resiliency
        /// </param>

        /// <param name="automaticRepairsPolicy">Policy for automatic repairs.
        /// </param>

        /// <param name="virtualMachineProfile">The virtual machine profile.
        /// </param>

        /// <param name="overprovision">Specifies whether the Virtual Machine Scale Set should be overprovisioned.
        /// </param>

        /// <param name="doNotRunExtensionsOnOverprovisionedVms">When Overprovision is enabled, extensions are launched only on the
        /// requested number of VMs which are finally kept. This property will hence
        /// ensure that the extensions do not run on the extra overprovisioned VMs.
        /// </param>

        /// <param name="singlePlacementGroup">When true this limits the scale set to a single placement group, of max
        /// size 100 virtual machines. NOTE: If singlePlacementGroup is true, it may be
        /// modified to false. However, if singlePlacementGroup is false, it may not be
        /// modified to true.
        /// </param>

        /// <param name="scaleInPolicy">Specifies the policies applied when scaling in Virtual Machines in the
        /// Virtual Machine Scale Set.
        /// </param>

        /// <param name="proximityPlacementGroup">Specifies information about the proximity placement group that the virtual
        /// machine scale set should be assigned to. &lt;br&gt;&lt;br&gt;Minimum api-version:
        /// 2018-04-01.
        /// </param>

        /// <param name="priorityMixPolicy">Specifies the desired targets for mixing Spot and Regular priority VMs
        /// within the same VMSS Flex instance.
        /// </param>

        /// <param name="spotRestorePolicy">Specifies the Spot Restore properties for the virtual machine scale set.
        /// </param>
        public VirtualMachineScaleSetUpdate(System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), Sku sku = default(Sku), Plan plan = default(Plan), VirtualMachineScaleSetIdentity identity = default(VirtualMachineScaleSetIdentity), UpgradePolicy upgradePolicy = default(UpgradePolicy), AdditionalCapabilities additionalCapabilities = default(AdditionalCapabilities), ResiliencyPolicy resiliencyPolicy = default(ResiliencyPolicy), AutomaticRepairsPolicy automaticRepairsPolicy = default(AutomaticRepairsPolicy), VirtualMachineScaleSetUpdateVMProfile virtualMachineProfile = default(VirtualMachineScaleSetUpdateVMProfile), bool? overprovision = default(bool?), bool? doNotRunExtensionsOnOverprovisionedVms = default(bool?), bool? singlePlacementGroup = default(bool?), ScaleInPolicy scaleInPolicy = default(ScaleInPolicy), SubResource proximityPlacementGroup = default(SubResource), PriorityMixPolicy priorityMixPolicy = default(PriorityMixPolicy), SpotRestorePolicy spotRestorePolicy = default(SpotRestorePolicy))

        : base(tags)
        {
            this.Sku = sku;
            this.Plan = plan;
            this.Identity = identity;
            this.UpgradePolicy = upgradePolicy;
            this.AdditionalCapabilities = additionalCapabilities;
            this.ResiliencyPolicy = resiliencyPolicy;
            this.AutomaticRepairsPolicy = automaticRepairsPolicy;
            this.VirtualMachineProfile = virtualMachineProfile;
            this.Overprovision = overprovision;
            this.DoNotRunExtensionsOnOverprovisionedVms = doNotRunExtensionsOnOverprovisionedVms;
            this.SinglePlacementGroup = singlePlacementGroup;
            this.ScaleInPolicy = scaleInPolicy;
            this.ProximityPlacementGroup = proximityPlacementGroup;
            this.PriorityMixPolicy = priorityMixPolicy;
            this.SpotRestorePolicy = spotRestorePolicy;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the virtual machine scale set sku.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sku")]
        public Sku Sku {get; set; }

        /// <summary>
        /// Gets or sets the purchase plan when deploying a virtual machine scale set
        /// from VM Marketplace images.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "plan")]
        public Plan Plan {get; set; }

        /// <summary>
        /// Gets or sets the identity of the virtual machine scale set, if configured.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "identity")]
        public VirtualMachineScaleSetIdentity Identity {get; set; }

        /// <summary>
        /// Gets or sets the upgrade policy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.upgradePolicy")]
        public UpgradePolicy UpgradePolicy {get; set; }

        /// <summary>
        /// Gets or sets specifies additional capabilities enabled or disabled on the
        /// Virtual Machines in the Virtual Machine Scale Set. For instance: whether
        /// the Virtual Machines have the capability to support attaching managed data
        /// disks with UltraSSD_LRS storage account type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.additionalCapabilities")]
        public AdditionalCapabilities AdditionalCapabilities {get; set; }

        /// <summary>
        /// Gets or sets policy for Resiliency
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.resiliencyPolicy")]
        public ResiliencyPolicy ResiliencyPolicy {get; set; }

        /// <summary>
        /// Gets or sets policy for automatic repairs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.automaticRepairsPolicy")]
        public AutomaticRepairsPolicy AutomaticRepairsPolicy {get; set; }

        /// <summary>
        /// Gets or sets the virtual machine profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.virtualMachineProfile")]
        public VirtualMachineScaleSetUpdateVMProfile VirtualMachineProfile {get; set; }

        /// <summary>
        /// Gets or sets specifies whether the Virtual Machine Scale Set should be
        /// overprovisioned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.overprovision")]
        public bool? Overprovision {get; set; }

        /// <summary>
        /// Gets or sets when Overprovision is enabled, extensions are launched only on
        /// the requested number of VMs which are finally kept. This property will
        /// hence ensure that the extensions do not run on the extra overprovisioned
        /// VMs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.doNotRunExtensionsOnOverprovisionedVMs")]
        public bool? DoNotRunExtensionsOnOverprovisionedVms {get; set; }

        /// <summary>
        /// Gets or sets when true this limits the scale set to a single placement
        /// group, of max size 100 virtual machines. NOTE: If singlePlacementGroup is
        /// true, it may be modified to false. However, if singlePlacementGroup is
        /// false, it may not be modified to true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.singlePlacementGroup")]
        public bool? SinglePlacementGroup {get; set; }

        /// <summary>
        /// Gets or sets specifies the policies applied when scaling in Virtual
        /// Machines in the Virtual Machine Scale Set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.scaleInPolicy")]
        public ScaleInPolicy ScaleInPolicy {get; set; }

        /// <summary>
        /// Gets or sets specifies information about the proximity placement group that
        /// the virtual machine scale set should be assigned to. &lt;br&gt;&lt;br&gt;Minimum
        /// api-version: 2018-04-01.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.proximityPlacementGroup")]
        public SubResource ProximityPlacementGroup {get; set; }

        /// <summary>
        /// Gets or sets specifies the desired targets for mixing Spot and Regular
        /// priority VMs within the same VMSS Flex instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.priorityMixPolicy")]
        public PriorityMixPolicy PriorityMixPolicy {get; set; }

        /// <summary>
        /// Gets or sets specifies the Spot Restore properties for the virtual machine
        /// scale set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.spotRestorePolicy")]
        public SpotRestorePolicy SpotRestorePolicy {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {



            if (this.UpgradePolicy != null)
            {
                this.UpgradePolicy.Validate();
            }






            if (this.PriorityMixPolicy != null)
            {
                this.PriorityMixPolicy.Validate();
            }

        }
    }
}