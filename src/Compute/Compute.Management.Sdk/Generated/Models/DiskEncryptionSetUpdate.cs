// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Compute.Models
{
    using System.Linq;

    /// <summary>
    /// disk encryption set update resource.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class DiskEncryptionSetUpdate
    {
        /// <summary>
        /// Initializes a new instance of the DiskEncryptionSetUpdate class.
        /// </summary>
        public DiskEncryptionSetUpdate()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DiskEncryptionSetUpdate class.
        /// </summary>

        /// <param name="tags">Resource tags
        /// </param>

        /// <param name="identity">The managed identity for the disk encryption set. It should be given
        /// permission on the key vault before it can be used to encrypt disks.
        /// </param>

        /// <param name="encryptionType">The type of key used to encrypt the data of the disk.
        /// Possible values include: &#39;EncryptionAtRestWithCustomerKey&#39;,
        /// &#39;EncryptionAtRestWithPlatformAndCustomerKeys&#39;,
        /// &#39;ConfidentialVmEncryptedWithCustomerKey&#39;</param>

        /// <param name="activeKey">Key Vault Key Url to be used for server side encryption of Managed Disks
        /// and Snapshots
        /// </param>

        /// <param name="rotationToLatestKeyVersionEnabled">Set this flag to true to enable auto-updating of this disk encryption set
        /// to the latest key version.
        /// </param>

        /// <param name="federatedClientId">Multi-tenant application client id to access key vault in a different
        /// tenant. Setting the value to &#39;None&#39; will clear the property.
        /// </param>
        public DiskEncryptionSetUpdate(System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), EncryptionSetIdentity identity = default(EncryptionSetIdentity), string encryptionType = default(string), KeyForDiskEncryptionSet activeKey = default(KeyForDiskEncryptionSet), bool? rotationToLatestKeyVersionEnabled = default(bool?), string federatedClientId = default(string))

        {
            this.Tags = tags;
            this.Identity = identity;
            this.EncryptionType = encryptionType;
            this.ActiveKey = activeKey;
            this.RotationToLatestKeyVersionEnabled = rotationToLatestKeyVersionEnabled;
            this.FederatedClientId = federatedClientId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets resource tags
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tags")]
        public System.Collections.Generic.IDictionary<string, string> Tags {get; set; }

        /// <summary>
        /// Gets or sets the managed identity for the disk encryption set. It should be
        /// given permission on the key vault before it can be used to encrypt disks.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "identity")]
        public EncryptionSetIdentity Identity {get; set; }

        /// <summary>
        /// Gets or sets the type of key used to encrypt the data of the disk. Possible values include: &#39;EncryptionAtRestWithCustomerKey&#39;, &#39;EncryptionAtRestWithPlatformAndCustomerKeys&#39;, &#39;ConfidentialVmEncryptedWithCustomerKey&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.encryptionType")]
        public string EncryptionType {get; set; }

        /// <summary>
        /// Gets or sets key Vault Key Url to be used for server side encryption of
        /// Managed Disks and Snapshots
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.activeKey")]
        public KeyForDiskEncryptionSet ActiveKey {get; set; }

        /// <summary>
        /// Gets or sets set this flag to true to enable auto-updating of this disk
        /// encryption set to the latest key version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.rotationToLatestKeyVersionEnabled")]
        public bool? RotationToLatestKeyVersionEnabled {get; set; }

        /// <summary>
        /// Gets or sets multi-tenant application client id to access key vault in a
        /// different tenant. Setting the value to &#39;None&#39; will clear the property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.federatedClientId")]
        public string FederatedClientId {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {



            if (this.ActiveKey != null)
            {
                this.ActiveKey.Validate();
            }

        }
    }
}