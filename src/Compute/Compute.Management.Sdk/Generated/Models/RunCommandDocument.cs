// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Compute.Models
{
    using System.Linq;

    /// <summary>
    /// Describes the properties of a Run Command.
    /// </summary>
    public partial class RunCommandDocument : RunCommandDocumentBase
    {
        /// <summary>
        /// Initializes a new instance of the RunCommandDocument class.
        /// </summary>
        public RunCommandDocument()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RunCommandDocument class.
        /// </summary>

        /// <param name="schema">The VM run command schema.
        /// </param>

        /// <param name="id">The VM run command id.
        /// </param>

        /// <param name="osType">The Operating System type.
        /// Possible values include: &#39;Windows&#39;, &#39;Linux&#39;</param>

        /// <param name="label">The VM run command label.
        /// </param>

        /// <param name="description">The VM run command description.
        /// </param>

        /// <param name="script">The script to be executed.
        /// </param>

        /// <param name="parameters">The parameters used by the script.
        /// </param>
        public RunCommandDocument(string schema, string id, OperatingSystemTypes osType, string label, string description, System.Collections.Generic.IList<string> script, System.Collections.Generic.IList<RunCommandParameterDefinition> parameters = default(System.Collections.Generic.IList<RunCommandParameterDefinition>))

        : base(schema, id, osType, label, description)
        {
            this.Script = script;
            this.Parameters = parameters;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the script to be executed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "script")]
        public System.Collections.Generic.IList<string> Script {get; set; }

        /// <summary>
        /// Gets or sets the parameters used by the script.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "parameters")]
        public System.Collections.Generic.IList<RunCommandParameterDefinition> Parameters {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (this.Script == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Script");
            }

            if (this.Parameters != null)
            {
                foreach (var element in this.Parameters)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}