// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Compute.Models
{
    using System.Linq;

    /// <summary>
    /// Describes the properties of a Virtual Machine Scale Set.
    /// </summary>
    public partial class VirtualMachineScaleSetProperties
    {
        /// <summary>
        /// Initializes a new instance of the VirtualMachineScaleSetProperties class.
        /// </summary>
        public VirtualMachineScaleSetProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VirtualMachineScaleSetProperties class.
        /// </summary>

        /// <param name="upgradePolicy">The upgrade policy.
        /// </param>

        /// <param name="automaticRepairsPolicy">Policy for automatic repairs.
        /// </param>

        /// <param name="virtualMachineProfile">The virtual machine profile.
        /// </param>

        /// <param name="provisioningState">The provisioning state, which only appears in the response.
        /// </param>

        /// <param name="overprovision">Specifies whether the Virtual Machine Scale Set should be overprovisioned.
        /// </param>

        /// <param name="doNotRunExtensionsOnOverprovisionedVms">When Overprovision is enabled, extensions are launched only on the
        /// requested number of VMs which are finally kept. This property will hence
        /// ensure that the extensions do not run on the extra overprovisioned VMs.
        /// </param>

        /// <param name="uniqueId">Specifies the ID which uniquely identifies a Virtual Machine Scale Set.
        /// </param>

        /// <param name="singlePlacementGroup">When true this limits the scale set to a single placement group, of max
        /// size 100 virtual machines. NOTE: If singlePlacementGroup is true, it may be
        /// modified to false. However, if singlePlacementGroup is false, it may not be
        /// modified to true.
        /// </param>

        /// <param name="zoneBalance">Whether to force strictly even Virtual Machine distribution cross x-zones
        /// in case there is zone outage. zoneBalance property can only be set if the
        /// zones property of the scale set contains more than one zone. If there are
        /// no zones or only one zone specified, then zoneBalance property should not
        /// be set.
        /// </param>

        /// <param name="platformFaultDomainCount">Fault Domain count for each placement group.
        /// </param>

        /// <param name="proximityPlacementGroup">Specifies information about the proximity placement group that the virtual
        /// machine scale set should be assigned to. Minimum api-version: 2018-04-01.
        /// </param>

        /// <param name="hostGroup">Specifies information about the dedicated host group that the virtual
        /// machine scale set resides in. Minimum api-version: 2020-06-01.
        /// </param>

        /// <param name="additionalCapabilities">Specifies additional capabilities enabled or disabled on the Virtual
        /// Machines in the Virtual Machine Scale Set. For instance: whether the
        /// Virtual Machines have the capability to support attaching managed data
        /// disks with UltraSSD_LRS storage account type.
        /// </param>

        /// <param name="scaleInPolicy">Specifies the policies applied when scaling in Virtual Machines in the
        /// Virtual Machine Scale Set.
        /// </param>

        /// <param name="orchestrationMode">Specifies the orchestration mode for the virtual machine scale set.
        /// Possible values include: &#39;Uniform&#39;, &#39;Flexible&#39;</param>

        /// <param name="spotRestorePolicy">Specifies the Spot Restore properties for the virtual machine scale set.
        /// </param>

        /// <param name="priorityMixPolicy">Specifies the desired targets for mixing Spot and Regular priority VMs
        /// within the same VMSS Flex instance.
        /// </param>

        /// <param name="timeCreated">Specifies the time at which the Virtual Machine Scale Set resource was
        /// created. Minimum api-version: 2021-11-01.
        /// </param>

        /// <param name="constrainedMaximumCapacity">Optional property which must either be set to True or omitted.
        /// </param>

        /// <param name="resiliencyPolicy">Policy for Resiliency
        /// </param>
        public VirtualMachineScaleSetProperties(UpgradePolicy upgradePolicy = default(UpgradePolicy), AutomaticRepairsPolicy automaticRepairsPolicy = default(AutomaticRepairsPolicy), VirtualMachineScaleSetVMProfile virtualMachineProfile = default(VirtualMachineScaleSetVMProfile), string provisioningState = default(string), bool? overprovision = default(bool?), bool? doNotRunExtensionsOnOverprovisionedVms = default(bool?), string uniqueId = default(string), bool? singlePlacementGroup = default(bool?), bool? zoneBalance = default(bool?), int? platformFaultDomainCount = default(int?), SubResource proximityPlacementGroup = default(SubResource), SubResource hostGroup = default(SubResource), AdditionalCapabilities additionalCapabilities = default(AdditionalCapabilities), ScaleInPolicy scaleInPolicy = default(ScaleInPolicy), string orchestrationMode = default(string), SpotRestorePolicy spotRestorePolicy = default(SpotRestorePolicy), PriorityMixPolicy priorityMixPolicy = default(PriorityMixPolicy), System.DateTime? timeCreated = default(System.DateTime?), bool? constrainedMaximumCapacity = default(bool?), ResiliencyPolicy resiliencyPolicy = default(ResiliencyPolicy))

        {
            this.UpgradePolicy = upgradePolicy;
            this.AutomaticRepairsPolicy = automaticRepairsPolicy;
            this.VirtualMachineProfile = virtualMachineProfile;
            this.ProvisioningState = provisioningState;
            this.Overprovision = overprovision;
            this.DoNotRunExtensionsOnOverprovisionedVMS = doNotRunExtensionsOnOverprovisionedVms;
            this.UniqueId = uniqueId;
            this.SinglePlacementGroup = singlePlacementGroup;
            this.ZoneBalance = zoneBalance;
            this.PlatformFaultDomainCount = platformFaultDomainCount;
            this.ProximityPlacementGroup = proximityPlacementGroup;
            this.HostGroup = hostGroup;
            this.AdditionalCapabilities = additionalCapabilities;
            this.ScaleInPolicy = scaleInPolicy;
            this.OrchestrationMode = orchestrationMode;
            this.SpotRestorePolicy = spotRestorePolicy;
            this.PriorityMixPolicy = priorityMixPolicy;
            this.TimeCreated = timeCreated;
            this.ConstrainedMaximumCapacity = constrainedMaximumCapacity;
            this.ResiliencyPolicy = resiliencyPolicy;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the upgrade policy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "upgradePolicy")]
        public UpgradePolicy UpgradePolicy {get; set; }

        /// <summary>
        /// Gets or sets policy for automatic repairs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "automaticRepairsPolicy")]
        public AutomaticRepairsPolicy AutomaticRepairsPolicy {get; set; }

        /// <summary>
        /// Gets or sets the virtual machine profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "virtualMachineProfile")]
        public VirtualMachineScaleSetVMProfile VirtualMachineProfile {get; set; }

        /// <summary>
        /// Gets the provisioning state, which only appears in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets specifies whether the Virtual Machine Scale Set should be
        /// overprovisioned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "overprovision")]
        public bool? Overprovision {get; set; }

        /// <summary>
        /// Gets or sets when Overprovision is enabled, extensions are launched only on
        /// the requested number of VMs which are finally kept. This property will
        /// hence ensure that the extensions do not run on the extra overprovisioned
        /// VMs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "doNotRunExtensionsOnOverprovisionedVMs")]
        public bool? DoNotRunExtensionsOnOverprovisionedVMS {get; set; }

        /// <summary>
        /// Gets specifies the ID which uniquely identifies a Virtual Machine Scale
        /// Set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "uniqueId")]
        public string UniqueId {get; private set; }

        /// <summary>
        /// Gets or sets when true this limits the scale set to a single placement
        /// group, of max size 100 virtual machines. NOTE: If singlePlacementGroup is
        /// true, it may be modified to false. However, if singlePlacementGroup is
        /// false, it may not be modified to true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "singlePlacementGroup")]
        public bool? SinglePlacementGroup {get; set; }

        /// <summary>
        /// Gets or sets whether to force strictly even Virtual Machine distribution
        /// cross x-zones in case there is zone outage. zoneBalance property can only
        /// be set if the zones property of the scale set contains more than one zone.
        /// If there are no zones or only one zone specified, then zoneBalance property
        /// should not be set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "zoneBalance")]
        public bool? ZoneBalance {get; set; }

        /// <summary>
        /// Gets or sets fault Domain count for each placement group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "platformFaultDomainCount")]
        public int? PlatformFaultDomainCount {get; set; }

        /// <summary>
        /// Gets or sets specifies information about the proximity placement group that
        /// the virtual machine scale set should be assigned to. Minimum api-version:
        /// 2018-04-01.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "proximityPlacementGroup")]
        public SubResource ProximityPlacementGroup {get; set; }

        /// <summary>
        /// Gets or sets specifies information about the dedicated host group that the
        /// virtual machine scale set resides in. Minimum api-version: 2020-06-01.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "hostGroup")]
        public SubResource HostGroup {get; set; }

        /// <summary>
        /// Gets or sets specifies additional capabilities enabled or disabled on the
        /// Virtual Machines in the Virtual Machine Scale Set. For instance: whether
        /// the Virtual Machines have the capability to support attaching managed data
        /// disks with UltraSSD_LRS storage account type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "additionalCapabilities")]
        public AdditionalCapabilities AdditionalCapabilities {get; set; }

        /// <summary>
        /// Gets or sets specifies the policies applied when scaling in Virtual
        /// Machines in the Virtual Machine Scale Set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "scaleInPolicy")]
        public ScaleInPolicy ScaleInPolicy {get; set; }

        /// <summary>
        /// Gets or sets specifies the orchestration mode for the virtual machine scale
        /// set. Possible values include: &#39;Uniform&#39;, &#39;Flexible&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "orchestrationMode")]
        public string OrchestrationMode {get; set; }

        /// <summary>
        /// Gets or sets specifies the Spot Restore properties for the virtual machine
        /// scale set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "spotRestorePolicy")]
        public SpotRestorePolicy SpotRestorePolicy {get; set; }

        /// <summary>
        /// Gets or sets specifies the desired targets for mixing Spot and Regular
        /// priority VMs within the same VMSS Flex instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "priorityMixPolicy")]
        public PriorityMixPolicy PriorityMixPolicy {get; set; }

        /// <summary>
        /// Gets specifies the time at which the Virtual Machine Scale Set resource was
        /// created. Minimum api-version: 2021-11-01.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "timeCreated")]
        public System.DateTime? TimeCreated {get; private set; }

        /// <summary>
        /// Gets or sets optional property which must either be set to True or omitted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "constrainedMaximumCapacity")]
        public bool? ConstrainedMaximumCapacity {get; set; }

        /// <summary>
        /// Gets or sets policy for Resiliency
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resiliencyPolicy")]
        public ResiliencyPolicy ResiliencyPolicy {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.UpgradePolicy != null)
            {
                this.UpgradePolicy.Validate();
            }

            if (this.VirtualMachineProfile != null)
            {
                this.VirtualMachineProfile.Validate();
            }








            if (this.PriorityMixPolicy != null)
            {
                this.PriorityMixPolicy.Validate();
            }

        }
    }
}