// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Compute.Models
{
    using System.Linq;

    /// <summary>
    /// Specifies the target splits for Spot and Regular priority VMs within a
    /// scale set with flexible orchestration mode. With this property the customer
    /// is able to specify the base number of regular priority VMs created as the
    /// VMSS flex instance scales out and the split between Spot and Regular
    /// priority VMs after this base target has been reached.
    /// </summary>
    public partial class PriorityMixPolicy
    {
        /// <summary>
        /// Initializes a new instance of the PriorityMixPolicy class.
        /// </summary>
        public PriorityMixPolicy()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PriorityMixPolicy class.
        /// </summary>

        /// <param name="baseRegularPriorityCount">The base number of regular priority VMs that will be created in this scale
        /// set as it scales out.
        /// </param>

        /// <param name="regularPriorityPercentageAboveBase">The percentage of VM instances, after the base regular priority count has
        /// been reached, that are expected to use regular priority.
        /// </param>
        public PriorityMixPolicy(int? baseRegularPriorityCount = default(int?), int? regularPriorityPercentageAboveBase = default(int?))

        {
            this.BaseRegularPriorityCount = baseRegularPriorityCount;
            this.RegularPriorityPercentageAboveBase = regularPriorityPercentageAboveBase;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the base number of regular priority VMs that will be created
        /// in this scale set as it scales out.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "baseRegularPriorityCount")]
        public int? BaseRegularPriorityCount {get; set; }

        /// <summary>
        /// Gets or sets the percentage of VM instances, after the base regular
        /// priority count has been reached, that are expected to use regular priority.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "regularPriorityPercentageAboveBase")]
        public int? RegularPriorityPercentageAboveBase {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.BaseRegularPriorityCount != null)
            {
                if (this.BaseRegularPriorityCount < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "BaseRegularPriorityCount", 0);
                }
            }
            if (this.RegularPriorityPercentageAboveBase != null)
            {
                if (this.RegularPriorityPercentageAboveBase > 100)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "RegularPriorityPercentageAboveBase", 100);
                }
                if (this.RegularPriorityPercentageAboveBase < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "RegularPriorityPercentageAboveBase", 0);
                }
            }
        }
    }
}