// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Compute.Models
{
    using System.Linq;

    /// <summary>
    /// The instance view of a virtual machine run command.
    /// </summary>
    public partial class VirtualMachineRunCommandInstanceView
    {
        /// <summary>
        /// Initializes a new instance of the VirtualMachineRunCommandInstanceView class.
        /// </summary>
        public VirtualMachineRunCommandInstanceView()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VirtualMachineRunCommandInstanceView class.
        /// </summary>

        /// <param name="executionState">Script execution status.
        /// Possible values include: &#39;Unknown&#39;, &#39;Pending&#39;, &#39;Running&#39;, &#39;Failed&#39;,
        /// &#39;Succeeded&#39;, &#39;TimedOut&#39;, &#39;Canceled&#39;</param>

        /// <param name="executionMessage">Communicate script configuration errors or execution messages.
        /// </param>

        /// <param name="exitCode">Exit code returned from script execution.
        /// </param>

        /// <param name="output">Script output stream.
        /// </param>

        /// <param name="error">Script error stream.
        /// </param>

        /// <param name="startTime">Script start time.
        /// </param>

        /// <param name="endTime">Script end time.
        /// </param>

        /// <param name="statuses">The resource status information.
        /// </param>
        public VirtualMachineRunCommandInstanceView(string executionState = default(string), string executionMessage = default(string), int? exitCode = default(int?), string output = default(string), string error = default(string), System.DateTime? startTime = default(System.DateTime?), System.DateTime? endTime = default(System.DateTime?), System.Collections.Generic.IList<InstanceViewStatus> statuses = default(System.Collections.Generic.IList<InstanceViewStatus>))

        {
            this.ExecutionState = executionState;
            this.ExecutionMessage = executionMessage;
            this.ExitCode = exitCode;
            this.Output = output;
            this.Error = error;
            this.StartTime = startTime;
            this.EndTime = endTime;
            this.Statuses = statuses;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets script execution status. Possible values include: &#39;Unknown&#39;, &#39;Pending&#39;, &#39;Running&#39;, &#39;Failed&#39;, &#39;Succeeded&#39;, &#39;TimedOut&#39;, &#39;Canceled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "executionState")]
        public string ExecutionState {get; set; }

        /// <summary>
        /// Gets or sets communicate script configuration errors or execution messages.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "executionMessage")]
        public string ExecutionMessage {get; set; }

        /// <summary>
        /// Gets or sets exit code returned from script execution.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "exitCode")]
        public int? ExitCode {get; set; }

        /// <summary>
        /// Gets or sets script output stream.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "output")]
        public string Output {get; set; }

        /// <summary>
        /// Gets or sets script error stream.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "error")]
        public string Error {get; set; }

        /// <summary>
        /// Gets or sets script start time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "startTime")]
        public System.DateTime? StartTime {get; set; }

        /// <summary>
        /// Gets or sets script end time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "endTime")]
        public System.DateTime? EndTime {get; set; }

        /// <summary>
        /// Gets or sets the resource status information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "statuses")]
        public System.Collections.Generic.IList<InstanceViewStatus> Statuses {get; set; }
    }
}