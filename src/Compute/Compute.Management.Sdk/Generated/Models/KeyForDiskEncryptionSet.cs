// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Compute.Models
{
    using System.Linq;

    /// <summary>
    /// Key Vault Key Url to be used for server side encryption of Managed Disks
    /// and Snapshots
    /// </summary>
    public partial class KeyForDiskEncryptionSet
    {
        /// <summary>
        /// Initializes a new instance of the KeyForDiskEncryptionSet class.
        /// </summary>
        public KeyForDiskEncryptionSet()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the KeyForDiskEncryptionSet class.
        /// </summary>

        /// <param name="sourceVault">Resource id of the KeyVault containing the key or secret. This property is
        /// optional and cannot be used if the KeyVault subscription is not the same as
        /// the Disk Encryption Set subscription.
        /// </param>

        /// <param name="keyUrl">Fully versioned Key Url pointing to a key in KeyVault. Version segment of
        /// the Url is required regardless of rotationToLatestKeyVersionEnabled value.
        /// </param>
        public KeyForDiskEncryptionSet(string keyUrl, SourceVault sourceVault = default(SourceVault))

        {
            this.SourceVault = sourceVault;
            this.KeyUrl = keyUrl;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets resource id of the KeyVault containing the key or secret. This
        /// property is optional and cannot be used if the KeyVault subscription is not
        /// the same as the Disk Encryption Set subscription.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceVault")]
        public SourceVault SourceVault {get; set; }

        /// <summary>
        /// Gets or sets fully versioned Key Url pointing to a key in KeyVault. Version
        /// segment of the Url is required regardless of
        /// rotationToLatestKeyVersionEnabled value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "keyUrl")]
        public string KeyUrl {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.KeyUrl == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "KeyUrl");
            }


        }
    }
}