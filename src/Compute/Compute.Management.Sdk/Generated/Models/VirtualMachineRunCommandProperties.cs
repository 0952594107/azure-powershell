// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Compute.Models
{
    using System.Linq;

    /// <summary>
    /// Describes the properties of a Virtual Machine run command.
    /// </summary>
    public partial class VirtualMachineRunCommandProperties
    {
        /// <summary>
        /// Initializes a new instance of the VirtualMachineRunCommandProperties class.
        /// </summary>
        public VirtualMachineRunCommandProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VirtualMachineRunCommandProperties class.
        /// </summary>

        /// <param name="source">The source of the run command script.
        /// </param>

        /// <param name="parameters">The parameters used by the script.
        /// </param>

        /// <param name="protectedParameters">The parameters used by the script.
        /// </param>

        /// <param name="asyncExecution">Optional. If set to true, provisioning will complete as soon as the script
        /// starts and will not wait for script to complete.
        /// </param>

        /// <param name="runAsUser">Specifies the user account on the VM when executing the run command.
        /// </param>

        /// <param name="runAsPassword">Specifies the user account password on the VM when executing the run
        /// command.
        /// </param>

        /// <param name="timeoutInSeconds">The timeout in seconds to execute the run command.
        /// </param>

        /// <param name="outputBlobUri">Specifies the Azure storage blob where script output stream will be
        /// uploaded. Use a SAS URI with read, append, create, write access OR use
        /// managed identity to provide the VM access to the blob. Refer
        /// outputBlobManagedIdentity parameter.
        /// </param>

        /// <param name="errorBlobUri">Specifies the Azure storage blob where script error stream will be
        /// uploaded. Use a SAS URI with read, append, create, write access OR use
        /// managed identity to provide the VM access to the blob. Refer
        /// errorBlobManagedIdentity parameter.
        /// </param>

        /// <param name="outputBlobManagedIdentity">User-assigned managed identity that has access to outputBlobUri storage
        /// blob. Use an empty object in case of system-assigned identity. Make sure
        /// managed identity has been given access to blob&#39;s container with &#39;Storage
        /// Blob Data Contributor&#39; role assignment. In case of user-assigned identity,
        /// make sure you add it under VM&#39;s identity. For more info on managed identity
        /// and Run Command, refer https://aka.ms/ManagedIdentity and
        /// https://aka.ms/RunCommandManaged
        /// </param>

        /// <param name="errorBlobManagedIdentity">User-assigned managed identity that has access to errorBlobUri storage
        /// blob. Use an empty object in case of system-assigned identity. Make sure
        /// managed identity has been given access to blob&#39;s container with &#39;Storage
        /// Blob Data Contributor&#39; role assignment. In case of user-assigned identity,
        /// make sure you add it under VM&#39;s identity. For more info on managed identity
        /// and Run Command, refer https://aka.ms/ManagedIdentity and
        /// https://aka.ms/RunCommandManaged
        /// </param>

        /// <param name="provisioningState">The provisioning state, which only appears in the response. If
        /// treatFailureAsDeploymentFailure set to true, any failure in the script will
        /// fail the deployment and ProvisioningState will be marked as Failed. If
        /// treatFailureAsDeploymentFailure set to false, ProvisioningState would only
        /// reflect whether the run command was run or not by the extensions platform,
        /// it would not indicate whether script failed in case of script failures. See
        /// instance view of run command in case of script failures to see
        /// executionMessage, output, error:
        /// https://aka.ms/runcommandmanaged#get-execution-status-and-results
        /// </param>

        /// <param name="instanceView">The virtual machine run command instance view.
        /// </param>

        /// <param name="treatFailureAsDeploymentFailure">Optional. If set to true, any failure in the script will fail the
        /// deployment and ProvisioningState will be marked as Failed. If set to false,
        /// ProvisioningState would only reflect whether the run command was run or not
        /// by the extensions platform, it would not indicate whether script failed in
        /// case of script failures. See instance view of run command in case of script
        /// failures to see executionMessage, output, error:
        /// https://aka.ms/runcommandmanaged#get-execution-status-and-results
        /// </param>
        public VirtualMachineRunCommandProperties(VirtualMachineRunCommandScriptSource source = default(VirtualMachineRunCommandScriptSource), System.Collections.Generic.IList<RunCommandInputParameter> parameters = default(System.Collections.Generic.IList<RunCommandInputParameter>), System.Collections.Generic.IList<RunCommandInputParameter> protectedParameters = default(System.Collections.Generic.IList<RunCommandInputParameter>), bool? asyncExecution = default(bool?), string runAsUser = default(string), string runAsPassword = default(string), int? timeoutInSeconds = default(int?), string outputBlobUri = default(string), string errorBlobUri = default(string), RunCommandManagedIdentity outputBlobManagedIdentity = default(RunCommandManagedIdentity), RunCommandManagedIdentity errorBlobManagedIdentity = default(RunCommandManagedIdentity), string provisioningState = default(string), VirtualMachineRunCommandInstanceView instanceView = default(VirtualMachineRunCommandInstanceView), bool? treatFailureAsDeploymentFailure = default(bool?))

        {
            this.Source = source;
            this.Parameters = parameters;
            this.ProtectedParameters = protectedParameters;
            this.AsyncExecution = asyncExecution;
            this.RunAsUser = runAsUser;
            this.RunAsPassword = runAsPassword;
            this.TimeoutInSeconds = timeoutInSeconds;
            this.OutputBlobUri = outputBlobUri;
            this.ErrorBlobUri = errorBlobUri;
            this.OutputBlobManagedIdentity = outputBlobManagedIdentity;
            this.ErrorBlobManagedIdentity = errorBlobManagedIdentity;
            this.ProvisioningState = provisioningState;
            this.InstanceView = instanceView;
            this.TreatFailureAsDeploymentFailure = treatFailureAsDeploymentFailure;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the source of the run command script.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "source")]
        public VirtualMachineRunCommandScriptSource Source {get; set; }

        /// <summary>
        /// Gets or sets the parameters used by the script.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "parameters")]
        public System.Collections.Generic.IList<RunCommandInputParameter> Parameters {get; set; }

        /// <summary>
        /// Gets or sets the parameters used by the script.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "protectedParameters")]
        public System.Collections.Generic.IList<RunCommandInputParameter> ProtectedParameters {get; set; }

        /// <summary>
        /// Gets or sets optional. If set to true, provisioning will complete as soon
        /// as the script starts and will not wait for script to complete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "asyncExecution")]
        public bool? AsyncExecution {get; set; }

        /// <summary>
        /// Gets or sets specifies the user account on the VM when executing the run
        /// command.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "runAsUser")]
        public string RunAsUser {get; set; }

        /// <summary>
        /// Gets or sets specifies the user account password on the VM when executing
        /// the run command.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "runAsPassword")]
        public string RunAsPassword {get; set; }

        /// <summary>
        /// Gets or sets the timeout in seconds to execute the run command.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "timeoutInSeconds")]
        public int? TimeoutInSeconds {get; set; }

        /// <summary>
        /// Gets or sets specifies the Azure storage blob where script output stream
        /// will be uploaded. Use a SAS URI with read, append, create, write access OR
        /// use managed identity to provide the VM access to the blob. Refer
        /// outputBlobManagedIdentity parameter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "outputBlobUri")]
        public string OutputBlobUri {get; set; }

        /// <summary>
        /// Gets or sets specifies the Azure storage blob where script error stream
        /// will be uploaded. Use a SAS URI with read, append, create, write access OR
        /// use managed identity to provide the VM access to the blob. Refer
        /// errorBlobManagedIdentity parameter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "errorBlobUri")]
        public string ErrorBlobUri {get; set; }

        /// <summary>
        /// Gets or sets user-assigned managed identity that has access to
        /// outputBlobUri storage blob. Use an empty object in case of system-assigned
        /// identity. Make sure managed identity has been given access to blob&#39;s
        /// container with &#39;Storage Blob Data Contributor&#39; role assignment. In case of
        /// user-assigned identity, make sure you add it under VM&#39;s identity. For more
        /// info on managed identity and Run Command, refer
        /// https://aka.ms/ManagedIdentity and https://aka.ms/RunCommandManaged
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "outputBlobManagedIdentity")]
        public RunCommandManagedIdentity OutputBlobManagedIdentity {get; set; }

        /// <summary>
        /// Gets or sets user-assigned managed identity that has access to errorBlobUri
        /// storage blob. Use an empty object in case of system-assigned identity. Make
        /// sure managed identity has been given access to blob&#39;s container with
        /// &#39;Storage Blob Data Contributor&#39; role assignment. In case of user-assigned
        /// identity, make sure you add it under VM&#39;s identity. For more info on
        /// managed identity and Run Command, refer https://aka.ms/ManagedIdentity and
        /// https://aka.ms/RunCommandManaged
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "errorBlobManagedIdentity")]
        public RunCommandManagedIdentity ErrorBlobManagedIdentity {get; set; }

        /// <summary>
        /// Gets the provisioning state, which only appears in the response. If
        /// treatFailureAsDeploymentFailure set to true, any failure in the script will
        /// fail the deployment and ProvisioningState will be marked as Failed. If
        /// treatFailureAsDeploymentFailure set to false, ProvisioningState would only
        /// reflect whether the run command was run or not by the extensions platform,
        /// it would not indicate whether script failed in case of script failures. See
        /// instance view of run command in case of script failures to see
        /// executionMessage, output, error:
        /// https://aka.ms/runcommandmanaged#get-execution-status-and-results
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets the virtual machine run command instance view.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "instanceView")]
        public VirtualMachineRunCommandInstanceView InstanceView {get; private set; }

        /// <summary>
        /// Gets or sets optional. If set to true, any failure in the script will fail
        /// the deployment and ProvisioningState will be marked as Failed. If set to
        /// false, ProvisioningState would only reflect whether the run command was run
        /// or not by the extensions platform, it would not indicate whether script
        /// failed in case of script failures. See instance view of run command in case
        /// of script failures to see executionMessage, output, error:
        /// https://aka.ms/runcommandmanaged#get-execution-status-and-results
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "treatFailureAsDeploymentFailure")]
        public bool? TreatFailureAsDeploymentFailure {get; set; }
    }
}