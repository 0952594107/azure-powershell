// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Compute.Models
{
    using System.Linq;

    /// <summary>
    /// Create or update Restore Point collection parameters.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class RestorePointCollection : Resource
    {
        /// <summary>
        /// Initializes a new instance of the RestorePointCollection class.
        /// </summary>
        public RestorePointCollection()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RestorePointCollection class.
        /// </summary>

        /// <param name="id">Resource Id
        /// </param>

        /// <param name="name">Resource name
        /// </param>

        /// <param name="type">Resource type
        /// </param>

        /// <param name="location">Resource location
        /// </param>

        /// <param name="tags">Resource tags
        /// </param>

        /// <param name="source">The properties of the source resource that this restore point collection is
        /// created from.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the restore point collection.
        /// </param>

        /// <param name="restorePointCollectionId">The unique id of the restore point collection.
        /// </param>

        /// <param name="restorePoints">A list containing all restore points created under this restore point
        /// collection.
        /// </param>
        public RestorePointCollection(string location, string id = default(string), string name = default(string), string type = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), RestorePointCollectionSourceProperties source = default(RestorePointCollectionSourceProperties), string provisioningState = default(string), string restorePointCollectionId = default(string), System.Collections.Generic.IList<RestorePoint> restorePoints = default(System.Collections.Generic.IList<RestorePoint>))

        : base(location, id, name, type, tags)
        {
            this.Source = source;
            this.ProvisioningState = provisioningState;
            this.RestorePointCollectionId = restorePointCollectionId;
            this.RestorePoints = restorePoints;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the properties of the source resource that this restore point
        /// collection is created from.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.source")]
        public RestorePointCollectionSourceProperties Source {get; set; }

        /// <summary>
        /// Gets the provisioning state of the restore point collection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets the unique id of the restore point collection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.restorePointCollectionId")]
        public string RestorePointCollectionId {get; private set; }

        /// <summary>
        /// Gets a list containing all restore points created under this restore point
        /// collection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.restorePoints")]
        public System.Collections.Generic.IList<RestorePoint> RestorePoints {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();



            if (this.RestorePoints != null)
            {
                foreach (var element in this.RestorePoints)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}