// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Compute.Models
{
    using System.Linq;

    /// <summary>
    /// Snapshot update resource.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class SnapshotUpdate
    {
        /// <summary>
        /// Initializes a new instance of the SnapshotUpdate class.
        /// </summary>
        public SnapshotUpdate()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SnapshotUpdate class.
        /// </summary>

        /// <param name="tags">Resource tags
        /// </param>

        /// <param name="sku">The snapshots sku name. Can be Standard_LRS, Premium_LRS, or Standard_ZRS.
        /// This is an optional parameter for incremental snapshot and the default
        /// behavior is the SKU will be set to the same sku as the previous snapshot
        /// </param>

        /// <param name="encryption">Encryption property can be used to encrypt data at rest with customer
        /// managed keys or platform managed keys.
        /// </param>

        /// <param name="supportedCapabilities">List of supported capabilities for the image from which the OS disk was
        /// created.
        /// </param>

        /// <param name="osType">the Operating System type.
        /// Possible values include: &#39;Windows&#39;, &#39;Linux&#39;</param>

        /// <param name="diskSizeGb">If creationData.createOption is Empty, this field is mandatory and it
        /// indicates the size of the disk to create. If this field is present for
        /// updates or creation with other options, it indicates a resize. Resizes are
        /// only allowed if the disk is not attached to a running VM, and can only
        /// increase the disk&#39;s size.
        /// </param>

        /// <param name="encryptionSettingsCollection">Encryption settings collection used be Azure Disk Encryption, can contain
        /// multiple encryption settings per disk or snapshot.
        /// </param>

        /// <param name="networkAccessPolicy">Policy for accessing the disk via network.
        /// Possible values include: &#39;AllowAll&#39;, &#39;AllowPrivate&#39;, &#39;DenyAll&#39;</param>

        /// <param name="diskAccessId">ARM id of the DiskAccess resource for using private endpoints on disks.
        /// </param>

        /// <param name="supportsHibernation">Indicates the OS on a snapshot supports hibernation.
        /// </param>

        /// <param name="publicNetworkAccess">Policy for controlling export on the disk.
        /// Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;</param>

        /// <param name="dataAccessAuthMode">Additional authentication requirements when exporting or uploading to a
        /// disk or snapshot.
        /// Possible values include: &#39;AzureActiveDirectory&#39;, &#39;None&#39;</param>
        public SnapshotUpdate(System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), SnapshotSku sku = default(SnapshotSku), Encryption encryption = default(Encryption), SupportedCapabilities supportedCapabilities = default(SupportedCapabilities), OperatingSystemTypes? osType = default(OperatingSystemTypes?), int? diskSizeGb = default(int?), EncryptionSettingsCollection encryptionSettingsCollection = default(EncryptionSettingsCollection), string networkAccessPolicy = default(string), string diskAccessId = default(string), bool? supportsHibernation = default(bool?), string publicNetworkAccess = default(string), string dataAccessAuthMode = default(string))

        {
            this.Tags = tags;
            this.Sku = sku;
            this.Encryption = encryption;
            this.SupportedCapabilities = supportedCapabilities;
            this.OSType = osType;
            this.DiskSizeGb = diskSizeGb;
            this.EncryptionSettingsCollection = encryptionSettingsCollection;
            this.NetworkAccessPolicy = networkAccessPolicy;
            this.DiskAccessId = diskAccessId;
            this.SupportsHibernation = supportsHibernation;
            this.PublicNetworkAccess = publicNetworkAccess;
            this.DataAccessAuthMode = dataAccessAuthMode;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets resource tags
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tags")]
        public System.Collections.Generic.IDictionary<string, string> Tags {get; set; }

        /// <summary>
        /// Gets or sets the snapshots sku name. Can be Standard_LRS, Premium_LRS, or
        /// Standard_ZRS. This is an optional parameter for incremental snapshot and
        /// the default behavior is the SKU will be set to the same sku as the previous
        /// snapshot
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sku")]
        public SnapshotSku Sku {get; set; }

        /// <summary>
        /// Gets or sets encryption property can be used to encrypt data at rest with
        /// customer managed keys or platform managed keys.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.encryption")]
        public Encryption Encryption {get; set; }

        /// <summary>
        /// Gets or sets list of supported capabilities for the image from which the OS
        /// disk was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.supportedCapabilities")]
        public SupportedCapabilities SupportedCapabilities {get; set; }

        /// <summary>
        /// Gets or sets the Operating System type. Possible values include: &#39;Windows&#39;, &#39;Linux&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.osType")]
        public OperatingSystemTypes? OSType {get; set; }

        /// <summary>
        /// Gets or sets if creationData.createOption is Empty, this field is mandatory
        /// and it indicates the size of the disk to create. If this field is present
        /// for updates or creation with other options, it indicates a resize. Resizes
        /// are only allowed if the disk is not attached to a running VM, and can only
        /// increase the disk&#39;s size.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.diskSizeGB")]
        public int? DiskSizeGb {get; set; }

        /// <summary>
        /// Gets or sets encryption settings collection used be Azure Disk Encryption,
        /// can contain multiple encryption settings per disk or snapshot.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.encryptionSettingsCollection")]
        public EncryptionSettingsCollection EncryptionSettingsCollection {get; set; }

        /// <summary>
        /// Gets or sets policy for accessing the disk via network. Possible values include: &#39;AllowAll&#39;, &#39;AllowPrivate&#39;, &#39;DenyAll&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.networkAccessPolicy")]
        public string NetworkAccessPolicy {get; set; }

        /// <summary>
        /// Gets or sets aRM id of the DiskAccess resource for using private endpoints
        /// on disks.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.diskAccessId")]
        public string DiskAccessId {get; set; }

        /// <summary>
        /// Gets or sets indicates the OS on a snapshot supports hibernation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.supportsHibernation")]
        public bool? SupportsHibernation {get; set; }

        /// <summary>
        /// Gets or sets policy for controlling export on the disk. Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.publicNetworkAccess")]
        public string PublicNetworkAccess {get; set; }

        /// <summary>
        /// Gets or sets additional authentication requirements when exporting or
        /// uploading to a disk or snapshot. Possible values include: &#39;AzureActiveDirectory&#39;, &#39;None&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.dataAccessAuthMode")]
        public string DataAccessAuthMode {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {





            if (this.EncryptionSettingsCollection != null)
            {
                this.EncryptionSettingsCollection.Validate();
            }




        }
    }
}