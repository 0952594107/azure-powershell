// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Compute.Models
{
    using System.Linq;

    /// <summary>
    /// Describes the properties of a Run Command metadata.
    /// </summary>
    public partial class RunCommandDocumentBase
    {
        /// <summary>
        /// Initializes a new instance of the RunCommandDocumentBase class.
        /// </summary>
        public RunCommandDocumentBase()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RunCommandDocumentBase class.
        /// </summary>

        /// <param name="schema">The VM run command schema.
        /// </param>

        /// <param name="id">The VM run command id.
        /// </param>

        /// <param name="osType">The Operating System type.
        /// Possible values include: &#39;Windows&#39;, &#39;Linux&#39;</param>

        /// <param name="label">The VM run command label.
        /// </param>

        /// <param name="description">The VM run command description.
        /// </param>
        public RunCommandDocumentBase(string schema, string id, OperatingSystemTypes osType, string label, string description)

        {
            this.Schema = schema;
            this.Id = id;
            this.OSType = osType;
            this.Label = label;
            this.Description = description;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the VM run command schema.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "$schema")]
        public string Schema {get; set; }

        /// <summary>
        /// Gets or sets the VM run command id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public string Id {get; set; }

        /// <summary>
        /// Gets or sets the Operating System type. Possible values include: &#39;Windows&#39;, &#39;Linux&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "osType")]
        public OperatingSystemTypes OSType {get; set; }

        /// <summary>
        /// Gets or sets the VM run command label.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "label")]
        public string Label {get; set; }

        /// <summary>
        /// Gets or sets the VM run command description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "description")]
        public string Description {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Schema == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Schema");
            }
            if (this.Id == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Id");
            }
            if (this.Label == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Label");
            }
            if (this.Description == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Description");
            }





        }
    }
}