// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Compute.Models
{
    using System.Linq;

    /// <summary>
    /// Describes a Virtual Machine Image.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class VirtualMachineImage : VirtualMachineImageResource
    {
        /// <summary>
        /// Initializes a new instance of the VirtualMachineImage class.
        /// </summary>
        public VirtualMachineImage()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VirtualMachineImage class.
        /// </summary>

        /// <param name="id">Resource Id
        /// </param>

        /// <param name="name">The name of the resource.
        /// </param>

        /// <param name="location">The supported Azure location of the resource.
        /// </param>

        /// <param name="tags">Specifies the tags that are assigned to the virtual machine. For more
        /// information about using tags, see [Using tags to organize your Azure
        /// resources](https://docs.microsoft.com/azure/azure-resource-manager/resource-group-using-tags.md).
        /// </param>

        /// <param name="extendedLocation">The extended location of the Virtual Machine.
        /// </param>

        /// <param name="plan">Used for establishing the purchase context of any 3rd Party artifact
        /// through MarketPlace.
        /// </param>

        /// <param name="osDiskImage">Contains the os disk image information.
        /// </param>

        /// <param name="dataDiskImages">
        /// </param>

        /// <param name="automaticOSUpgradeProperties">Describes automatic OS upgrade properties on the image.
        /// </param>

        /// <param name="hyperVGeneration">Specifies the HyperVGeneration Type
        /// Possible values include: &#39;V1&#39;, &#39;V2&#39;</param>

        /// <param name="disallowed">Specifies disallowed configuration for the VirtualMachine created from the
        /// image
        /// </param>

        /// <param name="features">
        /// </param>

        /// <param name="architecture">Specifies the Architecture Type
        /// Possible values include: &#39;x64&#39;, &#39;Arm64&#39;</param>

        /// <param name="imageDeprecationStatus">Describes image deprecation status properties on the image.
        /// </param>
        public VirtualMachineImage(string name, string location, string id = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), ExtendedLocation extendedLocation = default(ExtendedLocation), PurchasePlan plan = default(PurchasePlan), OSDiskImage osDiskImage = default(OSDiskImage), System.Collections.Generic.IList<DataDiskImage> dataDiskImages = default(System.Collections.Generic.IList<DataDiskImage>), AutomaticOSUpgradeProperties automaticOSUpgradeProperties = default(AutomaticOSUpgradeProperties), string hyperVGeneration = default(string), DisallowedConfiguration disallowed = default(DisallowedConfiguration), System.Collections.Generic.IList<VirtualMachineImageFeature> features = default(System.Collections.Generic.IList<VirtualMachineImageFeature>), string architecture = default(string), ImageDeprecationStatus imageDeprecationStatus = default(ImageDeprecationStatus))

        : base(name, location, id, tags, extendedLocation)
        {
            this.Plan = plan;
            this.OSDiskImage = osDiskImage;
            this.DataDiskImages = dataDiskImages;
            this.AutomaticOSUpgradeProperties = automaticOSUpgradeProperties;
            this.HyperVGeneration = hyperVGeneration;
            this.Disallowed = disallowed;
            this.Features = features;
            this.Architecture = architecture;
            this.ImageDeprecationStatus = imageDeprecationStatus;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets used for establishing the purchase context of any 3rd Party
        /// artifact through MarketPlace.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.plan")]
        public PurchasePlan Plan {get; set; }

        /// <summary>
        /// Gets or sets contains the os disk image information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.osDiskImage")]
        public OSDiskImage OSDiskImage {get; set; }

        /// <summary>
        /// Gets or sets
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.dataDiskImages")]
        public System.Collections.Generic.IList<DataDiskImage> DataDiskImages {get; set; }

        /// <summary>
        /// Gets or sets describes automatic OS upgrade properties on the image.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.automaticOSUpgradeProperties")]
        public AutomaticOSUpgradeProperties AutomaticOSUpgradeProperties {get; set; }

        /// <summary>
        /// Gets or sets specifies the HyperVGeneration Type Possible values include: &#39;V1&#39;, &#39;V2&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.hyperVGeneration")]
        public string HyperVGeneration {get; set; }

        /// <summary>
        /// Gets or sets specifies disallowed configuration for the VirtualMachine
        /// created from the image
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.disallowed")]
        public DisallowedConfiguration Disallowed {get; set; }

        /// <summary>
        /// Gets or sets
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.features")]
        public System.Collections.Generic.IList<VirtualMachineImageFeature> Features {get; set; }

        /// <summary>
        /// Gets or sets specifies the Architecture Type Possible values include: &#39;x64&#39;, &#39;Arm64&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.architecture")]
        public string Architecture {get; set; }

        /// <summary>
        /// Gets or sets describes image deprecation status properties on the image.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.imageDeprecationStatus")]
        public ImageDeprecationStatus ImageDeprecationStatus {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (this.Plan != null)
            {
                this.Plan.Validate();
            }
            if (this.OSDiskImage != null)
            {
                this.OSDiskImage.Validate();
            }

            if (this.AutomaticOSUpgradeProperties != null)
            {
                this.AutomaticOSUpgradeProperties.Validate();
            }





        }
    }
}