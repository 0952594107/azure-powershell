// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Compute.Models
{
    using System.Linq;

    /// <summary>
    /// The source user image virtual hard disk. Only tags may be updated.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class ImageUpdate : UpdateResource
    {
        /// <summary>
        /// Initializes a new instance of the ImageUpdate class.
        /// </summary>
        public ImageUpdate()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ImageUpdate class.
        /// </summary>

        /// <param name="tags">Resource tags
        /// </param>

        /// <param name="sourceVirtualMachine">The source virtual machine from which Image is created.
        /// </param>

        /// <param name="storageProfile">Specifies the storage settings for the virtual machine disks.
        /// </param>

        /// <param name="provisioningState">The provisioning state.
        /// </param>

        /// <param name="hyperVGeneration">Specifies the HyperVGenerationType of the VirtualMachine created from the
        /// image. From API Version 2019-03-01 if the image source is a blob, then we
        /// need the user to specify the value, if the source is managed resource like
        /// disk or snapshot, we may require the user to specify the property if we
        /// cannot deduce it from the source managed resource.
        /// Possible values include: &#39;V1&#39;, &#39;V2&#39;</param>
        public ImageUpdate(System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), SubResource sourceVirtualMachine = default(SubResource), ImageStorageProfile storageProfile = default(ImageStorageProfile), string provisioningState = default(string), string hyperVGeneration = default(string))

        : base(tags)
        {
            this.SourceVirtualMachine = sourceVirtualMachine;
            this.StorageProfile = storageProfile;
            this.ProvisioningState = provisioningState;
            this.HyperVGeneration = hyperVGeneration;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the source virtual machine from which Image is created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.sourceVirtualMachine")]
        public SubResource SourceVirtualMachine {get; set; }

        /// <summary>
        /// Gets or sets specifies the storage settings for the virtual machine disks.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.storageProfile")]
        public ImageStorageProfile StorageProfile {get; set; }

        /// <summary>
        /// Gets the provisioning state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets specifies the HyperVGenerationType of the VirtualMachine
        /// created from the image. From API Version 2019-03-01 if the image source is
        /// a blob, then we need the user to specify the value, if the source is
        /// managed resource like disk or snapshot, we may require the user to specify
        /// the property if we cannot deduce it from the source managed resource. Possible values include: &#39;V1&#39;, &#39;V2&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.hyperVGeneration")]
        public string HyperVGeneration {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {

            if (this.StorageProfile != null)
            {
                this.StorageProfile.Validate();
            }


        }
    }
}