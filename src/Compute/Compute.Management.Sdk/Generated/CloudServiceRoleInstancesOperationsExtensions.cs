// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Compute
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for CloudServiceRoleInstancesOperations
    /// </summary>
    public static partial class CloudServiceRoleInstancesOperationsExtensions
    {
        /// <summary>
        /// Deletes a role instance from a cloud service.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Name of the role instance.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Name of the cloud service.
        /// </param>
        public static void Delete(this ICloudServiceRoleInstancesOperations operations, string roleInstanceName, string resourceGroupName, string cloudServiceName)
        {
                ((ICloudServiceRoleInstancesOperations)operations).DeleteAsync(roleInstanceName, resourceGroupName, cloudServiceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes a role instance from a cloud service.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Name of the role instance.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Name of the cloud service.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this ICloudServiceRoleInstancesOperations operations, string roleInstanceName, string resourceGroupName, string cloudServiceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(roleInstanceName, resourceGroupName, cloudServiceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Gets a role instance from a cloud service.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Name of the role instance.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Name of the cloud service.
        /// </param>
        /// <param name='expand'>
        /// The expand expression to apply to the operation. &#39;UserData&#39; is not
        /// supported for cloud services.
        /// </param>
        public static RoleInstance Get(this ICloudServiceRoleInstancesOperations operations, string roleInstanceName, string resourceGroupName, string cloudServiceName, InstanceViewTypes? expand = default(InstanceViewTypes?))
        {
                return ((ICloudServiceRoleInstancesOperations)operations).GetAsync(roleInstanceName, resourceGroupName, cloudServiceName, expand).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a role instance from a cloud service.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Name of the role instance.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Name of the cloud service.
        /// </param>
        /// <param name='expand'>
        /// The expand expression to apply to the operation. &#39;UserData&#39; is not
        /// supported for cloud services.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RoleInstance> GetAsync(this ICloudServiceRoleInstancesOperations operations, string roleInstanceName, string resourceGroupName, string cloudServiceName, InstanceViewTypes? expand = default(InstanceViewTypes?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(roleInstanceName, resourceGroupName, cloudServiceName, expand, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Retrieves information about the run-time state of a role instance in a
        /// cloud service.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Name of the role instance.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Name of the cloud service.
        /// </param>
        public static RoleInstanceView GetInstanceView(this ICloudServiceRoleInstancesOperations operations, string roleInstanceName, string resourceGroupName, string cloudServiceName)
        {
                return ((ICloudServiceRoleInstancesOperations)operations).GetInstanceViewAsync(roleInstanceName, resourceGroupName, cloudServiceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Retrieves information about the run-time state of a role instance in a
        /// cloud service.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Name of the role instance.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Name of the cloud service.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RoleInstanceView> GetInstanceViewAsync(this ICloudServiceRoleInstancesOperations operations, string roleInstanceName, string resourceGroupName, string cloudServiceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetInstanceViewWithHttpMessagesAsync(roleInstanceName, resourceGroupName, cloudServiceName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets the list of all role instances in a cloud service. Use nextLink
        /// property in the response to get the next page of role instances. Do this
        /// till nextLink is null to fetch all the role instances.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Name of the cloud service.
        /// </param>
        /// <param name='expand'>
        /// The expand expression to apply to the operation. &#39;UserData&#39; is not
        /// supported for cloud services.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<RoleInstance> List(this ICloudServiceRoleInstancesOperations operations, string resourceGroupName, string cloudServiceName, InstanceViewTypes? expand = default(InstanceViewTypes?))
        {
                return ((ICloudServiceRoleInstancesOperations)operations).ListAsync(resourceGroupName, cloudServiceName, expand).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the list of all role instances in a cloud service. Use nextLink
        /// property in the response to get the next page of role instances. Do this
        /// till nextLink is null to fetch all the role instances.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Name of the cloud service.
        /// </param>
        /// <param name='expand'>
        /// The expand expression to apply to the operation. &#39;UserData&#39; is not
        /// supported for cloud services.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<RoleInstance>> ListAsync(this ICloudServiceRoleInstancesOperations operations, string resourceGroupName, string cloudServiceName, InstanceViewTypes? expand = default(InstanceViewTypes?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, cloudServiceName, expand, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The Reboot Role Instance asynchronous operation requests a reboot of a role
        /// instance in the cloud service.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Name of the role instance.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Name of the cloud service.
        /// </param>
        public static void Restart(this ICloudServiceRoleInstancesOperations operations, string roleInstanceName, string resourceGroupName, string cloudServiceName)
        {
                ((ICloudServiceRoleInstancesOperations)operations).RestartAsync(roleInstanceName, resourceGroupName, cloudServiceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The Reboot Role Instance asynchronous operation requests a reboot of a role
        /// instance in the cloud service.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Name of the role instance.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Name of the cloud service.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task RestartAsync(this ICloudServiceRoleInstancesOperations operations, string roleInstanceName, string resourceGroupName, string cloudServiceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.RestartWithHttpMessagesAsync(roleInstanceName, resourceGroupName, cloudServiceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// The Reimage Role Instance asynchronous operation reinstalls the operating
        /// system on instances of web roles or worker roles.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Name of the role instance.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Name of the cloud service.
        /// </param>
        public static void Reimage(this ICloudServiceRoleInstancesOperations operations, string roleInstanceName, string resourceGroupName, string cloudServiceName)
        {
                ((ICloudServiceRoleInstancesOperations)operations).ReimageAsync(roleInstanceName, resourceGroupName, cloudServiceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The Reimage Role Instance asynchronous operation reinstalls the operating
        /// system on instances of web roles or worker roles.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Name of the role instance.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Name of the cloud service.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ReimageAsync(this ICloudServiceRoleInstancesOperations operations, string roleInstanceName, string resourceGroupName, string cloudServiceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.ReimageWithHttpMessagesAsync(roleInstanceName, resourceGroupName, cloudServiceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// The Rebuild Role Instance asynchronous operation reinstalls the operating
        /// system on instances of web roles or worker roles and initializes the
        /// storage resources that are used by them. If you do not want to initialize
        /// storage resources, you can use Reimage Role Instance.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Name of the role instance.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Name of the cloud service.
        /// </param>
        public static void Rebuild(this ICloudServiceRoleInstancesOperations operations, string roleInstanceName, string resourceGroupName, string cloudServiceName)
        {
                ((ICloudServiceRoleInstancesOperations)operations).RebuildAsync(roleInstanceName, resourceGroupName, cloudServiceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The Rebuild Role Instance asynchronous operation reinstalls the operating
        /// system on instances of web roles or worker roles and initializes the
        /// storage resources that are used by them. If you do not want to initialize
        /// storage resources, you can use Reimage Role Instance.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Name of the role instance.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Name of the cloud service.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task RebuildAsync(this ICloudServiceRoleInstancesOperations operations, string roleInstanceName, string resourceGroupName, string cloudServiceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.RebuildWithHttpMessagesAsync(roleInstanceName, resourceGroupName, cloudServiceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Gets a remote desktop file for a role instance in a cloud service.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Name of the role instance.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Name of the cloud service.
        /// </param>
        public static System.IO.Stream GetRemoteDesktopFile(this ICloudServiceRoleInstancesOperations operations, string roleInstanceName, string resourceGroupName, string cloudServiceName)
        {
                return ((ICloudServiceRoleInstancesOperations)operations).GetRemoteDesktopFileAsync(roleInstanceName, resourceGroupName, cloudServiceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a remote desktop file for a role instance in a cloud service.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Name of the role instance.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Name of the cloud service.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.IO.Stream> GetRemoteDesktopFileAsync(this ICloudServiceRoleInstancesOperations operations, string roleInstanceName, string resourceGroupName, string cloudServiceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var _result = await operations.GetRemoteDesktopFileWithHttpMessagesAsync(roleInstanceName, resourceGroupName, cloudServiceName, null, cancellationToken).ConfigureAwait(false);
            _result.Request.Dispose();
            return _result.Body;
        }
        /// <summary>
        /// Deletes a role instance from a cloud service.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Name of the role instance.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Name of the cloud service.
        /// </param>
        public static void BeginDelete(this ICloudServiceRoleInstancesOperations operations, string roleInstanceName, string resourceGroupName, string cloudServiceName)
        {
                ((ICloudServiceRoleInstancesOperations)operations).BeginDeleteAsync(roleInstanceName, resourceGroupName, cloudServiceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes a role instance from a cloud service.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Name of the role instance.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Name of the cloud service.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDeleteAsync(this ICloudServiceRoleInstancesOperations operations, string roleInstanceName, string resourceGroupName, string cloudServiceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDeleteWithHttpMessagesAsync(roleInstanceName, resourceGroupName, cloudServiceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// The Reboot Role Instance asynchronous operation requests a reboot of a role
        /// instance in the cloud service.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Name of the role instance.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Name of the cloud service.
        /// </param>
        public static void BeginRestart(this ICloudServiceRoleInstancesOperations operations, string roleInstanceName, string resourceGroupName, string cloudServiceName)
        {
                ((ICloudServiceRoleInstancesOperations)operations).BeginRestartAsync(roleInstanceName, resourceGroupName, cloudServiceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The Reboot Role Instance asynchronous operation requests a reboot of a role
        /// instance in the cloud service.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Name of the role instance.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Name of the cloud service.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginRestartAsync(this ICloudServiceRoleInstancesOperations operations, string roleInstanceName, string resourceGroupName, string cloudServiceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginRestartWithHttpMessagesAsync(roleInstanceName, resourceGroupName, cloudServiceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// The Reimage Role Instance asynchronous operation reinstalls the operating
        /// system on instances of web roles or worker roles.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Name of the role instance.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Name of the cloud service.
        /// </param>
        public static void BeginReimage(this ICloudServiceRoleInstancesOperations operations, string roleInstanceName, string resourceGroupName, string cloudServiceName)
        {
                ((ICloudServiceRoleInstancesOperations)operations).BeginReimageAsync(roleInstanceName, resourceGroupName, cloudServiceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The Reimage Role Instance asynchronous operation reinstalls the operating
        /// system on instances of web roles or worker roles.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Name of the role instance.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Name of the cloud service.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginReimageAsync(this ICloudServiceRoleInstancesOperations operations, string roleInstanceName, string resourceGroupName, string cloudServiceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginReimageWithHttpMessagesAsync(roleInstanceName, resourceGroupName, cloudServiceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// The Rebuild Role Instance asynchronous operation reinstalls the operating
        /// system on instances of web roles or worker roles and initializes the
        /// storage resources that are used by them. If you do not want to initialize
        /// storage resources, you can use Reimage Role Instance.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Name of the role instance.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Name of the cloud service.
        /// </param>
        public static void BeginRebuild(this ICloudServiceRoleInstancesOperations operations, string roleInstanceName, string resourceGroupName, string cloudServiceName)
        {
                ((ICloudServiceRoleInstancesOperations)operations).BeginRebuildAsync(roleInstanceName, resourceGroupName, cloudServiceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The Rebuild Role Instance asynchronous operation reinstalls the operating
        /// system on instances of web roles or worker roles and initializes the
        /// storage resources that are used by them. If you do not want to initialize
        /// storage resources, you can use Reimage Role Instance.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Name of the role instance.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Name of the cloud service.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginRebuildAsync(this ICloudServiceRoleInstancesOperations operations, string roleInstanceName, string resourceGroupName, string cloudServiceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginRebuildWithHttpMessagesAsync(roleInstanceName, resourceGroupName, cloudServiceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Gets the list of all role instances in a cloud service. Use nextLink
        /// property in the response to get the next page of role instances. Do this
        /// till nextLink is null to fetch all the role instances.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<RoleInstance> ListNext(this ICloudServiceRoleInstancesOperations operations, string nextPageLink)
        {
                return ((ICloudServiceRoleInstancesOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the list of all role instances in a cloud service. Use nextLink
        /// property in the response to get the next page of role instances. Do this
        /// till nextLink is null to fetch all the role instances.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<RoleInstance>> ListNextAsync(this ICloudServiceRoleInstancesOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
