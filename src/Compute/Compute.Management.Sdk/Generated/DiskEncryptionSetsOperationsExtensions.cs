// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Compute
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for DiskEncryptionSetsOperations
    /// </summary>
    public static partial class DiskEncryptionSetsOperationsExtensions
    {
        /// <summary>
        /// Creates or updates a disk encryption set
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='diskEncryptionSetName'>
        /// The name of the disk encryption set that is being created. The name can&#39;t
        /// be changed after the disk encryption set is created. Supported characters
        /// for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80
        /// characters.
        /// </param>
        public static DiskEncryptionSet CreateOrUpdate(this IDiskEncryptionSetsOperations operations, string resourceGroupName, string diskEncryptionSetName, DiskEncryptionSet diskEncryptionSet)
        {
                return ((IDiskEncryptionSetsOperations)operations).CreateOrUpdateAsync(resourceGroupName, diskEncryptionSetName, diskEncryptionSet).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or updates a disk encryption set
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='diskEncryptionSetName'>
        /// The name of the disk encryption set that is being created. The name can&#39;t
        /// be changed after the disk encryption set is created. Supported characters
        /// for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80
        /// characters.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DiskEncryptionSet> CreateOrUpdateAsync(this IDiskEncryptionSetsOperations operations, string resourceGroupName, string diskEncryptionSetName, DiskEncryptionSet diskEncryptionSet, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, diskEncryptionSetName, diskEncryptionSet, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Updates (patches) a disk encryption set.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='diskEncryptionSetName'>
        /// The name of the disk encryption set that is being created. The name can&#39;t
        /// be changed after the disk encryption set is created. Supported characters
        /// for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80
        /// characters.
        /// </param>
        public static DiskEncryptionSet Update(this IDiskEncryptionSetsOperations operations, string resourceGroupName, string diskEncryptionSetName, DiskEncryptionSetUpdate diskEncryptionSet)
        {
                return ((IDiskEncryptionSetsOperations)operations).UpdateAsync(resourceGroupName, diskEncryptionSetName, diskEncryptionSet).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Updates (patches) a disk encryption set.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='diskEncryptionSetName'>
        /// The name of the disk encryption set that is being created. The name can&#39;t
        /// be changed after the disk encryption set is created. Supported characters
        /// for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80
        /// characters.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DiskEncryptionSet> UpdateAsync(this IDiskEncryptionSetsOperations operations, string resourceGroupName, string diskEncryptionSetName, DiskEncryptionSetUpdate diskEncryptionSet, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, diskEncryptionSetName, diskEncryptionSet, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets information about a disk encryption set.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='diskEncryptionSetName'>
        /// The name of the disk encryption set that is being created. The name can&#39;t
        /// be changed after the disk encryption set is created. Supported characters
        /// for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80
        /// characters.
        /// </param>
        public static DiskEncryptionSet Get(this IDiskEncryptionSetsOperations operations, string resourceGroupName, string diskEncryptionSetName)
        {
                return ((IDiskEncryptionSetsOperations)operations).GetAsync(resourceGroupName, diskEncryptionSetName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets information about a disk encryption set.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='diskEncryptionSetName'>
        /// The name of the disk encryption set that is being created. The name can&#39;t
        /// be changed after the disk encryption set is created. Supported characters
        /// for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80
        /// characters.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DiskEncryptionSet> GetAsync(this IDiskEncryptionSetsOperations operations, string resourceGroupName, string diskEncryptionSetName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, diskEncryptionSetName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes a disk encryption set.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='diskEncryptionSetName'>
        /// The name of the disk encryption set that is being created. The name can&#39;t
        /// be changed after the disk encryption set is created. Supported characters
        /// for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80
        /// characters.
        /// </param>
        public static void Delete(this IDiskEncryptionSetsOperations operations, string resourceGroupName, string diskEncryptionSetName)
        {
                ((IDiskEncryptionSetsOperations)operations).DeleteAsync(resourceGroupName, diskEncryptionSetName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes a disk encryption set.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='diskEncryptionSetName'>
        /// The name of the disk encryption set that is being created. The name can&#39;t
        /// be changed after the disk encryption set is created. Supported characters
        /// for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80
        /// characters.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IDiskEncryptionSetsOperations operations, string resourceGroupName, string diskEncryptionSetName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, diskEncryptionSetName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Lists all the disk encryption sets under a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<DiskEncryptionSet> ListByResourceGroup(this IDiskEncryptionSetsOperations operations, string resourceGroupName)
        {
                return ((IDiskEncryptionSetsOperations)operations).ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all the disk encryption sets under a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<DiskEncryptionSet>> ListByResourceGroupAsync(this IDiskEncryptionSetsOperations operations, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists all the disk encryption sets under a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<DiskEncryptionSet> List(this IDiskEncryptionSetsOperations operations)
        {
                return ((IDiskEncryptionSetsOperations)operations).ListAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all the disk encryption sets under a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<DiskEncryptionSet>> ListAsync(this IDiskEncryptionSetsOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists all resources that are encrypted with this disk encryption set.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='diskEncryptionSetName'>
        /// The name of the disk encryption set that is being created. The name can&#39;t
        /// be changed after the disk encryption set is created. Supported characters
        /// for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80
        /// characters.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<string> ListAssociatedResources(this IDiskEncryptionSetsOperations operations, string resourceGroupName, string diskEncryptionSetName)
        {
                return ((IDiskEncryptionSetsOperations)operations).ListAssociatedResourcesAsync(resourceGroupName, diskEncryptionSetName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all resources that are encrypted with this disk encryption set.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='diskEncryptionSetName'>
        /// The name of the disk encryption set that is being created. The name can&#39;t
        /// be changed after the disk encryption set is created. Supported characters
        /// for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80
        /// characters.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<string>> ListAssociatedResourcesAsync(this IDiskEncryptionSetsOperations operations, string resourceGroupName, string diskEncryptionSetName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListAssociatedResourcesWithHttpMessagesAsync(resourceGroupName, diskEncryptionSetName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates or updates a disk encryption set
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='diskEncryptionSetName'>
        /// The name of the disk encryption set that is being created. The name can&#39;t
        /// be changed after the disk encryption set is created. Supported characters
        /// for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80
        /// characters.
        /// </param>
        public static DiskEncryptionSet BeginCreateOrUpdate(this IDiskEncryptionSetsOperations operations, string resourceGroupName, string diskEncryptionSetName, DiskEncryptionSet diskEncryptionSet)
        {
                return ((IDiskEncryptionSetsOperations)operations).BeginCreateOrUpdateAsync(resourceGroupName, diskEncryptionSetName, diskEncryptionSet).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or updates a disk encryption set
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='diskEncryptionSetName'>
        /// The name of the disk encryption set that is being created. The name can&#39;t
        /// be changed after the disk encryption set is created. Supported characters
        /// for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80
        /// characters.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DiskEncryptionSet> BeginCreateOrUpdateAsync(this IDiskEncryptionSetsOperations operations, string resourceGroupName, string diskEncryptionSetName, DiskEncryptionSet diskEncryptionSet, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, diskEncryptionSetName, diskEncryptionSet, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Updates (patches) a disk encryption set.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='diskEncryptionSetName'>
        /// The name of the disk encryption set that is being created. The name can&#39;t
        /// be changed after the disk encryption set is created. Supported characters
        /// for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80
        /// characters.
        /// </param>
        public static DiskEncryptionSet BeginUpdate(this IDiskEncryptionSetsOperations operations, string resourceGroupName, string diskEncryptionSetName, DiskEncryptionSetUpdate diskEncryptionSet)
        {
                return ((IDiskEncryptionSetsOperations)operations).BeginUpdateAsync(resourceGroupName, diskEncryptionSetName, diskEncryptionSet).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Updates (patches) a disk encryption set.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='diskEncryptionSetName'>
        /// The name of the disk encryption set that is being created. The name can&#39;t
        /// be changed after the disk encryption set is created. Supported characters
        /// for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80
        /// characters.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DiskEncryptionSet> BeginUpdateAsync(this IDiskEncryptionSetsOperations operations, string resourceGroupName, string diskEncryptionSetName, DiskEncryptionSetUpdate diskEncryptionSet, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, diskEncryptionSetName, diskEncryptionSet, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes a disk encryption set.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='diskEncryptionSetName'>
        /// The name of the disk encryption set that is being created. The name can&#39;t
        /// be changed after the disk encryption set is created. Supported characters
        /// for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80
        /// characters.
        /// </param>
        public static void BeginDelete(this IDiskEncryptionSetsOperations operations, string resourceGroupName, string diskEncryptionSetName)
        {
                ((IDiskEncryptionSetsOperations)operations).BeginDeleteAsync(resourceGroupName, diskEncryptionSetName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes a disk encryption set.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='diskEncryptionSetName'>
        /// The name of the disk encryption set that is being created. The name can&#39;t
        /// be changed after the disk encryption set is created. Supported characters
        /// for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80
        /// characters.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDeleteAsync(this IDiskEncryptionSetsOperations operations, string resourceGroupName, string diskEncryptionSetName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, diskEncryptionSetName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Lists all the disk encryption sets under a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<DiskEncryptionSet> ListByResourceGroupNext(this IDiskEncryptionSetsOperations operations, string nextPageLink)
        {
                return ((IDiskEncryptionSetsOperations)operations).ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all the disk encryption sets under a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<DiskEncryptionSet>> ListByResourceGroupNextAsync(this IDiskEncryptionSetsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists all the disk encryption sets under a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<DiskEncryptionSet> ListNext(this IDiskEncryptionSetsOperations operations, string nextPageLink)
        {
                return ((IDiskEncryptionSetsOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all the disk encryption sets under a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<DiskEncryptionSet>> ListNextAsync(this IDiskEncryptionSetsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists all resources that are encrypted with this disk encryption set.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<string> ListAssociatedResourcesNext(this IDiskEncryptionSetsOperations operations, string nextPageLink)
        {
                return ((IDiskEncryptionSetsOperations)operations).ListAssociatedResourcesNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all resources that are encrypted with this disk encryption set.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<string>> ListAssociatedResourcesNextAsync(this IDiskEncryptionSetsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListAssociatedResourcesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
