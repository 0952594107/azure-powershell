// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Compute
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for GalleryImagesOperations
    /// </summary>
    public static partial class GalleryImagesOperationsExtensions
    {
        /// <summary>
        /// Create or update a gallery image definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='galleryName'>
        /// The name of the Shared Image Gallery in which the Image Definition is to be
        /// created.
        /// </param>
        /// <param name='galleryImageName'>
        /// The name of the gallery image definition to be created or updated. The
        /// allowed characters are alphabets and numbers with dots, dashes, and periods
        /// allowed in the middle. The maximum length is 80 characters.
        /// </param>
        public static GalleryImage CreateOrUpdate(this IGalleryImagesOperations operations, string resourceGroupName, string galleryName, string galleryImageName, GalleryImage galleryImage)
        {
                return ((IGalleryImagesOperations)operations).CreateOrUpdateAsync(resourceGroupName, galleryName, galleryImageName, galleryImage).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create or update a gallery image definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='galleryName'>
        /// The name of the Shared Image Gallery in which the Image Definition is to be
        /// created.
        /// </param>
        /// <param name='galleryImageName'>
        /// The name of the gallery image definition to be created or updated. The
        /// allowed characters are alphabets and numbers with dots, dashes, and periods
        /// allowed in the middle. The maximum length is 80 characters.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<GalleryImage> CreateOrUpdateAsync(this IGalleryImagesOperations operations, string resourceGroupName, string galleryName, string galleryImageName, GalleryImage galleryImage, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, galleryName, galleryImageName, galleryImage, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Update a gallery image definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='galleryName'>
        /// The name of the Shared Image Gallery in which the Image Definition is to be
        /// updated.
        /// </param>
        /// <param name='galleryImageName'>
        /// The name of the gallery image definition to be updated. The allowed
        /// characters are alphabets and numbers with dots, dashes, and periods allowed
        /// in the middle. The maximum length is 80 characters.
        /// </param>
        public static GalleryImage Update(this IGalleryImagesOperations operations, string resourceGroupName, string galleryName, string galleryImageName, GalleryImageUpdate galleryImage)
        {
                return ((IGalleryImagesOperations)operations).UpdateAsync(resourceGroupName, galleryName, galleryImageName, galleryImage).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update a gallery image definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='galleryName'>
        /// The name of the Shared Image Gallery in which the Image Definition is to be
        /// updated.
        /// </param>
        /// <param name='galleryImageName'>
        /// The name of the gallery image definition to be updated. The allowed
        /// characters are alphabets and numbers with dots, dashes, and periods allowed
        /// in the middle. The maximum length is 80 characters.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<GalleryImage> UpdateAsync(this IGalleryImagesOperations operations, string resourceGroupName, string galleryName, string galleryImageName, GalleryImageUpdate galleryImage, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, galleryName, galleryImageName, galleryImage, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Retrieves information about a gallery image definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='galleryName'>
        /// The name of the Shared Image Gallery from which the Image Definitions are
        /// to be retrieved.
        /// </param>
        /// <param name='galleryImageName'>
        /// The name of the gallery image definition to be retrieved.
        /// </param>
        public static GalleryImage Get(this IGalleryImagesOperations operations, string resourceGroupName, string galleryName, string galleryImageName)
        {
                return ((IGalleryImagesOperations)operations).GetAsync(resourceGroupName, galleryName, galleryImageName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Retrieves information about a gallery image definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='galleryName'>
        /// The name of the Shared Image Gallery from which the Image Definitions are
        /// to be retrieved.
        /// </param>
        /// <param name='galleryImageName'>
        /// The name of the gallery image definition to be retrieved.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<GalleryImage> GetAsync(this IGalleryImagesOperations operations, string resourceGroupName, string galleryName, string galleryImageName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, galleryName, galleryImageName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete a gallery image.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='galleryName'>
        /// The name of the Shared Image Gallery in which the Image Definition is to be
        /// deleted.
        /// </param>
        /// <param name='galleryImageName'>
        /// The name of the gallery image definition to be deleted.
        /// </param>
        public static void Delete(this IGalleryImagesOperations operations, string resourceGroupName, string galleryName, string galleryImageName)
        {
                ((IGalleryImagesOperations)operations).DeleteAsync(resourceGroupName, galleryName, galleryImageName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete a gallery image.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='galleryName'>
        /// The name of the Shared Image Gallery in which the Image Definition is to be
        /// deleted.
        /// </param>
        /// <param name='galleryImageName'>
        /// The name of the gallery image definition to be deleted.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IGalleryImagesOperations operations, string resourceGroupName, string galleryName, string galleryImageName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, galleryName, galleryImageName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// List gallery image definitions in a gallery.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='galleryName'>
        /// The name of the Shared Image Gallery from which Image Definitions are to be
        /// listed.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<GalleryImage> ListByGallery(this IGalleryImagesOperations operations, string resourceGroupName, string galleryName)
        {
                return ((IGalleryImagesOperations)operations).ListByGalleryAsync(resourceGroupName, galleryName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List gallery image definitions in a gallery.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='galleryName'>
        /// The name of the Shared Image Gallery from which Image Definitions are to be
        /// listed.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<GalleryImage>> ListByGalleryAsync(this IGalleryImagesOperations operations, string resourceGroupName, string galleryName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByGalleryWithHttpMessagesAsync(resourceGroupName, galleryName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create or update a gallery image definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='galleryName'>
        /// The name of the Shared Image Gallery in which the Image Definition is to be
        /// created.
        /// </param>
        /// <param name='galleryImageName'>
        /// The name of the gallery image definition to be created or updated. The
        /// allowed characters are alphabets and numbers with dots, dashes, and periods
        /// allowed in the middle. The maximum length is 80 characters.
        /// </param>
        public static GalleryImage BeginCreateOrUpdate(this IGalleryImagesOperations operations, string resourceGroupName, string galleryName, string galleryImageName, GalleryImage galleryImage)
        {
                return ((IGalleryImagesOperations)operations).BeginCreateOrUpdateAsync(resourceGroupName, galleryName, galleryImageName, galleryImage).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create or update a gallery image definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='galleryName'>
        /// The name of the Shared Image Gallery in which the Image Definition is to be
        /// created.
        /// </param>
        /// <param name='galleryImageName'>
        /// The name of the gallery image definition to be created or updated. The
        /// allowed characters are alphabets and numbers with dots, dashes, and periods
        /// allowed in the middle. The maximum length is 80 characters.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<GalleryImage> BeginCreateOrUpdateAsync(this IGalleryImagesOperations operations, string resourceGroupName, string galleryName, string galleryImageName, GalleryImage galleryImage, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, galleryName, galleryImageName, galleryImage, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Update a gallery image definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='galleryName'>
        /// The name of the Shared Image Gallery in which the Image Definition is to be
        /// updated.
        /// </param>
        /// <param name='galleryImageName'>
        /// The name of the gallery image definition to be updated. The allowed
        /// characters are alphabets and numbers with dots, dashes, and periods allowed
        /// in the middle. The maximum length is 80 characters.
        /// </param>
        public static GalleryImage BeginUpdate(this IGalleryImagesOperations operations, string resourceGroupName, string galleryName, string galleryImageName, GalleryImageUpdate galleryImage)
        {
                return ((IGalleryImagesOperations)operations).BeginUpdateAsync(resourceGroupName, galleryName, galleryImageName, galleryImage).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update a gallery image definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='galleryName'>
        /// The name of the Shared Image Gallery in which the Image Definition is to be
        /// updated.
        /// </param>
        /// <param name='galleryImageName'>
        /// The name of the gallery image definition to be updated. The allowed
        /// characters are alphabets and numbers with dots, dashes, and periods allowed
        /// in the middle. The maximum length is 80 characters.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<GalleryImage> BeginUpdateAsync(this IGalleryImagesOperations operations, string resourceGroupName, string galleryName, string galleryImageName, GalleryImageUpdate galleryImage, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, galleryName, galleryImageName, galleryImage, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete a gallery image.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='galleryName'>
        /// The name of the Shared Image Gallery in which the Image Definition is to be
        /// deleted.
        /// </param>
        /// <param name='galleryImageName'>
        /// The name of the gallery image definition to be deleted.
        /// </param>
        public static void BeginDelete(this IGalleryImagesOperations operations, string resourceGroupName, string galleryName, string galleryImageName)
        {
                ((IGalleryImagesOperations)operations).BeginDeleteAsync(resourceGroupName, galleryName, galleryImageName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete a gallery image.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='galleryName'>
        /// The name of the Shared Image Gallery in which the Image Definition is to be
        /// deleted.
        /// </param>
        /// <param name='galleryImageName'>
        /// The name of the gallery image definition to be deleted.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDeleteAsync(this IGalleryImagesOperations operations, string resourceGroupName, string galleryName, string galleryImageName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, galleryName, galleryImageName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// List gallery image definitions in a gallery.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<GalleryImage> ListByGalleryNext(this IGalleryImagesOperations operations, string nextPageLink)
        {
                return ((IGalleryImagesOperations)operations).ListByGalleryNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List gallery image definitions in a gallery.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<GalleryImage>> ListByGalleryNextAsync(this IGalleryImagesOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByGalleryNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
