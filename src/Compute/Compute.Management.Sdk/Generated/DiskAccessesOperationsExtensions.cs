// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Compute
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for DiskAccessesOperations
    /// </summary>
    public static partial class DiskAccessesOperationsExtensions
    {
        /// <summary>
        /// Creates or updates a disk access resource
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='diskAccessName'>
        /// The name of the disk access resource that is being created. The name can&#39;t
        /// be changed after the disk encryption set is created. Supported characters
        /// for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80
        /// characters.
        /// </param>
        public static DiskAccess CreateOrUpdate(this IDiskAccessesOperations operations, string resourceGroupName, string diskAccessName, DiskAccess diskAccess)
        {
                return ((IDiskAccessesOperations)operations).CreateOrUpdateAsync(resourceGroupName, diskAccessName, diskAccess).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or updates a disk access resource
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='diskAccessName'>
        /// The name of the disk access resource that is being created. The name can&#39;t
        /// be changed after the disk encryption set is created. Supported characters
        /// for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80
        /// characters.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DiskAccess> CreateOrUpdateAsync(this IDiskAccessesOperations operations, string resourceGroupName, string diskAccessName, DiskAccess diskAccess, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, diskAccessName, diskAccess, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Updates (patches) a disk access resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='diskAccessName'>
        /// The name of the disk access resource that is being created. The name can&#39;t
        /// be changed after the disk encryption set is created. Supported characters
        /// for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80
        /// characters.
        /// </param>
        public static DiskAccess Update(this IDiskAccessesOperations operations, string resourceGroupName, string diskAccessName, System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>))
        {
                return ((IDiskAccessesOperations)operations).UpdateAsync(resourceGroupName, diskAccessName, tags).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Updates (patches) a disk access resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='diskAccessName'>
        /// The name of the disk access resource that is being created. The name can&#39;t
        /// be changed after the disk encryption set is created. Supported characters
        /// for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80
        /// characters.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DiskAccess> UpdateAsync(this IDiskAccessesOperations operations, string resourceGroupName, string diskAccessName, System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, diskAccessName, tags, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets information about a disk access resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='diskAccessName'>
        /// The name of the disk access resource that is being created. The name can&#39;t
        /// be changed after the disk encryption set is created. Supported characters
        /// for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80
        /// characters.
        /// </param>
        public static DiskAccess Get(this IDiskAccessesOperations operations, string resourceGroupName, string diskAccessName)
        {
                return ((IDiskAccessesOperations)operations).GetAsync(resourceGroupName, diskAccessName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets information about a disk access resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='diskAccessName'>
        /// The name of the disk access resource that is being created. The name can&#39;t
        /// be changed after the disk encryption set is created. Supported characters
        /// for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80
        /// characters.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DiskAccess> GetAsync(this IDiskAccessesOperations operations, string resourceGroupName, string diskAccessName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, diskAccessName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes a disk access resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='diskAccessName'>
        /// The name of the disk access resource that is being created. The name can&#39;t
        /// be changed after the disk encryption set is created. Supported characters
        /// for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80
        /// characters.
        /// </param>
        public static void Delete(this IDiskAccessesOperations operations, string resourceGroupName, string diskAccessName)
        {
                ((IDiskAccessesOperations)operations).DeleteAsync(resourceGroupName, diskAccessName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes a disk access resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='diskAccessName'>
        /// The name of the disk access resource that is being created. The name can&#39;t
        /// be changed after the disk encryption set is created. Supported characters
        /// for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80
        /// characters.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IDiskAccessesOperations operations, string resourceGroupName, string diskAccessName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, diskAccessName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Lists all the disk access resources under a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<DiskAccess> ListByResourceGroup(this IDiskAccessesOperations operations, string resourceGroupName)
        {
                return ((IDiskAccessesOperations)operations).ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all the disk access resources under a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<DiskAccess>> ListByResourceGroupAsync(this IDiskAccessesOperations operations, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists all the disk access resources under a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<DiskAccess> List(this IDiskAccessesOperations operations)
        {
                return ((IDiskAccessesOperations)operations).ListAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all the disk access resources under a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<DiskAccess>> ListAsync(this IDiskAccessesOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets the private link resources possible under disk access resource
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='diskAccessName'>
        /// The name of the disk access resource that is being created. The name can&#39;t
        /// be changed after the disk encryption set is created. Supported characters
        /// for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80
        /// characters.
        /// </param>
        public static PrivateLinkResourceListResult GetPrivateLinkResources(this IDiskAccessesOperations operations, string resourceGroupName, string diskAccessName)
        {
                return ((IDiskAccessesOperations)operations).GetPrivateLinkResourcesAsync(resourceGroupName, diskAccessName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the private link resources possible under disk access resource
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='diskAccessName'>
        /// The name of the disk access resource that is being created. The name can&#39;t
        /// be changed after the disk encryption set is created. Supported characters
        /// for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80
        /// characters.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PrivateLinkResourceListResult> GetPrivateLinkResourcesAsync(this IDiskAccessesOperations operations, string resourceGroupName, string diskAccessName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetPrivateLinkResourcesWithHttpMessagesAsync(resourceGroupName, diskAccessName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Approve or reject a private endpoint connection under disk access resource,
        /// this can&#39;t be used to create a new private endpoint connection.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='diskAccessName'>
        /// The name of the disk access resource that is being created. The name can&#39;t
        /// be changed after the disk encryption set is created. Supported characters
        /// for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80
        /// characters.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// The name of the private endpoint connection.
        /// </param>
        public static PrivateEndpointConnection UpdateAPrivateEndpointConnection(this IDiskAccessesOperations operations, string resourceGroupName, string diskAccessName, string privateEndpointConnectionName, PrivateLinkServiceConnectionState privateLinkServiceConnectionState = default(PrivateLinkServiceConnectionState))
        {
                return ((IDiskAccessesOperations)operations).UpdateAPrivateEndpointConnectionAsync(resourceGroupName, diskAccessName, privateEndpointConnectionName, privateLinkServiceConnectionState).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Approve or reject a private endpoint connection under disk access resource,
        /// this can&#39;t be used to create a new private endpoint connection.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='diskAccessName'>
        /// The name of the disk access resource that is being created. The name can&#39;t
        /// be changed after the disk encryption set is created. Supported characters
        /// for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80
        /// characters.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// The name of the private endpoint connection.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PrivateEndpointConnection> UpdateAPrivateEndpointConnectionAsync(this IDiskAccessesOperations operations, string resourceGroupName, string diskAccessName, string privateEndpointConnectionName, PrivateLinkServiceConnectionState privateLinkServiceConnectionState = default(PrivateLinkServiceConnectionState), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateAPrivateEndpointConnectionWithHttpMessagesAsync(resourceGroupName, diskAccessName, privateEndpointConnectionName, privateLinkServiceConnectionState, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets information about a private endpoint connection under a disk access
        /// resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='diskAccessName'>
        /// The name of the disk access resource that is being created. The name can&#39;t
        /// be changed after the disk encryption set is created. Supported characters
        /// for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80
        /// characters.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// The name of the private endpoint connection.
        /// </param>
        public static PrivateEndpointConnection GetAPrivateEndpointConnection(this IDiskAccessesOperations operations, string resourceGroupName, string diskAccessName, string privateEndpointConnectionName)
        {
                return ((IDiskAccessesOperations)operations).GetAPrivateEndpointConnectionAsync(resourceGroupName, diskAccessName, privateEndpointConnectionName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets information about a private endpoint connection under a disk access
        /// resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='diskAccessName'>
        /// The name of the disk access resource that is being created. The name can&#39;t
        /// be changed after the disk encryption set is created. Supported characters
        /// for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80
        /// characters.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// The name of the private endpoint connection.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PrivateEndpointConnection> GetAPrivateEndpointConnectionAsync(this IDiskAccessesOperations operations, string resourceGroupName, string diskAccessName, string privateEndpointConnectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetAPrivateEndpointConnectionWithHttpMessagesAsync(resourceGroupName, diskAccessName, privateEndpointConnectionName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes a private endpoint connection under a disk access resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='diskAccessName'>
        /// The name of the disk access resource that is being created. The name can&#39;t
        /// be changed after the disk encryption set is created. Supported characters
        /// for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80
        /// characters.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// The name of the private endpoint connection.
        /// </param>
        public static void DeleteAPrivateEndpointConnection(this IDiskAccessesOperations operations, string resourceGroupName, string diskAccessName, string privateEndpointConnectionName)
        {
                ((IDiskAccessesOperations)operations).DeleteAPrivateEndpointConnectionAsync(resourceGroupName, diskAccessName, privateEndpointConnectionName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes a private endpoint connection under a disk access resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='diskAccessName'>
        /// The name of the disk access resource that is being created. The name can&#39;t
        /// be changed after the disk encryption set is created. Supported characters
        /// for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80
        /// characters.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// The name of the private endpoint connection.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAPrivateEndpointConnectionAsync(this IDiskAccessesOperations operations, string resourceGroupName, string diskAccessName, string privateEndpointConnectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteAPrivateEndpointConnectionWithHttpMessagesAsync(resourceGroupName, diskAccessName, privateEndpointConnectionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// List information about private endpoint connections under a disk access
        /// resource
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='diskAccessName'>
        /// The name of the disk access resource that is being created. The name can&#39;t
        /// be changed after the disk encryption set is created. Supported characters
        /// for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80
        /// characters.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<PrivateEndpointConnection> ListPrivateEndpointConnections(this IDiskAccessesOperations operations, string resourceGroupName, string diskAccessName)
        {
                return ((IDiskAccessesOperations)operations).ListPrivateEndpointConnectionsAsync(resourceGroupName, diskAccessName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List information about private endpoint connections under a disk access
        /// resource
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='diskAccessName'>
        /// The name of the disk access resource that is being created. The name can&#39;t
        /// be changed after the disk encryption set is created. Supported characters
        /// for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80
        /// characters.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PrivateEndpointConnection>> ListPrivateEndpointConnectionsAsync(this IDiskAccessesOperations operations, string resourceGroupName, string diskAccessName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListPrivateEndpointConnectionsWithHttpMessagesAsync(resourceGroupName, diskAccessName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates or updates a disk access resource
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='diskAccessName'>
        /// The name of the disk access resource that is being created. The name can&#39;t
        /// be changed after the disk encryption set is created. Supported characters
        /// for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80
        /// characters.
        /// </param>
        public static DiskAccess BeginCreateOrUpdate(this IDiskAccessesOperations operations, string resourceGroupName, string diskAccessName, DiskAccess diskAccess)
        {
                return ((IDiskAccessesOperations)operations).BeginCreateOrUpdateAsync(resourceGroupName, diskAccessName, diskAccess).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or updates a disk access resource
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='diskAccessName'>
        /// The name of the disk access resource that is being created. The name can&#39;t
        /// be changed after the disk encryption set is created. Supported characters
        /// for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80
        /// characters.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DiskAccess> BeginCreateOrUpdateAsync(this IDiskAccessesOperations operations, string resourceGroupName, string diskAccessName, DiskAccess diskAccess, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, diskAccessName, diskAccess, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Updates (patches) a disk access resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='diskAccessName'>
        /// The name of the disk access resource that is being created. The name can&#39;t
        /// be changed after the disk encryption set is created. Supported characters
        /// for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80
        /// characters.
        /// </param>
        public static DiskAccess BeginUpdate(this IDiskAccessesOperations operations, string resourceGroupName, string diskAccessName, System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>))
        {
                return ((IDiskAccessesOperations)operations).BeginUpdateAsync(resourceGroupName, diskAccessName, tags).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Updates (patches) a disk access resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='diskAccessName'>
        /// The name of the disk access resource that is being created. The name can&#39;t
        /// be changed after the disk encryption set is created. Supported characters
        /// for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80
        /// characters.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DiskAccess> BeginUpdateAsync(this IDiskAccessesOperations operations, string resourceGroupName, string diskAccessName, System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, diskAccessName, tags, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes a disk access resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='diskAccessName'>
        /// The name of the disk access resource that is being created. The name can&#39;t
        /// be changed after the disk encryption set is created. Supported characters
        /// for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80
        /// characters.
        /// </param>
        public static void BeginDelete(this IDiskAccessesOperations operations, string resourceGroupName, string diskAccessName)
        {
                ((IDiskAccessesOperations)operations).BeginDeleteAsync(resourceGroupName, diskAccessName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes a disk access resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='diskAccessName'>
        /// The name of the disk access resource that is being created. The name can&#39;t
        /// be changed after the disk encryption set is created. Supported characters
        /// for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80
        /// characters.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDeleteAsync(this IDiskAccessesOperations operations, string resourceGroupName, string diskAccessName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, diskAccessName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Approve or reject a private endpoint connection under disk access resource,
        /// this can&#39;t be used to create a new private endpoint connection.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='diskAccessName'>
        /// The name of the disk access resource that is being created. The name can&#39;t
        /// be changed after the disk encryption set is created. Supported characters
        /// for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80
        /// characters.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// The name of the private endpoint connection.
        /// </param>
        public static PrivateEndpointConnection BeginUpdateAPrivateEndpointConnection(this IDiskAccessesOperations operations, string resourceGroupName, string diskAccessName, string privateEndpointConnectionName, PrivateLinkServiceConnectionState privateLinkServiceConnectionState = default(PrivateLinkServiceConnectionState))
        {
                return ((IDiskAccessesOperations)operations).BeginUpdateAPrivateEndpointConnectionAsync(resourceGroupName, diskAccessName, privateEndpointConnectionName, privateLinkServiceConnectionState).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Approve or reject a private endpoint connection under disk access resource,
        /// this can&#39;t be used to create a new private endpoint connection.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='diskAccessName'>
        /// The name of the disk access resource that is being created. The name can&#39;t
        /// be changed after the disk encryption set is created. Supported characters
        /// for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80
        /// characters.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// The name of the private endpoint connection.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PrivateEndpointConnection> BeginUpdateAPrivateEndpointConnectionAsync(this IDiskAccessesOperations operations, string resourceGroupName, string diskAccessName, string privateEndpointConnectionName, PrivateLinkServiceConnectionState privateLinkServiceConnectionState = default(PrivateLinkServiceConnectionState), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginUpdateAPrivateEndpointConnectionWithHttpMessagesAsync(resourceGroupName, diskAccessName, privateEndpointConnectionName, privateLinkServiceConnectionState, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes a private endpoint connection under a disk access resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='diskAccessName'>
        /// The name of the disk access resource that is being created. The name can&#39;t
        /// be changed after the disk encryption set is created. Supported characters
        /// for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80
        /// characters.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// The name of the private endpoint connection.
        /// </param>
        public static void BeginDeleteAPrivateEndpointConnection(this IDiskAccessesOperations operations, string resourceGroupName, string diskAccessName, string privateEndpointConnectionName)
        {
                ((IDiskAccessesOperations)operations).BeginDeleteAPrivateEndpointConnectionAsync(resourceGroupName, diskAccessName, privateEndpointConnectionName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes a private endpoint connection under a disk access resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='diskAccessName'>
        /// The name of the disk access resource that is being created. The name can&#39;t
        /// be changed after the disk encryption set is created. Supported characters
        /// for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80
        /// characters.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// The name of the private endpoint connection.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDeleteAPrivateEndpointConnectionAsync(this IDiskAccessesOperations operations, string resourceGroupName, string diskAccessName, string privateEndpointConnectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDeleteAPrivateEndpointConnectionWithHttpMessagesAsync(resourceGroupName, diskAccessName, privateEndpointConnectionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Lists all the disk access resources under a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<DiskAccess> ListByResourceGroupNext(this IDiskAccessesOperations operations, string nextPageLink)
        {
                return ((IDiskAccessesOperations)operations).ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all the disk access resources under a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<DiskAccess>> ListByResourceGroupNextAsync(this IDiskAccessesOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists all the disk access resources under a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<DiskAccess> ListNext(this IDiskAccessesOperations operations, string nextPageLink)
        {
                return ((IDiskAccessesOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all the disk access resources under a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<DiskAccess>> ListNextAsync(this IDiskAccessesOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// List information about private endpoint connections under a disk access
        /// resource
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<PrivateEndpointConnection> ListPrivateEndpointConnectionsNext(this IDiskAccessesOperations operations, string nextPageLink)
        {
                return ((IDiskAccessesOperations)operations).ListPrivateEndpointConnectionsNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List information about private endpoint connections under a disk access
        /// resource
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PrivateEndpointConnection>> ListPrivateEndpointConnectionsNextAsync(this IDiskAccessesOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListPrivateEndpointConnectionsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
