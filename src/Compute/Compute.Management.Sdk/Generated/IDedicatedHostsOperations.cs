// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Compute
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// DedicatedHostsOperations operations.
    /// </summary>
    public partial interface IDedicatedHostsOperations
    {
        /// <summary>
        /// Create or update a dedicated host .
        /// </summary>
        /// <remarks>
        /// Create or update a dedicated host .
        /// </remarks>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='hostGroupName'>
        /// The name of the dedicated host group.
        /// </param>
        /// <param name='hostName'>
        /// The name of the dedicated host .
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Dedicated Host.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<DedicatedHost>> CreateOrUpdateWithHttpMessagesAsync(string resourceGroupName, string hostGroupName, string hostName, DedicatedHost parameters, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a dedicated host .
        /// </summary>
        /// <remarks>
        /// Update a dedicated host .
        /// </remarks>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='hostGroupName'>
        /// The name of the dedicated host group.
        /// </param>
        /// <param name='hostName'>
        /// The name of the dedicated host .
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Update Dedicated Host operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<DedicatedHost>> UpdateWithHttpMessagesAsync(string resourceGroupName, string hostGroupName, string hostName, DedicatedHostUpdate parameters, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a dedicated host.
        /// </summary>
        /// <remarks>
        /// Delete a dedicated host.
        /// </remarks>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='hostGroupName'>
        /// The name of the dedicated host group.
        /// </param>
        /// <param name='hostName'>
        /// The name of the dedicated host.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse> DeleteWithHttpMessagesAsync(string resourceGroupName, string hostGroupName, string hostName, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves information about a dedicated host.
        /// </summary>
        /// <remarks>
        /// Retrieves information about a dedicated host.
        /// </remarks>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='hostGroupName'>
        /// The name of the dedicated host group.
        /// </param>
        /// <param name='hostName'>
        /// The name of the dedicated host.
        /// </param>
        /// <param name='expand'>
        /// The expand expression to apply on the operation. &#39;InstanceView&#39; will
        /// retrieve the list of instance views of the dedicated host. &#39;UserData&#39; is
        /// not supported for dedicated host.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<DedicatedHost>> GetWithHttpMessagesAsync(string resourceGroupName, string hostGroupName, string hostName, InstanceViewTypes? expand = default(InstanceViewTypes?), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Lists all of the dedicated hosts in the specified dedicated host group. Use
        /// the nextLink property in the response to get the next page of dedicated
        /// hosts.
        /// </summary>
        /// <remarks>
        /// Lists all of the dedicated hosts in the specified dedicated host group. Use
        /// the nextLink property in the response to get the next page of dedicated
        /// hosts.
        /// </remarks>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='hostGroupName'>
        /// The name of the dedicated host group.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<Microsoft.Rest.Azure.IPage<DedicatedHost>>> ListByHostGroupWithHttpMessagesAsync(string resourceGroupName, string hostGroupName, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Restart the dedicated host. The operation will complete successfully once
        /// the dedicated host has restarted and is running. To determine the health of
        /// VMs deployed on the dedicated host after the restart check the Resource
        /// Health Center in the Azure Portal. Please refer to
        /// https://docs.microsoft.com/azure/service-health/resource-health-overview
        /// for more details.
        /// </summary>
        /// <remarks>
        /// Restart the dedicated host. The operation will complete successfully once
        /// the dedicated host has restarted and is running. To determine the health of
        /// VMs deployed on the dedicated host after the restart check the Resource
        /// Health Center in the Azure Portal. Please refer to
        /// https://docs.microsoft.com/azure/service-health/resource-health-overview
        /// for more details.
        /// </remarks>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='hostGroupName'>
        /// The name of the dedicated host group.
        /// </param>
        /// <param name='hostName'>
        /// The name of the dedicated host.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse> RestartWithHttpMessagesAsync(string resourceGroupName, string hostGroupName, string hostName, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Redeploy the dedicated host. The operation will complete successfully once
        /// the dedicated host has migrated to a new node and is running. To determine
        /// the health of VMs deployed on the dedicated host after the redeploy check
        /// the Resource Health Center in the Azure Portal. Please refer to
        /// https://docs.microsoft.com/azure/service-health/resource-health-overview
        /// for more details.
        /// </summary>
        /// <remarks>
        /// Redeploy the dedicated host. The operation will complete successfully once
        /// the dedicated host has migrated to a new node and is running. To determine
        /// the health of VMs deployed on the dedicated host after the redeploy check
        /// the Resource Health Center in the Azure Portal. Please refer to
        /// https://docs.microsoft.com/azure/service-health/resource-health-overview
        /// for more details.
        /// </remarks>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='hostGroupName'>
        /// The name of the dedicated host group.
        /// </param>
        /// <param name='hostName'>
        /// The name of the dedicated host.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationHeaderResponse<DedicatedHostsRedeployHeaders>> RedeployWithHttpMessagesAsync(string resourceGroupName, string hostGroupName, string hostName, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Lists all available dedicated host sizes to which the specified dedicated
        /// host can be resized. NOTE: The dedicated host sizes provided can be used to
        /// only scale up the existing dedicated host.
        /// </summary>
        /// <remarks>
        /// Lists all available dedicated host sizes to which the specified dedicated
        /// host can be resized. NOTE: The dedicated host sizes provided can be used to
        /// only scale up the existing dedicated host.
        /// </remarks>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='hostGroupName'>
        /// The name of the dedicated host group.
        /// </param>
        /// <param name='hostName'>
        /// The name of the dedicated host.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<System.Collections.Generic.IEnumerable<string>>> ListAvailableSizesWithHttpMessagesAsync(string resourceGroupName, string hostGroupName, string hostName, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create or update a dedicated host .
        /// </summary>
        /// <remarks>
        /// Create or update a dedicated host .
        /// </remarks>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='hostGroupName'>
        /// The name of the dedicated host group.
        /// </param>
        /// <param name='hostName'>
        /// The name of the dedicated host .
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Dedicated Host.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<DedicatedHost>> BeginCreateOrUpdateWithHttpMessagesAsync(string resourceGroupName, string hostGroupName, string hostName, DedicatedHost parameters, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a dedicated host .
        /// </summary>
        /// <remarks>
        /// Update a dedicated host .
        /// </remarks>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='hostGroupName'>
        /// The name of the dedicated host group.
        /// </param>
        /// <param name='hostName'>
        /// The name of the dedicated host .
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Update Dedicated Host operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<DedicatedHost>> BeginUpdateWithHttpMessagesAsync(string resourceGroupName, string hostGroupName, string hostName, DedicatedHostUpdate parameters, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a dedicated host.
        /// </summary>
        /// <remarks>
        /// Delete a dedicated host.
        /// </remarks>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='hostGroupName'>
        /// The name of the dedicated host group.
        /// </param>
        /// <param name='hostName'>
        /// The name of the dedicated host.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse> BeginDeleteWithHttpMessagesAsync(string resourceGroupName, string hostGroupName, string hostName, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Restart the dedicated host. The operation will complete successfully once
        /// the dedicated host has restarted and is running. To determine the health of
        /// VMs deployed on the dedicated host after the restart check the Resource
        /// Health Center in the Azure Portal. Please refer to
        /// https://docs.microsoft.com/azure/service-health/resource-health-overview
        /// for more details.
        /// </summary>
        /// <remarks>
        /// Restart the dedicated host. The operation will complete successfully once
        /// the dedicated host has restarted and is running. To determine the health of
        /// VMs deployed on the dedicated host after the restart check the Resource
        /// Health Center in the Azure Portal. Please refer to
        /// https://docs.microsoft.com/azure/service-health/resource-health-overview
        /// for more details.
        /// </remarks>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='hostGroupName'>
        /// The name of the dedicated host group.
        /// </param>
        /// <param name='hostName'>
        /// The name of the dedicated host.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse> BeginRestartWithHttpMessagesAsync(string resourceGroupName, string hostGroupName, string hostName, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Redeploy the dedicated host. The operation will complete successfully once
        /// the dedicated host has migrated to a new node and is running. To determine
        /// the health of VMs deployed on the dedicated host after the redeploy check
        /// the Resource Health Center in the Azure Portal. Please refer to
        /// https://docs.microsoft.com/azure/service-health/resource-health-overview
        /// for more details.
        /// </summary>
        /// <remarks>
        /// Redeploy the dedicated host. The operation will complete successfully once
        /// the dedicated host has migrated to a new node and is running. To determine
        /// the health of VMs deployed on the dedicated host after the redeploy check
        /// the Resource Health Center in the Azure Portal. Please refer to
        /// https://docs.microsoft.com/azure/service-health/resource-health-overview
        /// for more details.
        /// </remarks>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='hostGroupName'>
        /// The name of the dedicated host group.
        /// </param>
        /// <param name='hostName'>
        /// The name of the dedicated host.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationHeaderResponse<DedicatedHostsRedeployHeaders>> BeginRedeployWithHttpMessagesAsync(string resourceGroupName, string hostGroupName, string hostName, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Lists all of the dedicated hosts in the specified dedicated host group. Use
        /// the nextLink property in the response to get the next page of dedicated
        /// hosts.
        /// </summary>
        /// <remarks>
        /// Lists all of the dedicated hosts in the specified dedicated host group. Use
        /// the nextLink property in the response to get the next page of dedicated
        /// hosts.
        /// </remarks>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<Microsoft.Rest.Azure.IPage<DedicatedHost>>> ListByHostGroupNextWithHttpMessagesAsync(string nextPageLink, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }
}