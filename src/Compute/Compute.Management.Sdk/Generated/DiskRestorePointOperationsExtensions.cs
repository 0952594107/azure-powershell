// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Compute
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for DiskRestorePointOperations
    /// </summary>
    public static partial class DiskRestorePointOperationsExtensions
    {
        /// <summary>
        /// Get disk restorePoint resource
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='restorePointCollectionName'>
        /// The name of the restore point collection that the disk restore point
        /// belongs.
        /// </param>
        /// <param name='vmRestorePointName'>
        /// The name of the vm restore point that the disk disk restore point belongs.
        /// </param>
        /// <param name='diskRestorePointName'>
        /// The name of the disk restore point created.
        /// </param>
        public static DiskRestorePoint Get(this IDiskRestorePointOperations operations, string resourceGroupName, string restorePointCollectionName, string vmRestorePointName, string diskRestorePointName)
        {
                return ((IDiskRestorePointOperations)operations).GetAsync(resourceGroupName, restorePointCollectionName, vmRestorePointName, diskRestorePointName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get disk restorePoint resource
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='restorePointCollectionName'>
        /// The name of the restore point collection that the disk restore point
        /// belongs.
        /// </param>
        /// <param name='vmRestorePointName'>
        /// The name of the vm restore point that the disk disk restore point belongs.
        /// </param>
        /// <param name='diskRestorePointName'>
        /// The name of the disk restore point created.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DiskRestorePoint> GetAsync(this IDiskRestorePointOperations operations, string resourceGroupName, string restorePointCollectionName, string vmRestorePointName, string diskRestorePointName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, restorePointCollectionName, vmRestorePointName, diskRestorePointName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists diskRestorePoints under a vmRestorePoint.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='restorePointCollectionName'>
        /// The name of the restore point collection that the disk restore point
        /// belongs.
        /// </param>
        /// <param name='vmRestorePointName'>
        /// The name of the vm restore point that the disk disk restore point belongs.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<DiskRestorePoint> ListByRestorePoint(this IDiskRestorePointOperations operations, string resourceGroupName, string restorePointCollectionName, string vmRestorePointName)
        {
                return ((IDiskRestorePointOperations)operations).ListByRestorePointAsync(resourceGroupName, restorePointCollectionName, vmRestorePointName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists diskRestorePoints under a vmRestorePoint.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='restorePointCollectionName'>
        /// The name of the restore point collection that the disk restore point
        /// belongs.
        /// </param>
        /// <param name='vmRestorePointName'>
        /// The name of the vm restore point that the disk disk restore point belongs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<DiskRestorePoint>> ListByRestorePointAsync(this IDiskRestorePointOperations operations, string resourceGroupName, string restorePointCollectionName, string vmRestorePointName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByRestorePointWithHttpMessagesAsync(resourceGroupName, restorePointCollectionName, vmRestorePointName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Grants access to a diskRestorePoint.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='restorePointCollectionName'>
        /// The name of the restore point collection that the disk restore point
        /// belongs.
        /// </param>
        /// <param name='vmRestorePointName'>
        /// The name of the vm restore point that the disk disk restore point belongs.
        /// </param>
        /// <param name='diskRestorePointName'>
        /// The name of the disk restore point created.
        /// </param>
        public static AccessUri GrantAccess(this IDiskRestorePointOperations operations, string resourceGroupName, string restorePointCollectionName, string vmRestorePointName, string diskRestorePointName, GrantAccessData grantAccessData)
        {
                return ((IDiskRestorePointOperations)operations).GrantAccessAsync(resourceGroupName, restorePointCollectionName, vmRestorePointName, diskRestorePointName, grantAccessData).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Grants access to a diskRestorePoint.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='restorePointCollectionName'>
        /// The name of the restore point collection that the disk restore point
        /// belongs.
        /// </param>
        /// <param name='vmRestorePointName'>
        /// The name of the vm restore point that the disk disk restore point belongs.
        /// </param>
        /// <param name='diskRestorePointName'>
        /// The name of the disk restore point created.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<AccessUri> GrantAccessAsync(this IDiskRestorePointOperations operations, string resourceGroupName, string restorePointCollectionName, string vmRestorePointName, string diskRestorePointName, GrantAccessData grantAccessData, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GrantAccessWithHttpMessagesAsync(resourceGroupName, restorePointCollectionName, vmRestorePointName, diskRestorePointName, grantAccessData, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Revokes access to a diskRestorePoint.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='restorePointCollectionName'>
        /// The name of the restore point collection that the disk restore point
        /// belongs.
        /// </param>
        /// <param name='vmRestorePointName'>
        /// The name of the vm restore point that the disk disk restore point belongs.
        /// </param>
        /// <param name='diskRestorePointName'>
        /// The name of the disk restore point created.
        /// </param>
        public static void RevokeAccess(this IDiskRestorePointOperations operations, string resourceGroupName, string restorePointCollectionName, string vmRestorePointName, string diskRestorePointName)
        {
                ((IDiskRestorePointOperations)operations).RevokeAccessAsync(resourceGroupName, restorePointCollectionName, vmRestorePointName, diskRestorePointName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Revokes access to a diskRestorePoint.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='restorePointCollectionName'>
        /// The name of the restore point collection that the disk restore point
        /// belongs.
        /// </param>
        /// <param name='vmRestorePointName'>
        /// The name of the vm restore point that the disk disk restore point belongs.
        /// </param>
        /// <param name='diskRestorePointName'>
        /// The name of the disk restore point created.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task RevokeAccessAsync(this IDiskRestorePointOperations operations, string resourceGroupName, string restorePointCollectionName, string vmRestorePointName, string diskRestorePointName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.RevokeAccessWithHttpMessagesAsync(resourceGroupName, restorePointCollectionName, vmRestorePointName, diskRestorePointName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Grants access to a diskRestorePoint.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='restorePointCollectionName'>
        /// The name of the restore point collection that the disk restore point
        /// belongs.
        /// </param>
        /// <param name='vmRestorePointName'>
        /// The name of the vm restore point that the disk disk restore point belongs.
        /// </param>
        /// <param name='diskRestorePointName'>
        /// The name of the disk restore point created.
        /// </param>
        public static AccessUri BeginGrantAccess(this IDiskRestorePointOperations operations, string resourceGroupName, string restorePointCollectionName, string vmRestorePointName, string diskRestorePointName, GrantAccessData grantAccessData)
        {
                return ((IDiskRestorePointOperations)operations).BeginGrantAccessAsync(resourceGroupName, restorePointCollectionName, vmRestorePointName, diskRestorePointName, grantAccessData).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Grants access to a diskRestorePoint.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='restorePointCollectionName'>
        /// The name of the restore point collection that the disk restore point
        /// belongs.
        /// </param>
        /// <param name='vmRestorePointName'>
        /// The name of the vm restore point that the disk disk restore point belongs.
        /// </param>
        /// <param name='diskRestorePointName'>
        /// The name of the disk restore point created.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<AccessUri> BeginGrantAccessAsync(this IDiskRestorePointOperations operations, string resourceGroupName, string restorePointCollectionName, string vmRestorePointName, string diskRestorePointName, GrantAccessData grantAccessData, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginGrantAccessWithHttpMessagesAsync(resourceGroupName, restorePointCollectionName, vmRestorePointName, diskRestorePointName, grantAccessData, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Revokes access to a diskRestorePoint.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='restorePointCollectionName'>
        /// The name of the restore point collection that the disk restore point
        /// belongs.
        /// </param>
        /// <param name='vmRestorePointName'>
        /// The name of the vm restore point that the disk disk restore point belongs.
        /// </param>
        /// <param name='diskRestorePointName'>
        /// The name of the disk restore point created.
        /// </param>
        public static void BeginRevokeAccess(this IDiskRestorePointOperations operations, string resourceGroupName, string restorePointCollectionName, string vmRestorePointName, string diskRestorePointName)
        {
                ((IDiskRestorePointOperations)operations).BeginRevokeAccessAsync(resourceGroupName, restorePointCollectionName, vmRestorePointName, diskRestorePointName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Revokes access to a diskRestorePoint.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='restorePointCollectionName'>
        /// The name of the restore point collection that the disk restore point
        /// belongs.
        /// </param>
        /// <param name='vmRestorePointName'>
        /// The name of the vm restore point that the disk disk restore point belongs.
        /// </param>
        /// <param name='diskRestorePointName'>
        /// The name of the disk restore point created.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginRevokeAccessAsync(this IDiskRestorePointOperations operations, string resourceGroupName, string restorePointCollectionName, string vmRestorePointName, string diskRestorePointName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginRevokeAccessWithHttpMessagesAsync(resourceGroupName, restorePointCollectionName, vmRestorePointName, diskRestorePointName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Lists diskRestorePoints under a vmRestorePoint.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<DiskRestorePoint> ListByRestorePointNext(this IDiskRestorePointOperations operations, string nextPageLink)
        {
                return ((IDiskRestorePointOperations)operations).ListByRestorePointNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists diskRestorePoints under a vmRestorePoint.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<DiskRestorePoint>> ListByRestorePointNextAsync(this IDiskRestorePointOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByRestorePointNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
