// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Compute
{
    using System.Linq;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// The Compute Management Client.
    /// </summary>
    public partial class ComputeManagementClient : Microsoft.Rest.ServiceClient<ComputeManagementClient>, IComputeManagementClient, IAzureClient
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public System.Uri BaseUri { get; set; }
        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public Newtonsoft.Json.JsonSerializerSettings SerializationSettings { get; private set; }
        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public Newtonsoft.Json.JsonSerializerSettings DeserializationSettings { get; private set; }
        /// <summary>
        /// Credentials needed for the client to connect to Azure.
        /// </summary>
        public Microsoft.Rest.ServiceClientCredentials Credentials { get; private set; }

        /// <summary>
        /// Subscription credentials which uniquely identify Microsoft Azure
        /// subscription. The subscription ID forms part of the URI for every service
        /// call.
        /// </summary>
        public string SubscriptionId { get; set;}

        /// <summary>
        /// The preferred language for the response.
        /// </summary>
        public string AcceptLanguage { get; set;}

        /// <summary>
        /// The retry timeout in seconds for Long Running Operations. Default
        /// /// value is 30.
        /// </summary>
        public int? LongRunningOperationRetryTimeout { get; set;}

        /// <summary>
        /// Whether a unique x-ms-client-request-id should be generated. When
        /// /// set to true a unique x-ms-client-request-id value is generated and
        /// /// included in each request. Default is true.
        /// </summary>
        public bool? GenerateClientRequestId { get; set;}

        /// <summary>
        /// Gets the IOperations
        /// </summary>
        public virtual IOperations Operations { get; private set; }
        /// <summary>
        /// Gets the IUsageOperations
        /// </summary>
        public virtual IUsageOperations Usage { get; private set; }
        /// <summary>
        /// Gets the IVirtualMachineSizesOperations
        /// </summary>
        public virtual IVirtualMachineSizesOperations VirtualMachineSizes { get; private set; }
        /// <summary>
        /// Gets the IVirtualMachineScaleSetsOperations
        /// </summary>
        public virtual IVirtualMachineScaleSetsOperations VirtualMachineScaleSets { get; private set; }
        /// <summary>
        /// Gets the IVirtualMachineScaleSetExtensionsOperations
        /// </summary>
        public virtual IVirtualMachineScaleSetExtensionsOperations VirtualMachineScaleSetExtensions { get; private set; }
        /// <summary>
        /// Gets the IVirtualMachineScaleSetRollingUpgradesOperations
        /// </summary>
        public virtual IVirtualMachineScaleSetRollingUpgradesOperations VirtualMachineScaleSetRollingUpgrades { get; private set; }
        /// <summary>
        /// Gets the IVirtualMachineScaleSetVMExtensionsOperations
        /// </summary>
        public virtual IVirtualMachineScaleSetVMExtensionsOperations VirtualMachineScaleSetVMExtensions { get; private set; }
        /// <summary>
        /// Gets the IVirtualMachineScaleSetVMSOperations
        /// </summary>
        public virtual IVirtualMachineScaleSetVMSOperations VirtualMachineScaleSetVMS { get; private set; }
        /// <summary>
        /// Gets the IVirtualMachineExtensionsOperations
        /// </summary>
        public virtual IVirtualMachineExtensionsOperations VirtualMachineExtensions { get; private set; }
        /// <summary>
        /// Gets the IVirtualMachinesOperations
        /// </summary>
        public virtual IVirtualMachinesOperations VirtualMachines { get; private set; }
        /// <summary>
        /// Gets the IVirtualMachineImagesOperations
        /// </summary>
        public virtual IVirtualMachineImagesOperations VirtualMachineImages { get; private set; }
        /// <summary>
        /// Gets the IVirtualMachineImagesEdgeZoneOperations
        /// </summary>
        public virtual IVirtualMachineImagesEdgeZoneOperations VirtualMachineImagesEdgeZone { get; private set; }
        /// <summary>
        /// Gets the IVirtualMachineExtensionImagesOperations
        /// </summary>
        public virtual IVirtualMachineExtensionImagesOperations VirtualMachineExtensionImages { get; private set; }
        /// <summary>
        /// Gets the IAvailabilitySetsOperations
        /// </summary>
        public virtual IAvailabilitySetsOperations AvailabilitySets { get; private set; }
        /// <summary>
        /// Gets the IProximityPlacementGroupsOperations
        /// </summary>
        public virtual IProximityPlacementGroupsOperations ProximityPlacementGroups { get; private set; }
        /// <summary>
        /// Gets the IDedicatedHostGroupsOperations
        /// </summary>
        public virtual IDedicatedHostGroupsOperations DedicatedHostGroups { get; private set; }
        /// <summary>
        /// Gets the IDedicatedHostsOperations
        /// </summary>
        public virtual IDedicatedHostsOperations DedicatedHosts { get; private set; }
        /// <summary>
        /// Gets the ISshPublicKeysOperations
        /// </summary>
        public virtual ISshPublicKeysOperations SshPublicKeys { get; private set; }
        /// <summary>
        /// Gets the IImagesOperations
        /// </summary>
        public virtual IImagesOperations Images { get; private set; }
        /// <summary>
        /// Gets the IRestorePointCollectionsOperations
        /// </summary>
        public virtual IRestorePointCollectionsOperations RestorePointCollections { get; private set; }
        /// <summary>
        /// Gets the IRestorePointsOperations
        /// </summary>
        public virtual IRestorePointsOperations RestorePoints { get; private set; }
        /// <summary>
        /// Gets the ICapacityReservationGroupsOperations
        /// </summary>
        public virtual ICapacityReservationGroupsOperations CapacityReservationGroups { get; private set; }
        /// <summary>
        /// Gets the ICapacityReservationsOperations
        /// </summary>
        public virtual ICapacityReservationsOperations CapacityReservations { get; private set; }
        /// <summary>
        /// Gets the ILogAnalyticsOperations
        /// </summary>
        public virtual ILogAnalyticsOperations LogAnalytics { get; private set; }
        /// <summary>
        /// Gets the IVirtualMachineRunCommandsOperations
        /// </summary>
        public virtual IVirtualMachineRunCommandsOperations VirtualMachineRunCommands { get; private set; }
        /// <summary>
        /// Gets the IVirtualMachineScaleSetVMRunCommandsOperations
        /// </summary>
        public virtual IVirtualMachineScaleSetVMRunCommandsOperations VirtualMachineScaleSetVMRunCommands { get; private set; }
        /// <summary>
        /// Gets the IDisksOperations
        /// </summary>
        public virtual IDisksOperations Disks { get; private set; }
        /// <summary>
        /// Gets the IDiskAccessesOperations
        /// </summary>
        public virtual IDiskAccessesOperations DiskAccesses { get; private set; }
        /// <summary>
        /// Gets the IDiskEncryptionSetsOperations
        /// </summary>
        public virtual IDiskEncryptionSetsOperations DiskEncryptionSets { get; private set; }
        /// <summary>
        /// Gets the IDiskRestorePointOperations
        /// </summary>
        public virtual IDiskRestorePointOperations DiskRestorePoint { get; private set; }
        /// <summary>
        /// Gets the ISnapshotsOperations
        /// </summary>
        public virtual ISnapshotsOperations Snapshots { get; private set; }
        /// <summary>
        /// Gets the IResourceSkusOperations
        /// </summary>
        public virtual IResourceSkusOperations ResourceSkus { get; private set; }
        /// <summary>
        /// Gets the IGalleriesOperations
        /// </summary>
        public virtual IGalleriesOperations Galleries { get; private set; }
        /// <summary>
        /// Gets the IGalleryImagesOperations
        /// </summary>
        public virtual IGalleryImagesOperations GalleryImages { get; private set; }
        /// <summary>
        /// Gets the IGalleryImageVersionsOperations
        /// </summary>
        public virtual IGalleryImageVersionsOperations GalleryImageVersions { get; private set; }
        /// <summary>
        /// Gets the IGalleryApplicationsOperations
        /// </summary>
        public virtual IGalleryApplicationsOperations GalleryApplications { get; private set; }
        /// <summary>
        /// Gets the IGalleryApplicationVersionsOperations
        /// </summary>
        public virtual IGalleryApplicationVersionsOperations GalleryApplicationVersions { get; private set; }
        /// <summary>
        /// Gets the IGallerySharingProfileOperations
        /// </summary>
        public virtual IGallerySharingProfileOperations GallerySharingProfile { get; private set; }
        /// <summary>
        /// Gets the ISharedGalleriesOperations
        /// </summary>
        public virtual ISharedGalleriesOperations SharedGalleries { get; private set; }
        /// <summary>
        /// Gets the ISharedGalleryImagesOperations
        /// </summary>
        public virtual ISharedGalleryImagesOperations SharedGalleryImages { get; private set; }
        /// <summary>
        /// Gets the ISharedGalleryImageVersionsOperations
        /// </summary>
        public virtual ISharedGalleryImageVersionsOperations SharedGalleryImageVersions { get; private set; }
        /// <summary>
        /// Gets the ICommunityGalleriesOperations
        /// </summary>
        public virtual ICommunityGalleriesOperations CommunityGalleries { get; private set; }
        /// <summary>
        /// Gets the ICommunityGalleryImagesOperations
        /// </summary>
        public virtual ICommunityGalleryImagesOperations CommunityGalleryImages { get; private set; }
        /// <summary>
        /// Gets the ICommunityGalleryImageVersionsOperations
        /// </summary>
        public virtual ICommunityGalleryImageVersionsOperations CommunityGalleryImageVersions { get; private set; }
        /// <summary>
        /// Gets the ICloudServiceRoleInstancesOperations
        /// </summary>
        public virtual ICloudServiceRoleInstancesOperations CloudServiceRoleInstances { get; private set; }
        /// <summary>
        /// Gets the ICloudServiceRolesOperations
        /// </summary>
        public virtual ICloudServiceRolesOperations CloudServiceRoles { get; private set; }
        /// <summary>
        /// Gets the ICloudServicesOperations
        /// </summary>
        public virtual ICloudServicesOperations CloudServices { get; private set; }
        /// <summary>
        /// Gets the ICloudServicesUpdateDomainOperations
        /// </summary>
        public virtual ICloudServicesUpdateDomainOperations CloudServicesUpdateDomain { get; private set; }
        /// <summary>
        /// Gets the ICloudServiceOperatingSystemsOperations
        /// </summary>
        public virtual ICloudServiceOperatingSystemsOperations CloudServiceOperatingSystems { get; private set; }
        /// <summary>
        /// Initializes a new instance of the ComputeManagementClient class.
        /// </summary>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling ComputeManagementClient.Dispose(). False: will not dispose provided httpClient</param>
        protected ComputeManagementClient(System.Net.Http.HttpClient httpClient, bool disposeHttpClient) : base(httpClient, disposeHttpClient)
        {
            this.Initialize();
        }
        /// <summary>
        /// Initializes a new instance of the ComputeManagementClient class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected ComputeManagementClient(params System.Net.Http.DelegatingHandler[] handlers) : base(handlers)
        {
            this.Initialize();
        }
        /// <summary>
        /// Initializes a new instance of the ComputeManagementClient  class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected ComputeManagementClient(System.Net.Http.HttpClientHandler rootHandler, params System.Net.Http.DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            this.Initialize();
        }
        /// <summary>
        /// Initializes a new instance of the ComputeManagementClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        protected ComputeManagementClient(System.Uri baseUri, params System.Net.Http.DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            this.BaseUri = baseUri;
        }
        /// <summary>
        /// Initializes a new instance of the ComputeManagementClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        protected ComputeManagementClient(System.Uri baseUri, System.Net.Http.HttpClientHandler rootHandler, params System.Net.Http.DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
        
            this.BaseUri = baseUri;
        }
        /// <summary>
        /// Initializes a new instance of the ComputeManagementClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public ComputeManagementClient(Microsoft.Rest.ServiceClientCredentials credentials, params System.Net.Http.DelegatingHandler[] handlers) : this(handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
            
        }
        /// <summary>
        /// Initializes a new instance of the ComputeManagementClient class.
        /// </summary>
        /// <param name="credentials">
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling ComputeManagementClient.Dispose(). False: will not dispose provided httpClient</param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public ComputeManagementClient(Microsoft.Rest.ServiceClientCredentials credentials, System.Net.Http.HttpClient httpClient, bool disposeHttpClient) : this(httpClient, disposeHttpClient)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
            
        }
        /// <summary>
        /// Initializes a new instance of the ComputeManagementClient class.
        /// </summary>
        /// <param name="credentials">
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public ComputeManagementClient(Microsoft.Rest.ServiceClientCredentials credentials, System.Net.Http.HttpClientHandler rootHandler, params System.Net.Http.DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
            
        }
        /// <summary>
        /// Initializes a new instance of the ComputeManagementClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name="credentials">
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public ComputeManagementClient(System.Uri baseUri, Microsoft.Rest.ServiceClientCredentials credentials, params System.Net.Http.DelegatingHandler[] handlers) : this(handlers) 
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            this.BaseUri = baseUri;
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
            
        }
        /// <summary>
        /// Initializes a new instance of the ComputeManagementClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name="credentials">
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public ComputeManagementClient(System.Uri baseUri, Microsoft.Rest.ServiceClientCredentials credentials, System.Net.Http.HttpClientHandler rootHandler, params System.Net.Http.DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            this.BaseUri = baseUri;
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
            
        }
        /// <summary>
        /// An optional partial-method to perform custom initialization.
        /// </summary>
        partial void CustomInitialize();

        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            this.Operations = new Operations(this);
            this.Usage = new UsageOperations(this);
            this.VirtualMachineSizes = new VirtualMachineSizesOperations(this);
            this.VirtualMachineScaleSets = new VirtualMachineScaleSetsOperations(this);
            this.VirtualMachineScaleSetExtensions = new VirtualMachineScaleSetExtensionsOperations(this);
            this.VirtualMachineScaleSetRollingUpgrades = new VirtualMachineScaleSetRollingUpgradesOperations(this);
            this.VirtualMachineScaleSetVMExtensions = new VirtualMachineScaleSetVMExtensionsOperations(this);
            this.VirtualMachineScaleSetVMS = new VirtualMachineScaleSetVMSOperations(this);
            this.VirtualMachineExtensions = new VirtualMachineExtensionsOperations(this);
            this.VirtualMachines = new VirtualMachinesOperations(this);
            this.VirtualMachineImages = new VirtualMachineImagesOperations(this);
            this.VirtualMachineImagesEdgeZone = new VirtualMachineImagesEdgeZoneOperations(this);
            this.VirtualMachineExtensionImages = new VirtualMachineExtensionImagesOperations(this);
            this.AvailabilitySets = new AvailabilitySetsOperations(this);
            this.ProximityPlacementGroups = new ProximityPlacementGroupsOperations(this);
            this.DedicatedHostGroups = new DedicatedHostGroupsOperations(this);
            this.DedicatedHosts = new DedicatedHostsOperations(this);
            this.SshPublicKeys = new SshPublicKeysOperations(this);
            this.Images = new ImagesOperations(this);
            this.RestorePointCollections = new RestorePointCollectionsOperations(this);
            this.RestorePoints = new RestorePointsOperations(this);
            this.CapacityReservationGroups = new CapacityReservationGroupsOperations(this);
            this.CapacityReservations = new CapacityReservationsOperations(this);
            this.LogAnalytics = new LogAnalyticsOperations(this);
            this.VirtualMachineRunCommands = new VirtualMachineRunCommandsOperations(this);
            this.VirtualMachineScaleSetVMRunCommands = new VirtualMachineScaleSetVMRunCommandsOperations(this);
            this.Disks = new DisksOperations(this);
            this.DiskAccesses = new DiskAccessesOperations(this);
            this.DiskEncryptionSets = new DiskEncryptionSetsOperations(this);
            this.DiskRestorePoint = new DiskRestorePointOperations(this);
            this.Snapshots = new SnapshotsOperations(this);
            this.ResourceSkus = new ResourceSkusOperations(this);
            this.Galleries = new GalleriesOperations(this);
            this.GalleryImages = new GalleryImagesOperations(this);
            this.GalleryImageVersions = new GalleryImageVersionsOperations(this);
            this.GalleryApplications = new GalleryApplicationsOperations(this);
            this.GalleryApplicationVersions = new GalleryApplicationVersionsOperations(this);
            this.GallerySharingProfile = new GallerySharingProfileOperations(this);
            this.SharedGalleries = new SharedGalleriesOperations(this);
            this.SharedGalleryImages = new SharedGalleryImagesOperations(this);
            this.SharedGalleryImageVersions = new SharedGalleryImageVersionsOperations(this);
            this.CommunityGalleries = new CommunityGalleriesOperations(this);
            this.CommunityGalleryImages = new CommunityGalleryImagesOperations(this);
            this.CommunityGalleryImageVersions = new CommunityGalleryImageVersionsOperations(this);
            this.CloudServiceRoleInstances = new CloudServiceRoleInstancesOperations(this);
            this.CloudServiceRoles = new CloudServiceRolesOperations(this);
            this.CloudServices = new CloudServicesOperations(this);
            this.CloudServicesUpdateDomain = new CloudServicesUpdateDomainOperations(this);
            this.CloudServiceOperatingSystems = new CloudServiceOperatingSystemsOperations(this);
            this.BaseUri = new System.Uri("https://management.azure.com");
            this.AcceptLanguage = "en-US";
            this.LongRunningOperationRetryTimeout = 30;
            this.GenerateClientRequestId = true;
            SerializationSettings = new Newtonsoft.Json.JsonSerializerSettings
            {
                Formatting = Newtonsoft.Json.Formatting.Indented,
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new Microsoft.Rest.Serialization.ReadOnlyJsonContractResolver(),
                Converters = new System.Collections.Generic.List<Newtonsoft.Json.JsonConverter>
                    {
                        new Microsoft.Rest.Serialization.Iso8601TimeSpanConverter()
                    }
            };
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.TransformationJsonConverter());
            DeserializationSettings = new Newtonsoft.Json.JsonSerializerSettings
            {
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new Microsoft.Rest.Serialization.ReadOnlyJsonContractResolver(),
                Converters = new System.Collections.Generic.List<Newtonsoft.Json.JsonConverter>
                    {
                        new Microsoft.Rest.Serialization.Iso8601TimeSpanConverter()
                    }
            };
            CustomInitialize();
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.TransformationJsonConverter());
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Azure.CloudErrorJsonConverter());
        }
    }
}