variables:
  WindowsName: windows
  WindowsImage: VS2017-Win2016
  TestFramework: net472
  TestTarget: TestNet472
  Configuration: Debug

jobs:
- job: Build
  displayName: Build
  condition: succeeded()
  pool:
    vmImage: ${{ variables.WindowsImage }}

  steps:
  - template: util/build-steps.yml
    parameters:
      osName: ${{ variables.WindowsName }}
      testFramework: ${{ variables.TestFramework }}
      configuration: ${{ variables.Configuration }}

- job: Analyze
  displayName: Analyze
  dependsOn: Build
  condition: succeeded()
  pool:
    vmImage: ${{ variables.WindowsImage }}

  steps:
  - task: DownloadPackage@1
    displayName: 'Download CredScan'
    inputs:
      feed: 7172b7c1-b3cd-41c7-8b2c-8947e27fc760
      definition: ba5ce490-a34f-42ca-b804-76559e7992a2
      version: 1.0.26.1
      downloadPath: tools/SecurityTools/Microsoft.Azure.CredentialScanner.1.0.26.1
  - task: PowerShell@2
    displayName: 'Run CredScan'
    inputs:
      targetType: filePath
      filePath: tools/SecurityToolsScripts/RunCredScan.ps1
      pwsh: true
  - template: util/analyze-steps.yml
    parameters:
      osName: ${{ variables.WindowsName }}
      configuration: ${{ variables.Configuration }}
  - task: PowerShell@2
    displayName: 'Cleanup Build'
    inputs:
      targetType: filePath
      filePath: tools/CleanupBuild.ps1
      pwsh: true
  - task: NuGetCommand@2
    displayName: 'Download BinSkim'
    inputs:
      command: custom
      arguments: 'install Microsoft.CodeAnalysis.BinSkim -OutputDirectory $(System.DefaultWorkingDirectory)/tools/SecurityTools'
  - task: PowerShell@2
    displayName: 'Run BinSkim'
    inputs:
      targetType: filePath
      filePath: tools/SecurityToolsScripts/RunBinSkim.ps1
      pwsh: true
  - task: DownloadPackage@1
    displayName: 'Download PoliCheck'
    inputs:
      feed: 7172b7c1-b3cd-41c7-8b2c-8947e27fc760
      definition: 72640853-3649-4f80-bdca-3d0627949f7
      version: 5.9.1
      downloadPath: tools/SecurityTools/Microsoft.StaticAnalysis.PoliCheck.5.9.1
  - task: PowerShell@2
    displayName: 'Run PoliCheck'
    inputs:
      targetType: filePath
      filePath: tools/SecurityToolsScripts/RunPoliCheck.ps1
      pwsh: true

- job: Test
  displayName: Test
  dependsOn: Build
  condition: succeeded()
  timeoutInMinutes: 120
  pool:
    vmImage: ${{ variables.WindowsImage }}

  steps:
  - template: util/test-steps.yml
    parameters:
      osName: ${{ variables.WindowsName }}
      testFramework: ${{ variables.TestFramework }}
      testTarget: ${{ variables.TestTarget }}
      configuration: ${{ variables.Configuration }}