<?xml version="1.0" encoding="utf-8"?>
<!--
  Available Targets:

  /t:Clean
    Removes temporary build outputs.

  /t:Build
    Builds assemblies.

  /t:Test
    Runs tests

  /t:Publish
    Creates local nuget packages and MSI

  /p:CodeSign=True
    Code sign binaries, mainly for official release. Default is false.

  /p:CodeSign=True;DelaySign=True
    Test the code sign workflow locally.

  /p:Scope
    'ServiceManagement': service management
    'AzureStorage': storage data plane cmdlets
    'Stack': Azure Stack cmdlets
    'Subfolder under src': An individual cmdlet module
    By default, it builds everything

  /p:SkipHelp=True
    Skips help generation, mainly for local builds to save time.

  /p:SkipNugetRestore=True
    Skips nuget restore, mainly for local builds to save time when you have already restored nugets.

  /p:SkipDependencyAnalysis=True
    Skips build validation, mainly for local builds to save time.

  /p:QuickBuild=true
    Same thing as doing SkipHelp, SkipNugetRestore, and SkipDependencyAnalysis
-->
<Project DefaultTargets="Build" ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <Import Project="$(MSBuildThisFileDirectory)Repo.props" />

  <!-- Define default build properties -->
  <PropertyGroup>
    <LibraryRoot>$(MSBuildThisFileDirectory)</LibraryRoot>
    <LibrarySourceFolder>$(LibraryRoot)src</LibrarySourceFolder>
    <LibraryToolsFolder>$(LibraryRoot)tools</LibraryToolsFolder>
    <LocalFeedFolder>$(LibraryToolsFolder)/LocalFeed</LocalFeedFolder>
    <Configuration Condition=" '$(Configuration)' != 'Release'">Debug</Configuration>
    <CodeSign>false</CodeSign>
    <!--Set this true only if you want to test the code sign workflow locally-->
    <DelaySign Condition =" '$(DelaySign)' == '' ">false</DelaySign>
    <SignedOutputRootDir>$(LibraryRoot)signed</SignedOutputRootDir>
    <PackageDirectory>$(LibraryRoot)/artifacts</PackageDirectory>
    <TestOutputDirectory>$(PackageDirectory)/Test</TestOutputDirectory>
    <BuildInParallel Condition="'$(BuildInParallel)' == ''">true</BuildInParallel>
    <NuGetPublishingSource Condition=" '$(NuGetPublishingSource)' == '' ">$(LibrarySourceFolder)</NuGetPublishingSource>
    <BuildTasksPath>$(LibraryToolsFolder)/BuildPackagesTask/Microsoft.Azure.Build.Tasks/bin/$(Configuration)</BuildTasksPath>
    <StackPackageFolder>$(LibrarySourceFolder)/Stack</StackPackageFolder>
    <Scope Condition="$(Scope) == ''" >All</Scope>
    <NetCore Condition="'$(NetCore)' != 'false'">true</NetCore>
    <RunStaticAnalysis Condition="'$(RunStaticAnalysis)' != 'false'">true</RunStaticAnalysis>
    <Scope Condition="$(NetCore) == 'true'">Netcore</Scope>
    <!-- Set Skips -->
    <SkipHelp Condition ="'$(SkipHelp)' != 'true'">false</SkipHelp>
    <SkipNugetRestore Condition="'$(SkipNugetRestore)' != 'true'">false</SkipNugetRestore>
    <SkipDependencyAnalysis Condition="'$(SkipDependencyAnalysis)' != 'true'">false</SkipDependencyAnalysis>
  </PropertyGroup>

  <!-- Skip everything that is not build/test/publish/etc -->
  <PropertyGroup Condition="'$(QuickBuild)' == 'true'">
    <SkipHelp>true</SkipHelp>
    <SkipNugetRestore>true</SkipNugetRestore>
    <SkipDependencyAnalysis>true</SkipDependencyAnalysis>
  </PropertyGroup>

  <ItemGroup>
    <LocalBuildTasks  Include="$(LibraryToolsFolder)/RepoTasks/RepoTasks.sln" Condition="'$(NetCore)' == 'false'" />
    <StackSolution    Include="$(LibrarySourceFolder)/StackAdmin/Stack.sln" Condition="'$(Scope)' == 'All' or '$(Scope)' == 'Stack'" />
    <StaticAnalysis   Include="./tools/StaticAnalysis/StaticAnalysis.sln" />
    <StaticAnalysisNetcore   Include="./tools/StaticAnalysis/StaticAnalysisNetcore.sln" />
    <LocalBuildTasks  Include="$(LibraryToolsFolder)/BuildPackagesTask/Microsoft.Azure.Build.Tasks.sln" />
    <LocalBuildTasks  Include="$(LibraryToolsFolder)/RepoTasks/RepoTasks.sln" Condition="'$(NetCore)' == 'false'" />
  </ItemGroup>

  <!-- Tasks -->
  <UsingTask TaskName="ValidateStrongNameSignatureTask" AssemblyFile="$(BuildTasksPath)/Microsoft.Azure.Build.Tasks.dll" />
  <UsingTask TaskName="FilterOutAutoRestLibraries" AssemblyFile="$(BuildTasksPath)/Microsoft.Azure.Build.Tasks.dll" />
  <UsingTask TaskName="DebugTask" AssemblyFile="$(BuildTasksPath)/Microsoft.Azure.Build.Tasks.dll" />
  <UsingTask TaskName="VerifyAuthenticodeSignatureTask" AssemblyFile="$(BuildTasksPath)/Microsoft.Azure.Build.Tasks.dll" />
  <UsingTask TaskName="FilesChangedTask" AssemblyFile="$(BuildTasksPath)/Microsoft.Azure.Build.Tasks.dll" />
  <UsingTask TaskName="FilterTask" AssemblyFile="$(BuildTasksPath)/Microsoft.Azure.Build.Tasks.dll" />
  <UsingTask TaskName="SetEnvVar" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)/Microsoft.Build.Tasks.Core.dll" >
    <ParameterGroup>
      <EnvName ParameterType="System.String" Required="true" />
      <EnvValue ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[System.Environment.SetEnvironmentVariable(EnvName, EnvValue);]]>
      </Code>
    </Task>
  </UsingTask>

  <!-- CI build related -->
  <PropertyGroup>
    <!--OnPremiseBuildTasks is not a good name, but CI server is using that, will update across soon-->
    <CIToolsPath>$(OnPremiseBuildTasks)</CIToolsPath>
    <OnPremiseBuild Condition=" Exists($(OnPremiseBuildTasks)) ">true</OnPremiseBuild>
    <OnPremiseBuild Condition=" ! Exists($(OnPremiseBuildTasks)) ">false</OnPremiseBuild>
  </PropertyGroup>

  <UsingTask Condition=" $(OnPremiseBuild) " TaskName="CorporateValidation" AssemblyFile="$(CIToolsPath)/Microsoft.WindowsAzure.Tools.Build.Tasks.OnPremise.dll" />
  <Import Condition=" $(OnPremiseBuild) " Project="$(CIToolsPath)/Microsoft.WindowsAzure.Build.OnPremise.msbuild" />
  <Import Project="CodeSign.targets"/>

  <UsingTask AssemblyFile="$(MSBuildProjectDirectory)/packages/xunit.runner.msbuild.2.1.0/build/portable-net45+win8+wp8+wpa81/xunit.runner.msbuild.dll" TaskName="Xunit.Runner.MSBuild.xunit" />

  <!-- Clean the build in all configurations -->
  <Target Name="Clean">
    <Message Importance="high" Text="Cleaning Cmdlets..." />

    <!-- Clean out the NuGet cache -->
    <Exec Command="$(PowerShellCoreCommandPrefix) &quot;Remove-Item -Path (Join-Path ($env:USERPROFILE) .nuget packages) -Recurse -Force -Confirm:$false -ErrorAction Ignore&quot;" ContinueOnError="WarnAndContinue" IgnoreExitCode="true" />

    <!-- Remove Package, Publish, bin, obj, and TestResults directories -->
    <Exec Command="$(PowerShellCoreCommandPrefix) &quot;Remove-Item -Path $(PackageDirectory) -Recurse -Force -Confirm:$false -ErrorAction Ignore&quot;" ContinueOnError="WarnAndContinue" IgnoreExitCode="true" />
    <Exec Command="$(PowerShellCoreCommandPrefix) &quot;Get-ChildItem -Path $(MSBuildThisFileDirectory) -Recurse -Include 'bin','obj','TestResults' | Remove-Item -Recurse -Force -Confirm:$false -ErrorAction Ignore&quot;" ContinueOnError="WarnAndContinue" IgnoreExitCode="true" />
  </Target>

  <PropertyGroup>
    <NuGetCommand>$(MSBuildProjectDirectory)/tools/NuGet.exe</NuGetCommand>
    <LibraryNugetPackageFolder>$(LibrarySourceFolder)/packages</LibraryNugetPackageFolder>
    <NuGetRestoreConfigFile>$(MSBuildProjectDirectory)/NuGet.Config</NuGetRestoreConfigFile>
    <NuGetRestoreConfigSwitch>-ConfigFile &quot;$(NuGetRestoreConfigFile)&quot;</NuGetRestoreConfigSwitch>
    <NuGetRestorePackageSetting>-PackagesDirectory $(LibraryNugetPackageFolder)</NuGetRestorePackageSetting>
    <NuGetLocalBuildTaskPackages>-PackagesDirectory $(LibraryToolsFolder)/BuildPackagesTask/packages</NuGetLocalBuildTaskPackages>
    <NuGetRepoTasksPackages>-PackagesDirectory $(LibraryToolsFolder)/RepoTasks/packages</NuGetRepoTasksPackages>

    <PowerShellCommand Condition=" '$(PowerShellCommand)' == '' ">C:/Windows/System32/WindowsPowerShell/v1.0/powershell.exe</PowerShellCommand>
    <PowerShellCoreCommand Condition=" '$(PowerShellCoreCommand)' == '' ">pwsh</PowerShellCoreCommand>
    <!-- All PowerShell commands have this prefix  -->
    <PowerShellCommandPrefix>&quot;$(PowerShellCommand)&quot; -NonInteractive -NoLogo -NoProfile -Command</PowerShellCommandPrefix>
    <PowerShellCoreCommandPrefix>$(PowerShellCoreCommand) -NonInteractive -NoLogo -NoProfile -Command</PowerShellCoreCommandPrefix>
  </PropertyGroup>

  <!--
  Force nuget package restore so that packages that include .targets files
  don't need to be checked into source control.
  -->
  <Target Name="RestoreNugetPackages" Condition="$(SkipNugetRestore) == 'false'">
    <Message Importance="high" Text="Restore Nuget packages..." />
    <!-- Restore packages for local build tasks-->
    <Exec Command="$(NuGetCommand) restore %(LocalBuildTasks.FullPath) $(NuGetRestoreConfigSwitch) $(NuGetRestorePackageSetting)" ContinueOnError="false" />
  </Target>

  <Target Name="FilterBuild">
    <Exec ContinueOnError="false" Command="&quot;$(PowerShellCommand)&quot; -NonInteractive -NoLogo -NoProfile -Command &quot; . $(LibraryToolsFolder)/CreateFilterMappings.ps1 &quot;" />

    <!-- Get all of the files changed in the given pull request -->
    <FilesChangedTask RepositoryOwner="Azure" RepositoryName="azure-powershell" PullRequestNumber="$(PullRequestNumber)">
      <Output TaskParameter="FilesChanged" ItemName="FilesChanged" />
    </FilesChangedTask>

    <!-- Get the list of modules changed -->
    <FilterTask FilesChanged="@(FilesChanged)" MapFilePath="./ModuleMappings.json">
      <Output TaskParameter="Output" ItemName="ModulesChanged" />
    </FilterTask>
    <Message Text="Filtering help generation and StaticAnalysis by the following modules:" />
    <Message Text="%(ModulesChanged.Identity)" />
    <Message Text="Total: @(ModulesChanged->Count())" />
    <Message Text="" />

    <!-- Get the list of solutions to build -->
    <FilterTask FilesChanged="@(FilesChanged)" MapFilePath="./SolutionMappings.json">
      <Output TaskParameter="Output" ItemName="CmdletSolutionsToBuild" />
    </FilterTask>
    <Message Text="Filtering solutions to build by the following:" />
    <Message Text="%(CmdletSolutionsToBuild.Identity)" />
    <Message Text="Total: @(CmdletSolutionsToBuild->Count())" />
    <Message Text="" />

    <!--Get the list of tests to be run based on files changed from a specified PullRequestNumber. Mapping between paths and test DLLs is used to produce the list.-->
    <FilterTask FilesChanged="@(FilesChanged)" MapFilePath="./TestMappings.json">
      <Output TaskParameter="Output" ItemName="XUnitTests" />
    </FilterTask>
    <Message Text="Using these test assemblies:" />
    <Message Text="%(XUnitTests.Identity)" />
    <Message Text="Total: @(XunitTests->Count())" />
    <Message Text="" />

    <!-- Restore packages -->
    <Exec Command="$(NuGetCommand) restore %(CmdletSolutionsToBuild.FullPath) $(NuGetRestoreConfigSwitch) $(NuGetRestorePackageSetting)" ContinueOnError="false" />
  </Target>

  <!-- Build all flavors of the Cmdlets -->
  <!-- TODO: Reimplement the FilterBuild and update RepoTasks to NetStandard -->
  <!-- <Target Name="Build" DependsOnTargets="RestoreNugetPackages;BuildMsBuildTask;FilterBuild"> -->
  <Target Name="Build">
    <Message Importance="high" Text="Building Cmdlets..." />
    <PropertyGroup>
      <Scope>Netcore</Scope>
    </PropertyGroup>
    <MakeDir Directories="$(PackageDirectory)" Condition="'$(Scope)' != 'Stack'" />

    <!-- Investigate why the ChangeLogCheck target removes the 8080th character -->
    <!-- <CallTarget targets="ChangeLogCheck" ContinueOnError="false" /> -->

    <!-- Build and create package content -->
    <Exec Command="dotnet --version" />
    <Exec Command="dotnet new sln -n Azure.PowerShell --force" />
    <ItemGroup>
      <CsprojFiles Include="$(LibraryRoot)src/**/*.csproj" />
    </ItemGroup>
    <!-- https://github.com/dotnet/cli/issues/6295#issuecomment-346973582 -->
    <Exec Command="dotnet sln Azure.PowerShell.sln add &quot;%(CsprojFiles.FullPath)&quot;" />
    <Exec Command="dotnet sln Azure.PowerShell.sln add &quot;$(LibraryRoot)tools/Tools.Common/Tools.Common.Netcore.csproj&quot; &quot;$(LibraryRoot)tools/StaticAnalysis/StaticAnalysis.Netcore.csproj&quot;" />
    <Exec Command="dotnet build Azure.PowerShell.sln -c $(Configuration)" />

    <!-- Delete powershell runtime files -->
    <ItemGroup>
      <RedundantDlls Include="$(PackageDirectory)/**/Microsoft.Powershell.*.dll" />
      <RedundantDlls Include="$(PackageDirectory)/**/System*.dll" Exclude="
$(PackageDirectory)/**/System.Security.Cryptography.ProtectedData.dll;
$(PackageDirectory)/**/System.Configuration.ConfigurationManager.dll;
$(PackageDirectory)/**/System.Runtime.CompilerServices.Unsafe.dll;
$(PackageDirectory)/**/System.IO.FileSystem.AccessControl.dll;
$(PackageDirectory)/**/System.Buffers.dll;
$(PackageDirectory)/**/System.Text.Encodings.Web.dll;
$(PackageDirectory)/**/System.Management.Automation.dll" />
      <RedundantDlls Include="$(PackageDirectory)/**/Microsoft.VisualBasic.dll" />
      <RedundantDlls Include="$(PackageDirectory)/**/Microsoft.CSharp.dll" />
      <RedundantDlls Include="$(PackageDirectory)/**/Microsoft.CodeAnalysis.dll" />
      <RedundantDlls Include="$(PackageDirectory)/**/Microsoft.CodeAnalysis.CSharp.dll" />
    </ItemGroup>
    <Delete Files="@(RedundantDlls->'%(FullPath)')" />

    <!-- Update module manifests. -->
    <Exec Command="$(PowerShellCoreCommandPrefix) &quot;. $(LibraryToolsFolder)/UpdateModules.ps1 -BuildConfig $(Configuration) -Scope $(Scope)&quot;" Condition="'$(CodeSign)' == 'false'" ContinueOnError="false" />
    <!-- Generate the Help -->
    <Exec Command="$(PowerShellCoreCommandPrefix) &quot;Set-Variable -Name ProgressPreference -Value 'SilentlyContinue';. $(LibraryToolsFolder)/GenerateHelp.ps1 -ValidateMarkdownHelp -GenerateMamlHelp -BuildConfig $(Configuration)&quot;" Condition="'$(SkipHelp)' == 'false' And '$(RunStaticAnalysis)' == 'true'" ContinueOnError="false" />

    <Exec ContinueOnError="false"
      Command="$(PowerShellCoreCommandPrefix) &quot;. $(LibraryToolsFolder)/NewOutputTypeIndex.ps1 -OutputFile $(PackageDirectory)/outputtypes.json -BuildConfig $(Configuration) &quot;" 
      Condition="'$(CodeSign)' == 'true'"/>

    <CallTarget targets="DependencyAnalysisNetcore" ContinueOnError="ErrorAndContinue" Condition="'$(RunStaticAnalysis)' == 'true'" />
    <Exec Command="$(PowerShellCommandPrefix) &quot;. $(LibraryToolsFolder)/CheckAssemblies.ps1 -BuildConfig $(Configuration) &quot;" Condition="'$(RunStaticAnalysis)' == 'true'" />

    <!-- Cleanup extraneous files. -->
    <Exec Command="$(PowerShellCoreCommandPrefix) &quot;. $(LibraryToolsFolder)/CleanupBuild.ps1 -BuildConfig $(Configuration)&quot;" />

    <Exec ContinueOnError="false"
          Command="$(PowerShellCoreCommandPrefix) &quot; . $(LibraryToolsFolder)/NewHelpIndex.ps1 -OutputFile $(PackageDirectory)/index.json -BuildConfig $(Configuration) &quot;" 
          Condition="'$(CodeSign)' == 'true'"/>

    <CallTarget Targets="BinScopeCheck" Condition="'$(OnPremiseBuild)'" />

    <CallTarget Targets="RunPoliCheck" Condition="'$(OnPremiseBuild)'" />

    <CallTarget Targets="CodeSignBinaries" Condition="'$(CodeSign)' == 'true'" />

    <Exec ContinueOnError="false" Command="$(PowerShellCoreCommandPrefix) &quot;. $(LibraryToolsFolder)/NewOutputTypeIndex.ps1 -OutputFile $(PackageDirectory)/outputtypes.json -BuildConfig $(Configuration)&quot;" Condition="('$(Scope)' == 'All' or '$(Scope)' == 'Latest') and $(CodeSign) == 'true'" />

    <!-- TODO: Implement CheckAssemblies.ps1 for Az. -->
    <!-- <Exec Command="$(PowerShellCoreCommandPrefix) &quot;. $(LibraryToolsFolder)/CheckAssemblies.ps1 -BuildConfig $(Configuration) &quot;" /> -->

    <Exec ContinueOnError="false" Command="$(PowerShellCoreCommandPrefix) &quot;. $(LibraryToolsFolder)/NewHelpIndex.ps1 -OutputFile $(PackageDirectory)/index.json -BuildConfig $(Configuration)&quot;" Condition="('$(Scope)' == 'All' or '$(Scope)' == 'Latest') and $(CodeSign) == 'true'" />
  </Target>

  <!-- Do everything possible except Publish -->
  <Target Name="Full" DependsOnTargets="Clean;Build;Test" />

  <Target Name="BuildMsBuildTask" DependsOnTargets="RestoreNugetPackages">
    <Message Importance="high" Text="Building RepoTasks" />
    <MSBuild Projects="@(LocalBuildTasks)" Targets="Build" Properties="Configuration=$(Configuration);Platform=Any CPU" />
  </Target>

  <Target Name="BuildInstaller" Condition="'$(Scope)' == 'All' or '$(Scope)' == 'Latest' or '$(Scope)' == 'Netcore'">
    <Exec Command="$(PowerShellCommandPrefix) &quot;. Register-PSRepository -Name MSIcreationrepository -SourceLocation $(PackageDirectory) -InstallationPolicy Trusted &quot; " />
    <Exec Command="$(PowerShellCommandPrefix) &quot;. $(LibraryRoot)/setup/generate.ps1 -repository MSIcreationrepository &quot; " />
    <Exec Command="$(PowerShellCommandPrefix) &quot;. Unregister-PSRepository -Name MSIcreationrepository &quot; " />
    <CallTarget Targets="CodeSignInstaller" Condition=" '$(CodeSign)' == 'true'" />
  </Target>

  <Target Name="DependencyAnalysisNetcore" Condition="'$(SkipDependencyAnalysis)' == 'false'">
    <MSBuild Projects="@(StaticAnalysisNetcore)" Targets="Build" Properties="Configuration=Debug;Platform=Any CPU" ContinueOnError="false" />

    <Message Importance="high" Text="Running dependency analysis..." />

    <PropertyGroup>
      <SkipHelpValue Condition=" '$(SkipHelp)' == 'true' ">-s</SkipHelpValue>
    </PropertyGroup>
    <Exec Command="dotnet $(MSBuildProjectDirectory)/artifacts/StaticAnalysis.Netcore.dll -p $(MSBuildProjectDirectory)/artifacts/$(Configuration) -r $(MSBuildProjectDirectory)/artifacts $(SkipHelpValue) -u -m @(ModulesChanged)" />

    <OnError ExecuteTargets="StaticAnalysisErrorMessage"/>
  </Target>

  <Target Name="StaticAnalysisErrorMessage">
    <Error Text="StaticAnalysis has failed. Please follow the instructions on this doc: https://github.com/Azure/azure-powershell/blob/master/documentation/Debugging-StaticAnalysis-Errors.md" />
  </Target>

  <Target Name="ChangeLogCheck">
    <Exec Command="$(PowerShellCoreCommandPrefix) &quot;. $(LibraryToolsFolder)/CheckChangeLog.ps1 -FilesChanged '@(FilesChanged)'&quot;" ContinueOnError="false" Condition=" '$(Scope)' == 'All' or '$(Scope)' == 'Latest' " />
    <OnError ExecuteTargets="ChangeLogErrorMessage" />
  </Target>

  <Target Name="ChangeLogErrorMessage">
    <Error Text="Modified files were found with no update to their change log. Please add a snippet to the affected modules' change log." />
  </Target>

  <!-- Publish all packages -->
  <Target Name="Publish">
    <Message Importance="high" Text="Publishing Cmdlets using $(Scope) scope" />

    <Error Condition=" '$(NuGetKey)' == '' " Text="You must provide the NuGetKey parameter to the build: /p:NuGetKey=YOUR_PUBLISHING_KEY" />

    <Exec Command="$(PowerShellCommandPrefix) &quot;. $(LibraryToolsFolder)/PublishModules.ps1 -IsNetCore:$$(NetCore) -BuildConfig $(Configuration) -Scope $(Scope) -ApiKey $(NuGetKey) -RepositoryLocation \&quot;$(NuGetPublishingSource)\&quot; &quot; -NugetExe $(NuGetCommand)"
          Condition="'$(Scope)' != 'Stack'"
          ContinueOnError="false" />

    <CallTarget Targets="BuildInstaller" Condition="'$(Scope)' =='All' or '$(Scope)' == 'Netcore'" />
  </Target>

  <Target Name="Test">
    <Message Importance="high" Text="Running check in tests..." />

    <CallTarget Targets="BinScopeCheck" Condition="'$(OnPremiseBuild)'" />
    <CallTarget Targets="RunPoliCheck" Condition="'$(OnPremiseBuild)'" />

    <MakeDir Directories="$(TestOutputDirectory)" ContinueOnError="false" />

    <!-- https://github.com/Microsoft/msbuild/issues/3157#issuecomment-378002971 -->
    <!-- https://github.com/xunit/xunit/issues/1154#issuecomment-405366373 -->
    <Exec Command="dotnet test Azure.PowerShell.sln --no-build --filter &quot;AcceptanceType=CheckIn%26RunType!=DesktopOnly&quot; --configuration $(Configuration) --framework netcoreapp2.0 --logger trx" />

    <ItemGroup>
      <TestResults Include="$(LibraryRoot)src/**/TestResults/*.trx" />
    </ItemGroup>
    <Copy SourceFiles="@(TestResults)" DestinationFolder="$(TestOutputDirectory)" />

    <OnError ExecuteTargets="TestFailureErrorMessage" />
  </Target>

  <Target Name="TestFailureErrorMessage">
    <Error Text="Test failures occured, check the files in artifacts/Test" />
  </Target>

  <Target Name="BinScopeCheck">
    <Exec Command="$(PowerShellCoreCommandPrefix) &quot;$(MSBuildProjectDirectory)/tools/CheckBinScope.ps1 -BuildConfig $(Configuration) -CIToolsPath $(CIToolsPath)&quot;" ContinueOnError="False" />
    <OnError ExecuteTargets="BinScopeErrorMessage" />
  </Target>

  <Target Name="BinScopeErrorMessage">
    <Error Text="Binscope failed, please check the files in artifacts/BinScope" />
  </Target>

  <Target Name="RunPoliCheck">
    <Exec Command="$(PowerShellCoreCommandPrefix) &quot;$(MSBuildProjectDirectory)/tools/CheckPoliCheck.ps1 -BuildConfig $(Configuration) -CIToolsPath $(CIToolsPath)&quot;" ContinueOnError="False" />
    <OnError ExecuteTargets="PoliCheckErrorMessage" />
  </Target>

  <Target Name="PoliCheckErrorMessage">
    <Error Text="PoliCheck failed with a Severity 1 issue, please check the report at in artifacts/PoliCheck-Scan.html" />
  </Target>

</Project>
